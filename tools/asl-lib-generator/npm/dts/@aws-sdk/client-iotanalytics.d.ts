// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-iotanalytics' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchPutMessageCommandInput, BatchPutMessageCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/BatchPutMessageCommand";
    import { CancelPipelineReprocessingCommandInput, CancelPipelineReprocessingCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CancelPipelineReprocessingCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateChannelCommand";
    import { CreateDatasetCommandInput, CreateDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatasetCommand";
    import { CreateDatasetContentCommandInput, CreateDatasetContentCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatasetContentCommand";
    import { CreateDatastoreCommandInput, CreateDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatastoreCommand";
    import { CreatePipelineCommandInput, CreatePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreatePipelineCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteChannelCommand";
    import { DeleteDatasetCommandInput, DeleteDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatasetCommand";
    import { DeleteDatasetContentCommandInput, DeleteDatasetContentCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatasetContentCommand";
    import { DeleteDatastoreCommandInput, DeleteDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatastoreCommand";
    import { DeletePipelineCommandInput, DeletePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeletePipelineCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeChannelCommand";
    import { DescribeDatasetCommandInput, DescribeDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeDatasetCommand";
    import { DescribeDatastoreCommandInput, DescribeDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeDatastoreCommand";
    import { DescribeLoggingOptionsCommandInput, DescribeLoggingOptionsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeLoggingOptionsCommand";
    import { DescribePipelineCommandInput, DescribePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribePipelineCommand";
    import { GetDatasetContentCommandInput, GetDatasetContentCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/GetDatasetContentCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListChannelsCommand";
    import { ListDatasetContentsCommandInput, ListDatasetContentsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatasetContentsCommand";
    import { ListDatasetsCommandInput, ListDatasetsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatasetsCommand";
    import { ListDatastoresCommandInput, ListDatastoresCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatastoresCommand";
    import { ListPipelinesCommandInput, ListPipelinesCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListPipelinesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListTagsForResourceCommand";
    import { PutLoggingOptionsCommandInput, PutLoggingOptionsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/PutLoggingOptionsCommand";
    import { RunPipelineActivityCommandInput, RunPipelineActivityCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/RunPipelineActivityCommand";
    import { SampleChannelDataCommandInput, SampleChannelDataCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/SampleChannelDataCommand";
    import { StartPipelineReprocessingCommandInput, StartPipelineReprocessingCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/StartPipelineReprocessingCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateChannelCommand";
    import { UpdateDatasetCommandInput, UpdateDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateDatasetCommand";
    import { UpdateDatastoreCommandInput, UpdateDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateDatastoreCommand";
    import { UpdatePipelineCommandInput, UpdatePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdatePipelineCommand";
    import { IoTAnalyticsClient } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    /**
        * <p>IoT Analytics allows you to collect large amounts of device data, process messages, and store them.
        *         You can then query the data and run sophisticated analytics on it.  IoT Analytics enables advanced
        *     data exploration through integration with Jupyter Notebooks and data visualization through integration
        *     with Amazon QuickSight.</p>
        *
        *          <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data
        *     often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result
        *     the data from these devices can have significant gaps, corrupted messages, and false readings that must be
        *     cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data
        *     from external sources. </p>
        *
        *          <p>IoT Analytics automates the steps required to analyze data from IoT devices. IoT Analytics
        *     filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You
        *     can set up the service to collect only the data you need from your devices, apply mathematical transforms
        *     to process the data, and enrich the data with device-specific metadata such as device type and location
        *     before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine,
        *     or perform more complex analytics and machine learning inference. IoT Analytics includes pre-built models
        *     for common IoT use cases so you can answer questions like which devices are about to fail or which customers
        *     are at risk of abandoning their wearable devices.</p>
        */
    export class IoTAnalytics extends IoTAnalyticsClient {
            /**
                * <p>Sends messages to a channel.</p>
                */
            batchPutMessage(args: BatchPutMessageCommandInput, options?: __HttpHandlerOptions): Promise<BatchPutMessageCommandOutput>;
            batchPutMessage(args: BatchPutMessageCommandInput, cb: (err: any, data?: BatchPutMessageCommandOutput) => void): void;
            batchPutMessage(args: BatchPutMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchPutMessageCommandOutput) => void): void;
            /**
                * <p>Cancels the reprocessing of data through the pipeline.</p>
                */
            cancelPipelineReprocessing(args: CancelPipelineReprocessingCommandInput, options?: __HttpHandlerOptions): Promise<CancelPipelineReprocessingCommandOutput>;
            cancelPipelineReprocessing(args: CancelPipelineReprocessingCommandInput, cb: (err: any, data?: CancelPipelineReprocessingCommandOutput) => void): void;
            cancelPipelineReprocessing(args: CancelPipelineReprocessingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelPipelineReprocessingCommandOutput) => void): void;
            /**
                * <p>Used to create a channel. A channel collects data from an MQTT topic and archives the raw,
                *       unprocessed messages before publishing the data to a pipeline.</p>
                */
            createChannel(args: CreateChannelCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelCommandOutput>;
            createChannel(args: CreateChannelCommandInput, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            createChannel(args: CreateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            /**
                * <p>Used to create a dataset. A dataset stores data retrieved from a data store by applying a
                *         <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a
                *       containerized application). This operation creates the skeleton of a dataset. The dataset can
                *       be populated manually by calling <code>CreateDatasetContent</code> or automatically according
                *       to a trigger you specify.</p>
                */
            createDataset(args: CreateDatasetCommandInput, options?: __HttpHandlerOptions): Promise<CreateDatasetCommandOutput>;
            createDataset(args: CreateDatasetCommandInput, cb: (err: any, data?: CreateDatasetCommandOutput) => void): void;
            createDataset(args: CreateDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDatasetCommandOutput) => void): void;
            /**
                * <p>Creates the content of a dataset by applying a <code>queryAction</code> (a SQL query) or a
                *         <code>containerAction</code> (executing a containerized application).</p>
                */
            createDatasetContent(args: CreateDatasetContentCommandInput, options?: __HttpHandlerOptions): Promise<CreateDatasetContentCommandOutput>;
            createDatasetContent(args: CreateDatasetContentCommandInput, cb: (err: any, data?: CreateDatasetContentCommandOutput) => void): void;
            createDatasetContent(args: CreateDatasetContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDatasetContentCommandOutput) => void): void;
            /**
                * <p>Creates a data store, which is a repository for messages.</p>
                */
            createDatastore(args: CreateDatastoreCommandInput, options?: __HttpHandlerOptions): Promise<CreateDatastoreCommandOutput>;
            createDatastore(args: CreateDatastoreCommandInput, cb: (err: any, data?: CreateDatastoreCommandOutput) => void): void;
            createDatastore(args: CreateDatastoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDatastoreCommandOutput) => void): void;
            /**
                * <p>Creates a pipeline. A pipeline consumes messages from a channel and allows you to process
                *       the messages before storing them in a data store. You must specify both a <code>channel</code>
                *       and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in
                *       the <code>pipelineActivities</code> array.</p>
                */
            createPipeline(args: CreatePipelineCommandInput, options?: __HttpHandlerOptions): Promise<CreatePipelineCommandOutput>;
            createPipeline(args: CreatePipelineCommandInput, cb: (err: any, data?: CreatePipelineCommandOutput) => void): void;
            createPipeline(args: CreatePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePipelineCommandOutput) => void): void;
            /**
                * <p>Deletes the specified channel.</p>
                */
            deleteChannel(args: DeleteChannelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelCommandOutput>;
            deleteChannel(args: DeleteChannelCommandInput, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            deleteChannel(args: DeleteChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            /**
                * <p>Deletes the specified dataset.</p>
                *          <p>You do not have to delete the content of the dataset before you perform this
                *       operation.</p>
                */
            deleteDataset(args: DeleteDatasetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDatasetCommandOutput>;
            deleteDataset(args: DeleteDatasetCommandInput, cb: (err: any, data?: DeleteDatasetCommandOutput) => void): void;
            deleteDataset(args: DeleteDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDatasetCommandOutput) => void): void;
            /**
                * <p>Deletes the content of the specified dataset.</p>
                */
            deleteDatasetContent(args: DeleteDatasetContentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDatasetContentCommandOutput>;
            deleteDatasetContent(args: DeleteDatasetContentCommandInput, cb: (err: any, data?: DeleteDatasetContentCommandOutput) => void): void;
            deleteDatasetContent(args: DeleteDatasetContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDatasetContentCommandOutput) => void): void;
            /**
                * <p>Deletes the specified data store.</p>
                */
            deleteDatastore(args: DeleteDatastoreCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDatastoreCommandOutput>;
            deleteDatastore(args: DeleteDatastoreCommandInput, cb: (err: any, data?: DeleteDatastoreCommandOutput) => void): void;
            deleteDatastore(args: DeleteDatastoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDatastoreCommandOutput) => void): void;
            /**
                * <p>Deletes the specified pipeline.</p>
                */
            deletePipeline(args: DeletePipelineCommandInput, options?: __HttpHandlerOptions): Promise<DeletePipelineCommandOutput>;
            deletePipeline(args: DeletePipelineCommandInput, cb: (err: any, data?: DeletePipelineCommandOutput) => void): void;
            deletePipeline(args: DeletePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePipelineCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a channel.</p>
                */
            describeChannel(args: DescribeChannelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelCommandOutput>;
            describeChannel(args: DescribeChannelCommandInput, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            describeChannel(args: DescribeChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a dataset.</p>
                */
            describeDataset(args: DescribeDatasetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDatasetCommandOutput>;
            describeDataset(args: DescribeDatasetCommandInput, cb: (err: any, data?: DescribeDatasetCommandOutput) => void): void;
            describeDataset(args: DescribeDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDatasetCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a data store.</p>
                */
            describeDatastore(args: DescribeDatastoreCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDatastoreCommandOutput>;
            describeDatastore(args: DescribeDatastoreCommandInput, cb: (err: any, data?: DescribeDatastoreCommandOutput) => void): void;
            describeDatastore(args: DescribeDatastoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDatastoreCommandOutput) => void): void;
            /**
                * <p>Retrieves the current settings of the IoT Analytics logging options.</p>
                */
            describeLoggingOptions(args: DescribeLoggingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoggingOptionsCommandOutput>;
            describeLoggingOptions(args: DescribeLoggingOptionsCommandInput, cb: (err: any, data?: DescribeLoggingOptionsCommandOutput) => void): void;
            describeLoggingOptions(args: DescribeLoggingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoggingOptionsCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a pipeline.</p>
                */
            describePipeline(args: DescribePipelineCommandInput, options?: __HttpHandlerOptions): Promise<DescribePipelineCommandOutput>;
            describePipeline(args: DescribePipelineCommandInput, cb: (err: any, data?: DescribePipelineCommandOutput) => void): void;
            describePipeline(args: DescribePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePipelineCommandOutput) => void): void;
            /**
                * <p>Retrieves the contents of a dataset as presigned URIs.</p>
                */
            getDatasetContent(args: GetDatasetContentCommandInput, options?: __HttpHandlerOptions): Promise<GetDatasetContentCommandOutput>;
            getDatasetContent(args: GetDatasetContentCommandInput, cb: (err: any, data?: GetDatasetContentCommandOutput) => void): void;
            getDatasetContent(args: GetDatasetContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDatasetContentCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of channels.</p>
                */
            listChannels(args: ListChannelsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelsCommandOutput>;
            listChannels(args: ListChannelsCommandInput, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            listChannels(args: ListChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            /**
                * <p>Lists information about dataset contents that have been created.</p>
                */
            listDatasetContents(args: ListDatasetContentsCommandInput, options?: __HttpHandlerOptions): Promise<ListDatasetContentsCommandOutput>;
            listDatasetContents(args: ListDatasetContentsCommandInput, cb: (err: any, data?: ListDatasetContentsCommandOutput) => void): void;
            listDatasetContents(args: ListDatasetContentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatasetContentsCommandOutput) => void): void;
            /**
                * <p>Retrieves information about datasets.</p>
                */
            listDatasets(args: ListDatasetsCommandInput, options?: __HttpHandlerOptions): Promise<ListDatasetsCommandOutput>;
            listDatasets(args: ListDatasetsCommandInput, cb: (err: any, data?: ListDatasetsCommandOutput) => void): void;
            listDatasets(args: ListDatasetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatasetsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of data stores.</p>
                */
            listDatastores(args: ListDatastoresCommandInput, options?: __HttpHandlerOptions): Promise<ListDatastoresCommandOutput>;
            listDatastores(args: ListDatastoresCommandInput, cb: (err: any, data?: ListDatastoresCommandOutput) => void): void;
            listDatastores(args: ListDatastoresCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatastoresCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of pipelines.</p>
                */
            listPipelines(args: ListPipelinesCommandInput, options?: __HttpHandlerOptions): Promise<ListPipelinesCommandOutput>;
            listPipelines(args: ListPipelinesCommandInput, cb: (err: any, data?: ListPipelinesCommandOutput) => void): void;
            listPipelines(args: ListPipelinesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPipelinesCommandOutput) => void): void;
            /**
                * <p>Lists the tags (metadata) that you have assigned to the resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Sets or updates the IoT Analytics logging options.</p>
                *          <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one
                *       minute for the change to take effect. Also, if you change the policy attached to the role you
                *       specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it
                *       takes up to five minutes for that change to take effect. </p>
                */
            putLoggingOptions(args: PutLoggingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutLoggingOptionsCommandOutput>;
            putLoggingOptions(args: PutLoggingOptionsCommandInput, cb: (err: any, data?: PutLoggingOptionsCommandOutput) => void): void;
            putLoggingOptions(args: PutLoggingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutLoggingOptionsCommandOutput) => void): void;
            /**
                * <p>Simulates the results of running a pipeline activity on a message payload.</p>
                */
            runPipelineActivity(args: RunPipelineActivityCommandInput, options?: __HttpHandlerOptions): Promise<RunPipelineActivityCommandOutput>;
            runPipelineActivity(args: RunPipelineActivityCommandInput, cb: (err: any, data?: RunPipelineActivityCommandOutput) => void): void;
            runPipelineActivity(args: RunPipelineActivityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RunPipelineActivityCommandOutput) => void): void;
            /**
                * <p>Retrieves a sample of messages from the specified channel ingested during the specified
                *       timeframe. Up to 10 messages can be retrieved.</p>
                */
            sampleChannelData(args: SampleChannelDataCommandInput, options?: __HttpHandlerOptions): Promise<SampleChannelDataCommandOutput>;
            sampleChannelData(args: SampleChannelDataCommandInput, cb: (err: any, data?: SampleChannelDataCommandOutput) => void): void;
            sampleChannelData(args: SampleChannelDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SampleChannelDataCommandOutput) => void): void;
            /**
                * <p>Starts the reprocessing of raw message data through the pipeline.</p>
                */
            startPipelineReprocessing(args: StartPipelineReprocessingCommandInput, options?: __HttpHandlerOptions): Promise<StartPipelineReprocessingCommandOutput>;
            startPipelineReprocessing(args: StartPipelineReprocessingCommandInput, cb: (err: any, data?: StartPipelineReprocessingCommandOutput) => void): void;
            startPipelineReprocessing(args: StartPipelineReprocessingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartPipelineReprocessingCommandOutput) => void): void;
            /**
                * <p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used to
                *       manage a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the given tags (metadata) from the resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Used to update the settings of a channel.</p>
                */
            updateChannel(args: UpdateChannelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelCommandOutput>;
            updateChannel(args: UpdateChannelCommandInput, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            updateChannel(args: UpdateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            /**
                * <p>Updates the settings of a dataset.</p>
                */
            updateDataset(args: UpdateDatasetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDatasetCommandOutput>;
            updateDataset(args: UpdateDatasetCommandInput, cb: (err: any, data?: UpdateDatasetCommandOutput) => void): void;
            updateDataset(args: UpdateDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDatasetCommandOutput) => void): void;
            /**
                * <p>Used to update the settings of a data store.</p>
                */
            updateDatastore(args: UpdateDatastoreCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDatastoreCommandOutput>;
            updateDatastore(args: UpdateDatastoreCommandInput, cb: (err: any, data?: UpdateDatastoreCommandOutput) => void): void;
            updateDatastore(args: UpdateDatastoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDatastoreCommandOutput) => void): void;
            /**
                * <p>Updates the settings of a pipeline. You must specify both a <code>channel</code> and a
                *         <code>datastore</code> activity and, optionally, as many as 23 additional activities in the
                *         <code>pipelineActivities</code> array.</p>
                */
            updatePipeline(args: UpdatePipelineCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePipelineCommandOutput>;
            updatePipeline(args: UpdatePipelineCommandInput, cb: (err: any, data?: UpdatePipelineCommandOutput) => void): void;
            updatePipeline(args: UpdatePipelineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePipelineCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/BatchPutMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { BatchPutMessageRequest, BatchPutMessageResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface BatchPutMessageCommandInput extends BatchPutMessageRequest {
    }
    export interface BatchPutMessageCommandOutput extends BatchPutMessageResponse, __MetadataBearer {
    }
    /**
        * <p>Sends messages to a channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, BatchPutMessageCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, BatchPutMessageCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new BatchPutMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchPutMessageCommandInput} for command's `input` shape.
        * @see {@link BatchPutMessageCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class BatchPutMessageCommand extends $Command<BatchPutMessageCommandInput, BatchPutMessageCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: BatchPutMessageCommandInput;
            constructor(input: BatchPutMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchPutMessageCommandInput, BatchPutMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CancelPipelineReprocessingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { CancelPipelineReprocessingRequest, CancelPipelineReprocessingResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface CancelPipelineReprocessingCommandInput extends CancelPipelineReprocessingRequest {
    }
    export interface CancelPipelineReprocessingCommandOutput extends CancelPipelineReprocessingResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the reprocessing of data through the pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, CancelPipelineReprocessingCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, CancelPipelineReprocessingCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new CancelPipelineReprocessingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelPipelineReprocessingCommandInput} for command's `input` shape.
        * @see {@link CancelPipelineReprocessingCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class CancelPipelineReprocessingCommand extends $Command<CancelPipelineReprocessingCommandInput, CancelPipelineReprocessingCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: CancelPipelineReprocessingCommandInput;
            constructor(input: CancelPipelineReprocessingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelPipelineReprocessingCommandInput, CancelPipelineReprocessingCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { CreateChannelRequest, CreateChannelResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface CreateChannelCommandInput extends CreateChannelRequest {
    }
    export interface CreateChannelCommandOutput extends CreateChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Used to create a channel. A channel collects data from an MQTT topic and archives the raw,
        *       unprocessed messages before publishing the data to a pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, CreateChannelCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, CreateChannelCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new CreateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelCommandInput} for command's `input` shape.
        * @see {@link CreateChannelCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class CreateChannelCommand extends $Command<CreateChannelCommandInput, CreateChannelCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: CreateChannelCommandInput;
            constructor(input: CreateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelCommandInput, CreateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { CreateDatasetRequest, CreateDatasetResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface CreateDatasetCommandInput extends CreateDatasetRequest {
    }
    export interface CreateDatasetCommandOutput extends CreateDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Used to create a dataset. A dataset stores data retrieved from a data store by applying a
        *         <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a
        *       containerized application). This operation creates the skeleton of a dataset. The dataset can
        *       be populated manually by calling <code>CreateDatasetContent</code> or automatically according
        *       to a trigger you specify.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, CreateDatasetCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, CreateDatasetCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new CreateDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDatasetCommandInput} for command's `input` shape.
        * @see {@link CreateDatasetCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class CreateDatasetCommand extends $Command<CreateDatasetCommandInput, CreateDatasetCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: CreateDatasetCommandInput;
            constructor(input: CreateDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDatasetCommandInput, CreateDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatasetContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { CreateDatasetContentRequest, CreateDatasetContentResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface CreateDatasetContentCommandInput extends CreateDatasetContentRequest {
    }
    export interface CreateDatasetContentCommandOutput extends CreateDatasetContentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the content of a dataset by applying a <code>queryAction</code> (a SQL query) or a
        *         <code>containerAction</code> (executing a containerized application).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, CreateDatasetContentCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, CreateDatasetContentCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new CreateDatasetContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDatasetContentCommandInput} for command's `input` shape.
        * @see {@link CreateDatasetContentCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class CreateDatasetContentCommand extends $Command<CreateDatasetContentCommandInput, CreateDatasetContentCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: CreateDatasetContentCommandInput;
            constructor(input: CreateDatasetContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDatasetContentCommandInput, CreateDatasetContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatastoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { CreateDatastoreRequest, CreateDatastoreResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface CreateDatastoreCommandInput extends CreateDatastoreRequest {
    }
    export interface CreateDatastoreCommandOutput extends CreateDatastoreResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a data store, which is a repository for messages.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, CreateDatastoreCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, CreateDatastoreCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new CreateDatastoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDatastoreCommandInput} for command's `input` shape.
        * @see {@link CreateDatastoreCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class CreateDatastoreCommand extends $Command<CreateDatastoreCommandInput, CreateDatastoreCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: CreateDatastoreCommandInput;
            constructor(input: CreateDatastoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDatastoreCommandInput, CreateDatastoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreatePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { CreatePipelineRequest, CreatePipelineResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface CreatePipelineCommandInput extends CreatePipelineRequest {
    }
    export interface CreatePipelineCommandOutput extends CreatePipelineResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a pipeline. A pipeline consumes messages from a channel and allows you to process
        *       the messages before storing them in a data store. You must specify both a <code>channel</code>
        *       and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in
        *       the <code>pipelineActivities</code> array.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, CreatePipelineCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, CreatePipelineCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new CreatePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePipelineCommandInput} for command's `input` shape.
        * @see {@link CreatePipelineCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class CreatePipelineCommand extends $Command<CreatePipelineCommandInput, CreatePipelineCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: CreatePipelineCommandInput;
            constructor(input: CreatePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePipelineCommandInput, CreatePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DeleteChannelRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DeleteChannelCommandInput extends DeleteChannelRequest {
    }
    export interface DeleteChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DeleteChannelCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DeleteChannelCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DeleteChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DeleteChannelCommand extends $Command<DeleteChannelCommandInput, DeleteChannelCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DeleteChannelCommandInput;
            constructor(input: DeleteChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelCommandInput, DeleteChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DeleteDatasetRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DeleteDatasetCommandInput extends DeleteDatasetRequest {
    }
    export interface DeleteDatasetCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified dataset.</p>
        *          <p>You do not have to delete the content of the dataset before you perform this
        *       operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DeleteDatasetCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DeleteDatasetCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DeleteDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDatasetCommandInput} for command's `input` shape.
        * @see {@link DeleteDatasetCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DeleteDatasetCommand extends $Command<DeleteDatasetCommandInput, DeleteDatasetCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DeleteDatasetCommandInput;
            constructor(input: DeleteDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDatasetCommandInput, DeleteDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatasetContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DeleteDatasetContentRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DeleteDatasetContentCommandInput extends DeleteDatasetContentRequest {
    }
    export interface DeleteDatasetContentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the content of the specified dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DeleteDatasetContentCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DeleteDatasetContentCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DeleteDatasetContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDatasetContentCommandInput} for command's `input` shape.
        * @see {@link DeleteDatasetContentCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DeleteDatasetContentCommand extends $Command<DeleteDatasetContentCommandInput, DeleteDatasetContentCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DeleteDatasetContentCommandInput;
            constructor(input: DeleteDatasetContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDatasetContentCommandInput, DeleteDatasetContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatastoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DeleteDatastoreRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DeleteDatastoreCommandInput extends DeleteDatastoreRequest {
    }
    export interface DeleteDatastoreCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified data store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DeleteDatastoreCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DeleteDatastoreCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DeleteDatastoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDatastoreCommandInput} for command's `input` shape.
        * @see {@link DeleteDatastoreCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DeleteDatastoreCommand extends $Command<DeleteDatastoreCommandInput, DeleteDatastoreCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DeleteDatastoreCommandInput;
            constructor(input: DeleteDatastoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDatastoreCommandInput, DeleteDatastoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeletePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DeletePipelineRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DeletePipelineCommandInput extends DeletePipelineRequest {
    }
    export interface DeletePipelineCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DeletePipelineCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DeletePipelineCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DeletePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePipelineCommandInput} for command's `input` shape.
        * @see {@link DeletePipelineCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DeletePipelineCommand extends $Command<DeletePipelineCommandInput, DeletePipelineCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DeletePipelineCommandInput;
            constructor(input: DeletePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePipelineCommandInput, DeletePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DescribeChannelRequest, DescribeChannelResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DescribeChannelCommandInput extends DescribeChannelRequest {
    }
    export interface DescribeChannelCommandOutput extends DescribeChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DescribeChannelCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DescribeChannelCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DescribeChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DescribeChannelCommand extends $Command<DescribeChannelCommandInput, DescribeChannelCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DescribeChannelCommandInput;
            constructor(input: DescribeChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelCommandInput, DescribeChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DescribeDatasetRequest, DescribeDatasetResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DescribeDatasetCommandInput extends DescribeDatasetRequest {
    }
    export interface DescribeDatasetCommandOutput extends DescribeDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DescribeDatasetCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DescribeDatasetCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DescribeDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDatasetCommandInput} for command's `input` shape.
        * @see {@link DescribeDatasetCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DescribeDatasetCommand extends $Command<DescribeDatasetCommandInput, DescribeDatasetCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DescribeDatasetCommandInput;
            constructor(input: DescribeDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDatasetCommandInput, DescribeDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeDatastoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DescribeDatastoreRequest, DescribeDatastoreResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DescribeDatastoreCommandInput extends DescribeDatastoreRequest {
    }
    export interface DescribeDatastoreCommandOutput extends DescribeDatastoreResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a data store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DescribeDatastoreCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DescribeDatastoreCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DescribeDatastoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDatastoreCommandInput} for command's `input` shape.
        * @see {@link DescribeDatastoreCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DescribeDatastoreCommand extends $Command<DescribeDatastoreCommandInput, DescribeDatastoreCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DescribeDatastoreCommandInput;
            constructor(input: DescribeDatastoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDatastoreCommandInput, DescribeDatastoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeLoggingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DescribeLoggingOptionsRequest, DescribeLoggingOptionsResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DescribeLoggingOptionsCommandInput extends DescribeLoggingOptionsRequest {
    }
    export interface DescribeLoggingOptionsCommandOutput extends DescribeLoggingOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the current settings of the IoT Analytics logging options.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DescribeLoggingOptionsCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DescribeLoggingOptionsCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DescribeLoggingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoggingOptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeLoggingOptionsCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DescribeLoggingOptionsCommand extends $Command<DescribeLoggingOptionsCommandInput, DescribeLoggingOptionsCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DescribeLoggingOptionsCommandInput;
            constructor(input: DescribeLoggingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoggingOptionsCommandInput, DescribeLoggingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { DescribePipelineRequest, DescribePipelineResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface DescribePipelineCommandInput extends DescribePipelineRequest {
    }
    export interface DescribePipelineCommandOutput extends DescribePipelineResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, DescribePipelineCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, DescribePipelineCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new DescribePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePipelineCommandInput} for command's `input` shape.
        * @see {@link DescribePipelineCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class DescribePipelineCommand extends $Command<DescribePipelineCommandInput, DescribePipelineCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: DescribePipelineCommandInput;
            constructor(input: DescribePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePipelineCommandInput, DescribePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/GetDatasetContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { GetDatasetContentRequest, GetDatasetContentResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface GetDatasetContentCommandInput extends GetDatasetContentRequest {
    }
    export interface GetDatasetContentCommandOutput extends GetDatasetContentResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the contents of a dataset as presigned URIs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, GetDatasetContentCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, GetDatasetContentCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new GetDatasetContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDatasetContentCommandInput} for command's `input` shape.
        * @see {@link GetDatasetContentCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class GetDatasetContentCommand extends $Command<GetDatasetContentCommandInput, GetDatasetContentCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: GetDatasetContentCommandInput;
            constructor(input: GetDatasetContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDatasetContentCommandInput, GetDatasetContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { ListChannelsRequest, ListChannelsResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface ListChannelsCommandInput extends ListChannelsRequest {
    }
    export interface ListChannelsCommandOutput extends ListChannelsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of channels.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, ListChannelsCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, ListChannelsCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new ListChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelsCommandInput} for command's `input` shape.
        * @see {@link ListChannelsCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class ListChannelsCommand extends $Command<ListChannelsCommandInput, ListChannelsCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: ListChannelsCommandInput;
            constructor(input: ListChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelsCommandInput, ListChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatasetContentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { ListDatasetContentsRequest, ListDatasetContentsResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface ListDatasetContentsCommandInput extends ListDatasetContentsRequest {
    }
    export interface ListDatasetContentsCommandOutput extends ListDatasetContentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about dataset contents that have been created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, ListDatasetContentsCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, ListDatasetContentsCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new ListDatasetContentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatasetContentsCommandInput} for command's `input` shape.
        * @see {@link ListDatasetContentsCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class ListDatasetContentsCommand extends $Command<ListDatasetContentsCommandInput, ListDatasetContentsCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: ListDatasetContentsCommandInput;
            constructor(input: ListDatasetContentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatasetContentsCommandInput, ListDatasetContentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatasetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { ListDatasetsRequest, ListDatasetsResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface ListDatasetsCommandInput extends ListDatasetsRequest {
    }
    export interface ListDatasetsCommandOutput extends ListDatasetsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about datasets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, ListDatasetsCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, ListDatasetsCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new ListDatasetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatasetsCommandInput} for command's `input` shape.
        * @see {@link ListDatasetsCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class ListDatasetsCommand extends $Command<ListDatasetsCommandInput, ListDatasetsCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: ListDatasetsCommandInput;
            constructor(input: ListDatasetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatasetsCommandInput, ListDatasetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatastoresCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { ListDatastoresRequest, ListDatastoresResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface ListDatastoresCommandInput extends ListDatastoresRequest {
    }
    export interface ListDatastoresCommandOutput extends ListDatastoresResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of data stores.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, ListDatastoresCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, ListDatastoresCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new ListDatastoresCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatastoresCommandInput} for command's `input` shape.
        * @see {@link ListDatastoresCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class ListDatastoresCommand extends $Command<ListDatastoresCommandInput, ListDatastoresCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: ListDatastoresCommandInput;
            constructor(input: ListDatastoresCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatastoresCommandInput, ListDatastoresCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListPipelinesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { ListPipelinesRequest, ListPipelinesResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface ListPipelinesCommandInput extends ListPipelinesRequest {
    }
    export interface ListPipelinesCommandOutput extends ListPipelinesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of pipelines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, ListPipelinesCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, ListPipelinesCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new ListPipelinesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPipelinesCommandInput} for command's `input` shape.
        * @see {@link ListPipelinesCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class ListPipelinesCommand extends $Command<ListPipelinesCommandInput, ListPipelinesCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: ListPipelinesCommandInput;
            constructor(input: ListPipelinesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPipelinesCommandInput, ListPipelinesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags (metadata) that you have assigned to the resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, ListTagsForResourceCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, ListTagsForResourceCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/PutLoggingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { PutLoggingOptionsRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface PutLoggingOptionsCommandInput extends PutLoggingOptionsRequest {
    }
    export interface PutLoggingOptionsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets or updates the IoT Analytics logging options.</p>
        *          <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one
        *       minute for the change to take effect. Also, if you change the policy attached to the role you
        *       specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it
        *       takes up to five minutes for that change to take effect. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, PutLoggingOptionsCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, PutLoggingOptionsCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new PutLoggingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutLoggingOptionsCommandInput} for command's `input` shape.
        * @see {@link PutLoggingOptionsCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class PutLoggingOptionsCommand extends $Command<PutLoggingOptionsCommandInput, PutLoggingOptionsCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: PutLoggingOptionsCommandInput;
            constructor(input: PutLoggingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutLoggingOptionsCommandInput, PutLoggingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/RunPipelineActivityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { RunPipelineActivityRequest, RunPipelineActivityResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface RunPipelineActivityCommandInput extends RunPipelineActivityRequest {
    }
    export interface RunPipelineActivityCommandOutput extends RunPipelineActivityResponse, __MetadataBearer {
    }
    /**
        * <p>Simulates the results of running a pipeline activity on a message payload.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, RunPipelineActivityCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, RunPipelineActivityCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new RunPipelineActivityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RunPipelineActivityCommandInput} for command's `input` shape.
        * @see {@link RunPipelineActivityCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class RunPipelineActivityCommand extends $Command<RunPipelineActivityCommandInput, RunPipelineActivityCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: RunPipelineActivityCommandInput;
            constructor(input: RunPipelineActivityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RunPipelineActivityCommandInput, RunPipelineActivityCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/SampleChannelDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { SampleChannelDataRequest, SampleChannelDataResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface SampleChannelDataCommandInput extends SampleChannelDataRequest {
    }
    export interface SampleChannelDataCommandOutput extends SampleChannelDataResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a sample of messages from the specified channel ingested during the specified
        *       timeframe. Up to 10 messages can be retrieved.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, SampleChannelDataCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, SampleChannelDataCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new SampleChannelDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SampleChannelDataCommandInput} for command's `input` shape.
        * @see {@link SampleChannelDataCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class SampleChannelDataCommand extends $Command<SampleChannelDataCommandInput, SampleChannelDataCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: SampleChannelDataCommandInput;
            constructor(input: SampleChannelDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SampleChannelDataCommandInput, SampleChannelDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/StartPipelineReprocessingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { StartPipelineReprocessingRequest, StartPipelineReprocessingResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface StartPipelineReprocessingCommandInput extends StartPipelineReprocessingRequest {
    }
    export interface StartPipelineReprocessingCommandOutput extends StartPipelineReprocessingResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the reprocessing of raw message data through the pipeline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, StartPipelineReprocessingCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, StartPipelineReprocessingCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new StartPipelineReprocessingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartPipelineReprocessingCommandInput} for command's `input` shape.
        * @see {@link StartPipelineReprocessingCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class StartPipelineReprocessingCommand extends $Command<StartPipelineReprocessingCommandInput, StartPipelineReprocessingCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: StartPipelineReprocessingCommandInput;
            constructor(input: StartPipelineReprocessingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartPipelineReprocessingCommandInput, StartPipelineReprocessingCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used to
        *       manage a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, TagResourceCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, TagResourceCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the given tags (metadata) from the resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, UntagResourceCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, UntagResourceCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { UpdateChannelRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface UpdateChannelCommandInput extends UpdateChannelRequest {
    }
    export interface UpdateChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Used to update the settings of a channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, UpdateChannelCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, UpdateChannelCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new UpdateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class UpdateChannelCommand extends $Command<UpdateChannelCommandInput, UpdateChannelCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: UpdateChannelCommandInput;
            constructor(input: UpdateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelCommandInput, UpdateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { UpdateDatasetRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface UpdateDatasetCommandInput extends UpdateDatasetRequest {
    }
    export interface UpdateDatasetCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the settings of a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, UpdateDatasetCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, UpdateDatasetCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new UpdateDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDatasetCommandInput} for command's `input` shape.
        * @see {@link UpdateDatasetCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class UpdateDatasetCommand extends $Command<UpdateDatasetCommandInput, UpdateDatasetCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: UpdateDatasetCommandInput;
            constructor(input: UpdateDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDatasetCommandInput, UpdateDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateDatastoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { UpdateDatastoreRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface UpdateDatastoreCommandInput extends UpdateDatastoreRequest {
    }
    export interface UpdateDatastoreCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Used to update the settings of a data store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, UpdateDatastoreCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, UpdateDatastoreCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new UpdateDatastoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDatastoreCommandInput} for command's `input` shape.
        * @see {@link UpdateDatastoreCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class UpdateDatastoreCommand extends $Command<UpdateDatastoreCommandInput, UpdateDatastoreCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: UpdateDatastoreCommandInput;
            constructor(input: UpdateDatastoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDatastoreCommandInput, UpdateDatastoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdatePipelineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTAnalyticsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient";
    import { UpdatePipelineRequest } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0";
    export interface UpdatePipelineCommandInput extends UpdatePipelineRequest {
    }
    export interface UpdatePipelineCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the settings of a pipeline. You must specify both a <code>channel</code> and a
        *         <code>datastore</code> activity and, optionally, as many as 23 additional activities in the
        *         <code>pipelineActivities</code> array.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTAnalyticsClient, UpdatePipelineCommand } from "@aws-sdk/client-iotanalytics"; // ES Modules import
        * // const { IoTAnalyticsClient, UpdatePipelineCommand } = require("@aws-sdk/client-iotanalytics"); // CommonJS import
        * const client = new IoTAnalyticsClient(config);
        * const command = new UpdatePipelineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePipelineCommandInput} for command's `input` shape.
        * @see {@link UpdatePipelineCommandOutput} for command's `response` shape.
        * @see {@link IoTAnalyticsClientResolvedConfig | config} for IoTAnalyticsClient's `config` shape.
        *
        */
    export class UpdatePipelineCommand extends $Command<UpdatePipelineCommandInput, UpdatePipelineCommandOutput, IoTAnalyticsClientResolvedConfig> {
            readonly input: UpdatePipelineCommandInput;
            constructor(input: UpdatePipelineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTAnalyticsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePipelineCommandInput, UpdatePipelineCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/IoTAnalyticsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchPutMessageCommandInput, BatchPutMessageCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/BatchPutMessageCommand";
    import { CancelPipelineReprocessingCommandInput, CancelPipelineReprocessingCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CancelPipelineReprocessingCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateChannelCommand";
    import { CreateDatasetCommandInput, CreateDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatasetCommand";
    import { CreateDatasetContentCommandInput, CreateDatasetContentCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatasetContentCommand";
    import { CreateDatastoreCommandInput, CreateDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreateDatastoreCommand";
    import { CreatePipelineCommandInput, CreatePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/CreatePipelineCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteChannelCommand";
    import { DeleteDatasetCommandInput, DeleteDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatasetCommand";
    import { DeleteDatasetContentCommandInput, DeleteDatasetContentCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatasetContentCommand";
    import { DeleteDatastoreCommandInput, DeleteDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeleteDatastoreCommand";
    import { DeletePipelineCommandInput, DeletePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DeletePipelineCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeChannelCommand";
    import { DescribeDatasetCommandInput, DescribeDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeDatasetCommand";
    import { DescribeDatastoreCommandInput, DescribeDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeDatastoreCommand";
    import { DescribeLoggingOptionsCommandInput, DescribeLoggingOptionsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribeLoggingOptionsCommand";
    import { DescribePipelineCommandInput, DescribePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/DescribePipelineCommand";
    import { GetDatasetContentCommandInput, GetDatasetContentCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/GetDatasetContentCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListChannelsCommand";
    import { ListDatasetContentsCommandInput, ListDatasetContentsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatasetContentsCommand";
    import { ListDatasetsCommandInput, ListDatasetsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatasetsCommand";
    import { ListDatastoresCommandInput, ListDatastoresCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListDatastoresCommand";
    import { ListPipelinesCommandInput, ListPipelinesCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListPipelinesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/ListTagsForResourceCommand";
    import { PutLoggingOptionsCommandInput, PutLoggingOptionsCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/PutLoggingOptionsCommand";
    import { RunPipelineActivityCommandInput, RunPipelineActivityCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/RunPipelineActivityCommand";
    import { SampleChannelDataCommandInput, SampleChannelDataCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/SampleChannelDataCommand";
    import { StartPipelineReprocessingCommandInput, StartPipelineReprocessingCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/StartPipelineReprocessingCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateChannelCommand";
    import { UpdateDatasetCommandInput, UpdateDatasetCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateDatasetCommand";
    import { UpdateDatastoreCommandInput, UpdateDatastoreCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdateDatastoreCommand";
    import { UpdatePipelineCommandInput, UpdatePipelineCommandOutput } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/commands/UpdatePipelineCommand";
    export type ServiceInputTypes = BatchPutMessageCommandInput | CancelPipelineReprocessingCommandInput | CreateChannelCommandInput | CreateDatasetCommandInput | CreateDatasetContentCommandInput | CreateDatastoreCommandInput | CreatePipelineCommandInput | DeleteChannelCommandInput | DeleteDatasetCommandInput | DeleteDatasetContentCommandInput | DeleteDatastoreCommandInput | DeletePipelineCommandInput | DescribeChannelCommandInput | DescribeDatasetCommandInput | DescribeDatastoreCommandInput | DescribeLoggingOptionsCommandInput | DescribePipelineCommandInput | GetDatasetContentCommandInput | ListChannelsCommandInput | ListDatasetContentsCommandInput | ListDatasetsCommandInput | ListDatastoresCommandInput | ListPipelinesCommandInput | ListTagsForResourceCommandInput | PutLoggingOptionsCommandInput | RunPipelineActivityCommandInput | SampleChannelDataCommandInput | StartPipelineReprocessingCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateChannelCommandInput | UpdateDatasetCommandInput | UpdateDatastoreCommandInput | UpdatePipelineCommandInput;
    export type ServiceOutputTypes = BatchPutMessageCommandOutput | CancelPipelineReprocessingCommandOutput | CreateChannelCommandOutput | CreateDatasetCommandOutput | CreateDatasetContentCommandOutput | CreateDatastoreCommandOutput | CreatePipelineCommandOutput | DeleteChannelCommandOutput | DeleteDatasetCommandOutput | DeleteDatasetContentCommandOutput | DeleteDatastoreCommandOutput | DeletePipelineCommandOutput | DescribeChannelCommandOutput | DescribeDatasetCommandOutput | DescribeDatastoreCommandOutput | DescribeLoggingOptionsCommandOutput | DescribePipelineCommandOutput | GetDatasetContentCommandOutput | ListChannelsCommandOutput | ListDatasetContentsCommandOutput | ListDatasetsCommandOutput | ListDatastoresCommandOutput | ListPipelinesCommandOutput | ListTagsForResourceCommandOutput | PutLoggingOptionsCommandOutput | RunPipelineActivityCommandOutput | SampleChannelDataCommandOutput | StartPipelineReprocessingCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateChannelCommandOutput | UpdateDatasetCommandOutput | UpdateDatastoreCommandOutput | UpdatePipelineCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type IoTAnalyticsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of IoTAnalyticsClient class constructor that set the region, credentials and other options.
        */
    export interface IoTAnalyticsClientConfig extends IoTAnalyticsClientConfigType {
    }
    type IoTAnalyticsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of IoTAnalyticsClient class. This is resolved and normalized from the {@link IoTAnalyticsClientConfig | constructor configuration interface}.
        */
    export interface IoTAnalyticsClientResolvedConfig extends IoTAnalyticsClientResolvedConfigType {
    }
    /**
        * <p>IoT Analytics allows you to collect large amounts of device data, process messages, and store them.
        *         You can then query the data and run sophisticated analytics on it.  IoT Analytics enables advanced
        *     data exploration through integration with Jupyter Notebooks and data visualization through integration
        *     with Amazon QuickSight.</p>
        *
        *          <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data
        *     often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result
        *     the data from these devices can have significant gaps, corrupted messages, and false readings that must be
        *     cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data
        *     from external sources. </p>
        *
        *          <p>IoT Analytics automates the steps required to analyze data from IoT devices. IoT Analytics
        *     filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You
        *     can set up the service to collect only the data you need from your devices, apply mathematical transforms
        *     to process the data, and enrich the data with device-specific metadata such as device type and location
        *     before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine,
        *     or perform more complex analytics and machine learning inference. IoT Analytics includes pre-built models
        *     for common IoT use cases so you can answer questions like which devices are about to fail or which customers
        *     are at risk of abandoning their wearable devices.</p>
        */
    export class IoTAnalyticsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, IoTAnalyticsClientResolvedConfig> {
            /**
                * The resolved configuration of IoTAnalyticsClient class. This is resolved and normalized from the {@link IoTAnalyticsClientConfig | constructor configuration interface}.
                */
            readonly config: IoTAnalyticsClientResolvedConfig;
            constructor(configuration: IoTAnalyticsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { IoTAnalyticsServiceException as __BaseException } from "@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/IoTAnalyticsServiceException";
    /**
        * <p>An activity that adds other attributes based on existing attributes in the message.</p>
        */
    export interface AddAttributesActivity {
            /**
                * <p>The name of the addAttributes activity.</p>
                */
            name: string | undefined;
            /**
                * <p>A list of 1-50 <code>AttributeNameMapping</code> objects that map an existing attribute to
                *       a new attribute.</p>
                *          <note>
                *             <p>The existing attributes remain in the message, so if you want to remove the originals,
                *         use <code>RemoveAttributeActivity</code>.</p>
                *          </note>
                */
            attributes: Record<string, string> | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace AddAttributesActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddAttributesActivity) => any;
    }
    /**
        * <p>Information about a message.</p>
        */
    export interface Message {
            /**
                * <p>The ID you want to assign to the message. Each <code>messageId</code> must be unique
                *          within each batch sent.</p>
                */
            messageId: string | undefined;
            /**
                * <p>The payload of the message. This can be a JSON string or a base64-encoded string
                *          representing binary data, in which case you must decode it by means of a pipeline
                *          activity.</p>
                */
            payload: Uint8Array | undefined;
    }
    export namespace Message {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Message) => any;
    }
    export interface BatchPutMessageRequest {
            /**
                * <p>The name of the channel where the messages are sent.</p>
                */
            channelName: string | undefined;
            /**
                * <p>The list of messages to be sent. Each message has the format: { "messageId": "string",
                *          "payload": "string"}.</p>
                *          <p>The field names of message payloads (data) that you send to IoT Analytics:</p>
                *         <ul>
                *             <li>
                *                <p>Must contain only alphanumeric characters and undescores (_). No other special characters are
                *                allowed.</p>
                *             </li>
                *             <li>
                *                <p>Must begin with an alphabetic character or single underscore (_).</p>
                *             </li>
                *             <li>
                *                <p>Cannot contain hyphens (-).</p>
                *             </li>
                *             <li>
                *                <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$".
                *             </p>
                *             </li>
                *             <li>
                *                <p>Cannot be more than 255 characters.</p>
                *             </li>
                *             <li>
                *                <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered
                *                duplicates.)</p>
                *             </li>
                *          </ul>
                *          <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29},
                *  {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads.  </p>
                */
            messages: Message[] | undefined;
    }
    export namespace BatchPutMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutMessageRequest) => any;
    }
    /**
        * <p>Contains informations about errors.</p>
        */
    export interface BatchPutMessageErrorEntry {
            /**
                * <p>The ID of the message that caused the error. See the value corresponding to the
                *             <code>messageId</code> key in the message object.</p>
                */
            messageId?: string;
            /**
                * <p>The code associated with the error.</p>
                */
            errorCode?: string;
            /**
                * <p>The message associated with the error.</p>
                */
            errorMessage?: string;
    }
    export namespace BatchPutMessageErrorEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutMessageErrorEntry) => any;
    }
    export interface BatchPutMessageResponse {
            /**
                * <p>A list of any errors encountered when sending the messages to the channel.</p>
                */
            batchPutMessageErrorEntries?: BatchPutMessageErrorEntry[];
    }
    export namespace BatchPutMessageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPutMessageResponse) => any;
    }
    /**
        * <p>There was an internal failure.</p>
        */
    export class InternalFailureException extends __BaseException {
            readonly name: "InternalFailureException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
    }
    /**
        * <p>The request was not valid.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>A resource with the specified name could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The service is temporarily unavailable.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p>The request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface CancelPipelineReprocessingRequest {
            /**
                * <p>The name of pipeline for which data reprocessing is canceled.</p>
                */
            pipelineName: string | undefined;
            /**
                * <p>The ID of the reprocessing task (returned by
                *       <code>StartPipelineReprocessing</code>).</p>
                */
            reprocessingId: string | undefined;
    }
    export namespace CancelPipelineReprocessingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelPipelineReprocessingRequest) => any;
    }
    export interface CancelPipelineReprocessingResponse {
    }
    export namespace CancelPipelineReprocessingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelPipelineReprocessingResponse) => any;
    }
    /**
        * <p>Used to store channel data in an S3 bucket that you manage. If customer-managed storage is
        *       selected, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice
        *       of S3 storage after the data store is created.</p>
        */
    export interface CustomerManagedChannelS3Storage {
            /**
                * <p>The name of the S3 bucket in which channel data is stored.</p>
                */
            bucket: string | undefined;
            /**
                * <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in
                *       an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket
                *       has exactly one key. The prefix must end with a forward slash (/).</p>
                */
            keyPrefix?: string;
            /**
                * <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3
                *       resources.</p>
                */
            roleArn: string | undefined;
    }
    export namespace CustomerManagedChannelS3Storage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomerManagedChannelS3Storage) => any;
    }
    /**
        * <p>Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice
        *       of S3 storage after the data store is created.</p>
        */
    export interface ServiceManagedChannelS3Storage {
    }
    export namespace ServiceManagedChannelS3Storage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceManagedChannelS3Storage) => any;
    }
    /**
        * <p>Where channel data is stored. You may choose one of <code>serviceManagedS3</code>,
        *         <code>customerManagedS3</code> storage. If not specified, the default is
        *         <code>serviceManagedS3</code>. This can't be changed after creation of the channel.</p>
        */
    export interface ChannelStorage {
            /**
                * <p>Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice
                *       of S3 storage after the data store is created.</p>
                */
            serviceManagedS3?: ServiceManagedChannelS3Storage;
            /**
                * <p>Used to store channel data in an S3 bucket that you manage. If customer managed storage is
                *       selected, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice
                *       of S3 storage after the data store is created.</p>
                */
            customerManagedS3?: CustomerManagedChannelS3Storage;
    }
    export namespace ChannelStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelStorage) => any;
    }
    /**
        * <p>How long, in days, message data is kept.</p>
        */
    export interface RetentionPeriod {
            /**
                * <p>If true, message data is kept indefinitely.</p>
                */
            unlimited?: boolean;
            /**
                * <p>The number of days that message data is kept. The <code>unlimited</code> parameter must be
                *       false.</p>
                */
            numberOfDays?: number;
    }
    export namespace RetentionPeriod {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetentionPeriod) => any;
    }
    /**
        * <p>A set of key-value pairs that are used to manage the resource.</p>
        */
    export interface Tag {
            /**
                * <p>The tag's key.</p>
                */
            key: string | undefined;
            /**
                * <p>The tag's value.</p>
                */
            value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateChannelRequest {
            /**
                * <p>The name of the channel.</p>
                */
            channelName: string | undefined;
            /**
                * <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or
                *         <code>customerManagedS3</code> storage. If not specified, the default is
                *         <code>serviceManagedS3</code>. You can't change this storage option after the channel is
                *       created.</p>
                */
            channelStorage?: ChannelStorage;
            /**
                * <p>How long, in days, message data is kept for the channel. When
                *         <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>Metadata which can be used to manage the channel.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelRequest) => any;
    }
    export interface CreateChannelResponse {
            /**
                * <p>The name of the channel.</p>
                */
            channelName?: string;
            /**
                * <p>The ARN of the channel.</p>
                */
            channelArn?: string;
            /**
                * <p>How long, in days, message data is kept for the channel.</p>
                */
            retentionPeriod?: RetentionPeriod;
    }
    export namespace CreateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelResponse) => any;
    }
    /**
        * <p>The command caused an internal limit to be exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>A resource with the same name already exists.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource.</p>
                */
            resourceId?: string;
            /**
                * <p>The ARN of the resource.</p>
                */
            resourceArn?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    export enum ComputeType {
            ACU_1 = "ACU_1",
            ACU_2 = "ACU_2"
    }
    /**
        * <p>The configuration of the resource used to execute the <code>containerAction</code>.</p>
        */
    export interface ResourceConfiguration {
            /**
                * <p>The type of the compute resource used to execute the <code>containerAction</code>.
                *       Possible values are: <code>ACU_1</code> (vCPU=4, memory=16 GiB) or <code>ACU_2</code> (vCPU=8,
                *       memory=32 GiB).</p>
                */
            computeType: ComputeType | string | undefined;
            /**
                * <p>The size, in GB, of the persistent storage available to the resource instance used to
                *       execute the <code>containerAction</code> (min: 1, max: 50).</p>
                */
            volumeSizeInGB: number | undefined;
    }
    export namespace ResourceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceConfiguration) => any;
    }
    /**
        * <p>The dataset whose latest contents are used as input to the notebook or application.</p>
        */
    export interface DatasetContentVersionValue {
            /**
                * <p>The name of the dataset whose latest contents are used as input to the notebook or
                *       application.</p>
                */
            datasetName: string | undefined;
    }
    export namespace DatasetContentVersionValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetContentVersionValue) => any;
    }
    /**
        * <p>The value of the variable as a structure that specifies an output file URI.</p>
        */
    export interface OutputFileUriValue {
            /**
                * <p>The URI of the location where dataset contents are stored, usually the URI of a file in an
                *       S3 bucket.</p>
                */
            fileName: string | undefined;
    }
    export namespace OutputFileUriValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputFileUriValue) => any;
    }
    /**
        * <p>An instance of a variable to be passed to the <code>containerAction</code> execution. Each
        *       variable must have a name and a value given by one of <code>stringValue</code>,
        *         <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>
        */
    export interface Variable {
            /**
                * <p>The name of the variable.</p>
                */
            name: string | undefined;
            /**
                * <p>The value of the variable as a string.</p>
                */
            stringValue?: string;
            /**
                * <p>The value of the variable as a double (numeric).</p>
                */
            doubleValue?: number;
            /**
                * <p>The value of the variable as a structure that specifies a dataset content version.</p>
                */
            datasetContentVersionValue?: DatasetContentVersionValue;
            /**
                * <p>The value of the variable as a structure that specifies an output file URI.</p>
                */
            outputFileUriValue?: OutputFileUriValue;
    }
    export namespace Variable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Variable) => any;
    }
    /**
        * <p>Information required to run the <code>containerAction</code> to produce dataset
        *       contents.</p>
        */
    export interface ContainerDatasetAction {
            /**
                * <p>The ARN of the Docker container stored in your account. The Docker container contains an
                *       application and required support libraries and is used to generate dataset contents.</p>
                */
            image: string | undefined;
            /**
                * <p>The ARN of the role that gives permission to the system to access required resources to
                *       run the <code>containerAction</code>. This includes, at minimum, permission to retrieve the
                *       dataset contents that are the input to the containerized application.</p>
                */
            executionRoleArn: string | undefined;
            /**
                * <p>Configuration of the resource that executes the <code>containerAction</code>.</p>
                */
            resourceConfiguration: ResourceConfiguration | undefined;
            /**
                * <p>The values of variables used in the context of the execution of the containerized
                *       application (basically, parameters passed to the application). Each variable must have a name
                *       and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>,
                *       or <code>outputFileUriValue</code>.</p>
                */
            variables?: Variable[];
    }
    export namespace ContainerDatasetAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerDatasetAction) => any;
    }
    /**
        * <p>Used to limit data to that which has arrived since the last execution of the
        *       action.</p>
        */
    export interface DeltaTime {
            /**
                * <p>The number of seconds of estimated in-flight lag time of message data. When you create
                *       dataset contents using message data from a specified timeframe, some message data might still
                *       be in flight when processing begins, and so do not arrive in time to be processed. Use this
                *       field to make allowances for the in flight time of your message data, so that data not
                *       processed from a previous timeframe is included with the next timeframe. Otherwise, missed
                *       message data would be excluded from processing during the next timeframe too, because its
                *       timestamp places it within the previous timeframe.</p>
                */
            offsetSeconds: number | undefined;
            /**
                * <p>An expression by which the time of the message data might be determined. This can be the
                *       name of a timestamp field or a SQL expression that is used to derive the time the message data
                *       was generated.</p>
                */
            timeExpression: string | undefined;
    }
    export namespace DeltaTime {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeltaTime) => any;
    }
    /**
        * <p>Information that is used to filter message data, to segregate it according to the
        *       timeframe in which it arrives.</p>
        */
    export interface QueryFilter {
            /**
                * <p>Used to limit data to that which has arrived since the last execution of the
                *       action.</p>
                */
            deltaTime?: DeltaTime;
    }
    export namespace QueryFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryFilter) => any;
    }
    /**
        * <p>The SQL query to modify the message.</p>
        */
    export interface SqlQueryDatasetAction {
            /**
                * <p>A SQL query string.</p>
                */
            sqlQuery: string | undefined;
            /**
                * <p>Prefilters applied to message data.</p>
                */
            filters?: QueryFilter[];
    }
    export namespace SqlQueryDatasetAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqlQueryDatasetAction) => any;
    }
    /**
        * <p>A <code>DatasetAction</code> object that specifies how dataset contents are automatically
        *       created.</p>
        */
    export interface DatasetAction {
            /**
                * <p>The name of the dataset action by which dataset contents are automatically created.</p>
                */
            actionName?: string;
            /**
                * <p>An <code>SqlQueryDatasetAction</code> object that uses an SQL query to automatically
                *       create dataset contents.</p>
                */
            queryAction?: SqlQueryDatasetAction;
            /**
                * <p>Information that allows the system to run a containerized application to create the
                *       dataset contents. The application must be in a Docker container along with any required
                *       support libraries.</p>
                */
            containerAction?: ContainerDatasetAction;
    }
    export namespace DatasetAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetAction) => any;
    }
    /**
        * <p>Configuration information for delivery of dataset contents to IoT Events.</p>
        */
    export interface IotEventsDestinationConfiguration {
            /**
                * <p>The name of the IoT Events input to which dataset contents are delivered.</p>
                */
            inputName: string | undefined;
            /**
                * <p>The ARN of the role that grants IoT Analytics permission to deliver dataset contents to an IoT Events
                *       input.</p>
                */
            roleArn: string | undefined;
    }
    export namespace IotEventsDestinationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IotEventsDestinationConfiguration) => any;
    }
    /**
        * <p>Configuration information for coordination with Glue, a fully managed extract, transform
        *       and load (ETL) service.</p>
        */
    export interface GlueConfiguration {
            /**
                * <p>The name of the table in your Glue Data Catalog that is used to perform the ETL
                *       operations. An Glue Data Catalog table contains partitioned data and descriptions of data
                *       sources and targets.</p>
                */
            tableName: string | undefined;
            /**
                * <p>The name of the database in your Glue Data Catalog in which the table is located. An
                *       Glue Data Catalog database contains metadata tables.</p>
                */
            databaseName: string | undefined;
    }
    export namespace GlueConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlueConfiguration) => any;
    }
    /**
        * <p>Configuration information for delivery of dataset contents to Amazon Simple Storage Service (Amazon S3).</p>
        */
    export interface S3DestinationConfiguration {
            /**
                * <p>The name of the S3 bucket to which dataset contents are delivered.</p>
                */
            bucket: string | undefined;
            /**
                * <p>The key of the dataset contents object in an S3 bucket. Each object has a key that is a
                *       unique identifier. Each object has exactly one key.</p>
                *          <p>You can create a unique key with the following options:</p>
                *          <ul>
                *             <li>
                *                <p>Use <code>!{iotanalytics:scheduleTime}</code> to insert the time of a scheduled SQL
                *           query run.</p>
                *             </li>
                *             <li>
                *                <p>Use <code>!{iotanalytics:versionId}</code> to insert a unique hash that identifies a
                *           dataset content.</p>
                *             </li>
                *             <li>
                *                <p>Use <code>!{iotanalytics:creationTime}</code> to insert the creation time of a dataset
                *           content.</p>
                *             </li>
                *          </ul>
                *          <p>The following example creates a unique key for a CSV file:
                *         <code>dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv</code>
                *          </p>
                *          <note>
                *             <p>If you don't use <code>!{iotanalytics:versionId}</code> to specify the key, you might
                *         get duplicate keys. For example, you might have two dataset contents with the same
                *           <code>scheduleTime</code> but different <code>versionId</code>s. This means that one
                *         dataset content overwrites the other. </p>
                *          </note>
                */
            key: string | undefined;
            /**
                * <p>Configuration information for coordination with Glue, a fully managed extract, transform
                *       and load (ETL) service.</p>
                */
            glueConfiguration?: GlueConfiguration;
            /**
                * <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 and Glue
                *       resources.</p>
                */
            roleArn: string | undefined;
    }
    export namespace S3DestinationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DestinationConfiguration) => any;
    }
    /**
        * <p>The destination to which dataset contents are delivered.</p>
        */
    export interface DatasetContentDeliveryDestination {
            /**
                * <p>Configuration information for delivery of dataset contents to IoT Events.</p>
                */
            iotEventsDestinationConfiguration?: IotEventsDestinationConfiguration;
            /**
                * <p>Configuration information for delivery of dataset contents to Amazon S3.</p>
                */
            s3DestinationConfiguration?: S3DestinationConfiguration;
    }
    export namespace DatasetContentDeliveryDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetContentDeliveryDestination) => any;
    }
    /**
        * <p>When dataset contents are created, they are delivered to destination specified
        *       here.</p>
        */
    export interface DatasetContentDeliveryRule {
            /**
                * <p>The name of the dataset content delivery rules entry.</p>
                */
            entryName?: string;
            /**
                * <p>The destination to which dataset contents are delivered.</p>
                */
            destination: DatasetContentDeliveryDestination | undefined;
    }
    export namespace DatasetContentDeliveryRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetContentDeliveryRule) => any;
    }
    /**
        * <p>A structure that contains the configuration information of a delta time session
        *       window.</p>
        *          <p>
        *             <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">
        *                <code>DeltaTime</code>
        *             </a> specifies a time interval. You can use
        *         <code>DeltaTime</code> to create dataset contents with data that has arrived in the data
        *       store since the last execution. For an example of <code>DeltaTime</code>, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6"> Creating
        *         a SQL dataset with a delta window (CLI)</a> in the
        *         <i>IoT Analytics User Guide</i>.</p>
        */
    export interface DeltaTimeSessionWindowConfiguration {
            /**
                * <p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late
                *       data notifications that have been generated since the last execution. IoT Analytics sends one batch of
                *       notifications to Amazon CloudWatch Events at one time.</p>
                *          <p>For more information about how to write a timestamp expression, see <a href="https://prestodb.io/docs/0.172/functions/datetime.html">Date and Time Functions and
                *         Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>
                */
            timeoutInMinutes: number | undefined;
    }
    export namespace DeltaTimeSessionWindowConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeltaTimeSessionWindowConfiguration) => any;
    }
    /**
        * <p>The information needed to configure a delta time session window.</p>
        */
    export interface LateDataRuleConfiguration {
            /**
                * <p>The information needed to configure a delta time session window.</p>
                */
            deltaTimeSessionWindowConfiguration?: DeltaTimeSessionWindowConfiguration;
    }
    export namespace LateDataRuleConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LateDataRuleConfiguration) => any;
    }
    /**
        * <p>A structure that contains the name and configuration information of a late data
        *       rule.</p>
        */
    export interface LateDataRule {
            /**
                * <p>The name of the late data rule.</p>
                */
            ruleName?: string;
            /**
                * <p>The information needed to configure the late data rule.</p>
                */
            ruleConfiguration: LateDataRuleConfiguration | undefined;
    }
    export namespace LateDataRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LateDataRule) => any;
    }
    /**
        * <p>Information about the dataset whose content generation triggers the new dataset content
        *       generation.</p>
        */
    export interface TriggeringDataset {
            /**
                * <p>The name of the dataset whose content generation triggers the new dataset content
                *       generation.</p>
                */
            name: string | undefined;
    }
    export namespace TriggeringDataset {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TriggeringDataset) => any;
    }
    /**
        * <p>The schedule for when to trigger an update.</p>
        */
    export interface Schedule {
            /**
                * <p>The expression that defines when to trigger an update. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">Schedule
                *         Expressions for Rules</a> in the <i>Amazon CloudWatch Events User
                *         Guide</i>.</p>
                */
            expression?: string;
    }
    export namespace Schedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Schedule) => any;
    }
    /**
        * <p>The <code>DatasetTrigger</code> that specifies when the dataset is automatically
        *       updated.</p>
        */
    export interface DatasetTrigger {
            /**
                * <p>The Schedule when the trigger is initiated.</p>
                */
            schedule?: Schedule;
            /**
                * <p>The dataset whose content creation triggers the creation of this dataset's
                *       contents.</p>
                */
            dataset?: TriggeringDataset;
    }
    export namespace DatasetTrigger {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetTrigger) => any;
    }
    /**
        * <p>Information about the versioning of dataset contents.</p>
        */
    export interface VersioningConfiguration {
            /**
                * <p>If true, unlimited versions of dataset contents are kept.</p>
                */
            unlimited?: boolean;
            /**
                * <p>How many versions of dataset contents are kept. The <code>unlimited</code> parameter must
                *       be <code>false</code>.</p>
                */
            maxVersions?: number;
    }
    export namespace VersioningConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VersioningConfiguration) => any;
    }
    export interface CreateDatasetRequest {
            /**
                * <p>The name of the dataset.</p>
                */
            datasetName: string | undefined;
            /**
                * <p>A list of actions that create the dataset contents.</p>
                */
            actions: DatasetAction[] | undefined;
            /**
                * <p>A list of triggers. A trigger causes dataset contents to be populated at a specified time
                *       interval or when another dataset's contents are created. The list of triggers can be empty or
                *       contain up to five <code>DataSetTrigger</code> objects.</p>
                */
            triggers?: DatasetTrigger[];
            /**
                * <p>When dataset contents are created, they are delivered to destinations specified
                *       here.</p>
                */
            contentDeliveryRules?: DatasetContentDeliveryRule[];
            /**
                * <p>Optional. How long, in days, versions of dataset contents are kept for the dataset. If not
                *       specified or set to <code>null</code>, versions of dataset contents are retained for at most
                *       90 days. The number of versions of dataset contents retained is determined by the
                *         <code>versioningConfiguration</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions">
                *         Keeping Multiple Versions of IoT Analytics datasets</a> in the
                *         <i>IoT Analytics User Guide</i>.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>Optional. How many versions of dataset contents are kept. If not specified or set to null,
                *       only the latest version plus the latest succeeded version (if they are different) are kept for
                *       the time period specified by the <code>retentionPeriod</code> parameter. For more information,
                *       see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions">Keeping Multiple Versions of IoT Analytics datasets</a> in the
                *         <i>IoT Analytics User Guide</i>.</p>
                */
            versioningConfiguration?: VersioningConfiguration;
            /**
                * <p>Metadata which can be used to manage the dataset.</p>
                */
            tags?: Tag[];
            /**
                * <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
                */
            lateDataRules?: LateDataRule[];
    }
    export namespace CreateDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetRequest) => any;
    }
    export interface CreateDatasetResponse {
            /**
                * <p>The name of the dataset.</p>
                */
            datasetName?: string;
            /**
                * <p>The ARN of the dataset.</p>
                */
            datasetArn?: string;
            /**
                * <p>How long, in days, dataset contents are kept for the dataset.</p>
                */
            retentionPeriod?: RetentionPeriod;
    }
    export namespace CreateDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetResponse) => any;
    }
    export interface CreateDatasetContentRequest {
            /**
                * <p>The name of the dataset.</p>
                */
            datasetName: string | undefined;
            /**
                * <p>The version ID of the dataset content. To specify <code>versionId</code> for a dataset
                *       content, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
                */
            versionId?: string;
    }
    export namespace CreateDatasetContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetContentRequest) => any;
    }
    export interface CreateDatasetContentResponse {
            /**
                * <p>The version ID of the dataset contents that are being created.</p>
                */
            versionId?: string;
    }
    export namespace CreateDatasetContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetContentResponse) => any;
    }
    /**
        * <p> A partition dimension defined by an attribute. </p>
        */
    export interface Partition {
            /**
                * <p> The name of the attribute that defines a partition dimension. </p>
                */
            attributeName: string | undefined;
    }
    export namespace Partition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Partition) => any;
    }
    /**
        * <p> A partition dimension defined by a timestamp attribute. </p>
        */
    export interface TimestampPartition {
            /**
                * <p> The attribute name of the partition defined by a timestamp. </p>
                */
            attributeName: string | undefined;
            /**
                * <p> The timestamp format of a partition defined by a timestamp. The default format is seconds
                *       since epoch (January 1, 1970 at midnight UTC time). </p>
                */
            timestampFormat?: string;
    }
    export namespace TimestampPartition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimestampPartition) => any;
    }
    /**
        * <p> A single dimension to partition a data store. The dimension must be an
        *         <code>AttributePartition</code> or a <code>TimestampPartition</code>. </p>
        */
    export interface DatastorePartition {
            /**
                * <p> A partition dimension defined by an <code>attributeName</code>. </p>
                */
            attributePartition?: Partition;
            /**
                * <p> A partition dimension defined by a timestamp attribute. </p>
                */
            timestampPartition?: TimestampPartition;
    }
    export namespace DatastorePartition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastorePartition) => any;
    }
    /**
        * <p> Contains information about the partition dimensions in a data store. </p>
        */
    export interface DatastorePartitions {
            /**
                * <p> A list of partition dimensions in a data store. </p>
                */
            partitions?: DatastorePartition[];
    }
    export namespace DatastorePartitions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastorePartitions) => any;
    }
    /**
        * <p>S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.  </p>
        */
    export interface CustomerManagedDatastoreS3Storage {
            /**
                * <p>The name of the Amazon S3 bucket where your data is stored.</p>
                */
            bucket: string | undefined;
            /**
                * <p>(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).</p>
                */
            keyPrefix?: string;
            /**
                * <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
                */
            roleArn: string | undefined;
    }
    export namespace CustomerManagedDatastoreS3Storage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomerManagedDatastoreS3Storage) => any;
    }
    /**
        * <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.   </p>
        */
    export interface IotSiteWiseCustomerManagedDatastoreS3Storage {
            /**
                * <p> The name of the Amazon S3 bucket where your data is stored. </p>
                */
            bucket: string | undefined;
            /**
                * <p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>
                */
            keyPrefix?: string;
    }
    export namespace IotSiteWiseCustomerManagedDatastoreS3Storage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IotSiteWiseCustomerManagedDatastoreS3Storage) => any;
    }
    /**
        * <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.   </p>
        */
    export interface DatastoreIotSiteWiseMultiLayerStorage {
            /**
                * <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
                */
            customerManagedS3Storage: IotSiteWiseCustomerManagedDatastoreS3Storage | undefined;
    }
    export namespace DatastoreIotSiteWiseMultiLayerStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreIotSiteWiseMultiLayerStorage) => any;
    }
    /**
        * <p>Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.  </p>
        */
    export interface ServiceManagedDatastoreS3Storage {
    }
    export namespace ServiceManagedDatastoreS3Storage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceManagedDatastoreS3Storage) => any;
    }
    /**
        * <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
        */
    export type DatastoreStorage = DatastoreStorage.CustomerManagedS3Member | DatastoreStorage.IotSiteWiseMultiLayerStorageMember | DatastoreStorage.ServiceManagedS3Member | DatastoreStorage.$UnknownMember;
    export namespace DatastoreStorage {
            /**
                * <p>Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.  </p>
                */
            interface ServiceManagedS3Member {
                    serviceManagedS3: ServiceManagedDatastoreS3Storage;
                    customerManagedS3?: never;
                    iotSiteWiseMultiLayerStorage?: never;
                    $unknown?: never;
            }
            /**
                * <p>S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.  </p>
                */
            interface CustomerManagedS3Member {
                    serviceManagedS3?: never;
                    customerManagedS3: CustomerManagedDatastoreS3Storage;
                    iotSiteWiseMultiLayerStorage?: never;
                    $unknown?: never;
            }
            /**
                * <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.   </p>
                */
            interface IotSiteWiseMultiLayerStorageMember {
                    serviceManagedS3?: never;
                    customerManagedS3?: never;
                    iotSiteWiseMultiLayerStorage: DatastoreIotSiteWiseMultiLayerStorage;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    serviceManagedS3?: never;
                    customerManagedS3?: never;
                    iotSiteWiseMultiLayerStorage?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    serviceManagedS3: (value: ServiceManagedDatastoreS3Storage) => T;
                    customerManagedS3: (value: CustomerManagedDatastoreS3Storage) => T;
                    iotSiteWiseMultiLayerStorage: (value: DatastoreIotSiteWiseMultiLayerStorage) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: DatastoreStorage, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreStorage) => any;
    }
    /**
        * <p>Contains the configuration information of the JSON format.</p>
        */
    export interface JsonConfiguration {
    }
    export namespace JsonConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonConfiguration) => any;
    }
    /**
        * <p>Contains information about a column that stores your data.</p>
        */
    export interface Column {
            /**
                * <p>The name of the column.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of data. For more information about the supported data types, see <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html">Common data types</a>
                *       in the <i>Glue Developer Guide</i>.</p>
                */
            type: string | undefined;
    }
    export namespace Column {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Column) => any;
    }
    /**
        * <p>Information needed to define a schema.</p>
        */
    export interface SchemaDefinition {
            /**
                * <p>Specifies one or more columns that store your data.</p>
                *          <p>Each schema can have up to 100 columns. Each column can have up to 100 nested
                *       types.</p>
                */
            columns?: Column[];
    }
    export namespace SchemaDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaDefinition) => any;
    }
    /**
        * <p>Contains the configuration information of the Parquet format.</p>
        */
    export interface ParquetConfiguration {
            /**
                * <p>Information needed to define a schema.</p>
                */
            schemaDefinition?: SchemaDefinition;
    }
    export namespace ParquetConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParquetConfiguration) => any;
    }
    /**
        * <p>Contains the configuration information of file formats.  IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
        *          <p>The default file format is JSON. You can specify only one format.</p>
        *          <p>You can't change the file format after you create the data store.</p>
        */
    export interface FileFormatConfiguration {
            /**
                * <p>Contains the configuration information of the JSON format.</p>
                */
            jsonConfiguration?: JsonConfiguration;
            /**
                * <p>Contains the configuration information of the Parquet format.</p>
                */
            parquetConfiguration?: ParquetConfiguration;
    }
    export namespace FileFormatConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileFormatConfiguration) => any;
    }
    export interface CreateDatastoreRequest {
            /**
                * <p>The name of the data store.</p>
                */
            datastoreName: string | undefined;
            /**
                * <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
                */
            datastoreStorage?: DatastoreStorage;
            /**
                * <p>How long, in days, message data is kept for the data store. When
                *         <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>Metadata which can be used to manage the data store.</p>
                */
            tags?: Tag[];
            /**
                * <p>Contains the configuration information of file formats.  IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
                *          <p>The default file format is JSON. You can specify only one format.</p>
                *          <p>You can't change the file format after you create the data store.</p>
                */
            fileFormatConfiguration?: FileFormatConfiguration;
            /**
                * <p> Contains information about the partition dimensions in a data store. </p>
                */
            datastorePartitions?: DatastorePartitions;
    }
    export namespace CreateDatastoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatastoreRequest) => any;
    }
    export interface CreateDatastoreResponse {
            /**
                * <p>The name of the data store.</p>
                */
            datastoreName?: string;
            /**
                * <p>The ARN of the data store.</p>
                */
            datastoreArn?: string;
            /**
                * <p>How long, in days, message data is kept for the data store.</p>
                */
            retentionPeriod?: RetentionPeriod;
    }
    export namespace CreateDatastoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatastoreResponse) => any;
    }
    /**
        * <p>The activity that determines the source of the messages to be processed.</p>
        */
    export interface ChannelActivity {
            /**
                * <p>The name of the channel activity.</p>
                */
            name: string | undefined;
            /**
                * <p>The name of the channel from which the messages are processed.</p>
                */
            channelName: string | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace ChannelActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelActivity) => any;
    }
    /**
        * <p>The datastore activity that specifies where to store the processed data.</p>
        */
    export interface DatastoreActivity {
            /**
                * <p>The name of the datastore activity.</p>
                */
            name: string | undefined;
            /**
                * <p>The name of the data store where processed messages are stored.</p>
                */
            datastoreName: string | undefined;
    }
    export namespace DatastoreActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreActivity) => any;
    }
    /**
        * <p>An activity that adds data from the IoT device registry to your message.</p>
        */
    export interface DeviceRegistryEnrichActivity {
            /**
                * <p>The name of the <code>deviceRegistryEnrich</code> activity.</p>
                */
            name: string | undefined;
            /**
                * <p>The name of the attribute that is added to the message.</p>
                */
            attribute: string | undefined;
            /**
                * <p>The name of the IoT device whose registry information is added to the message.</p>
                */
            thingName: string | undefined;
            /**
                * <p>The ARN of the role that allows access to the device's registry information.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace DeviceRegistryEnrichActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceRegistryEnrichActivity) => any;
    }
    /**
        * <p>An activity that adds information from the IoT Device Shadow service to a
        *       message.</p>
        */
    export interface DeviceShadowEnrichActivity {
            /**
                * <p>The name of the <code>deviceShadowEnrich</code> activity.</p>
                */
            name: string | undefined;
            /**
                * <p>The name of the attribute that is added to the message.</p>
                */
            attribute: string | undefined;
            /**
                * <p>The name of the IoT device whose shadow information is added to the message.</p>
                */
            thingName: string | undefined;
            /**
                * <p>The ARN of the role that allows access to the device's shadow.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace DeviceShadowEnrichActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceShadowEnrichActivity) => any;
    }
    /**
        * <p>An activity that filters a message based on its attributes.</p>
        */
    export interface FilterActivity {
            /**
                * <p>The name of the filter activity.</p>
                */
            name: string | undefined;
            /**
                * <p>An expression that looks like a SQL WHERE clause that must return a Boolean value.
                *       Messages that satisfy the condition are passed to the next activity. </p>
                */
            filter: string | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace FilterActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterActivity) => any;
    }
    /**
        * <p>An activity that runs a Lambda function to modify the message.</p>
        */
    export interface LambdaActivity {
            /**
                * <p>The name of the lambda activity.</p>
                */
            name: string | undefined;
            /**
                * <p>The name of the Lambda function that is run on the message.</p>
                */
            lambdaName: string | undefined;
            /**
                * <p>The number of messages passed to the Lambda function for processing.</p>
                *          <p>The Lambda function must be able to process all of these messages within five minutes,
                *       which is the maximum timeout duration for Lambda functions.</p>
                */
            batchSize: number | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace LambdaActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaActivity) => any;
    }
    /**
        * <p>An activity that computes an arithmetic expression using the message's attributes.</p>
        */
    export interface MathActivity {
            /**
                * <p>The name of the math activity.</p>
                */
            name: string | undefined;
            /**
                * <p>The name of the attribute that contains the result of the math operation.</p>
                */
            attribute: string | undefined;
            /**
                * <p>An expression that uses one or more existing attributes and must return an integer
                *       value.</p>
                */
            math: string | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace MathActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MathActivity) => any;
    }
    /**
        * <p>An activity that removes attributes from a message.</p>
        */
    export interface RemoveAttributesActivity {
            /**
                * <p>The name of the <code>removeAttributes</code> activity.</p>
                */
            name: string | undefined;
            /**
                * <p>A list of 1-50 attributes to remove from the message.</p>
                */
            attributes: string[] | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace RemoveAttributesActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveAttributesActivity) => any;
    }
    /**
        * <p>Used to create a new message using only the specified attributes from the original
        *       message.</p>
        */
    export interface SelectAttributesActivity {
            /**
                * <p>The name of the <code>selectAttributes</code> activity.</p>
                */
            name: string | undefined;
            /**
                * <p>A list of the attributes to select from the message.</p>
                */
            attributes: string[] | undefined;
            /**
                * <p>The next activity in the pipeline.</p>
                */
            next?: string;
    }
    export namespace SelectAttributesActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectAttributesActivity) => any;
    }
    /**
        * <p>An activity that performs a transformation on a message.</p>
        */
    export interface PipelineActivity {
            /**
                * <p>Determines the source of the messages to be processed.</p>
                */
            channel?: ChannelActivity;
            /**
                * <p>Runs a Lambda function to modify the message.</p>
                */
            lambda?: LambdaActivity;
            /**
                * <p>Specifies where to store the processed message data.</p>
                */
            datastore?: DatastoreActivity;
            /**
                * <p>Adds other attributes based on existing attributes in the message.</p>
                */
            addAttributes?: AddAttributesActivity;
            /**
                * <p>Removes attributes from a message.</p>
                */
            removeAttributes?: RemoveAttributesActivity;
            /**
                * <p>Used to create a new message using only the specified attributes from the original
                *       message. </p>
                */
            selectAttributes?: SelectAttributesActivity;
            /**
                * <p>Filters a message based on its attributes.</p>
                */
            filter?: FilterActivity;
            /**
                * <p>Computes an arithmetic expression using the message's attributes and adds it to the
                *       message.</p>
                */
            math?: MathActivity;
            /**
                * <p>Adds data from the IoT device registry to your message.</p>
                */
            deviceRegistryEnrich?: DeviceRegistryEnrichActivity;
            /**
                * <p>Adds information from the IoT Device Shadow service to a message.</p>
                */
            deviceShadowEnrich?: DeviceShadowEnrichActivity;
    }
    export namespace PipelineActivity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineActivity) => any;
    }
    export interface CreatePipelineRequest {
            /**
                * <p>The name of the pipeline.</p>
                */
            pipelineName: string | undefined;
            /**
                * <p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on
                *       your messages, such as removing, renaming or adding message attributes; filtering messages
                *       based on attribute values; invoking your Lambda unctions on messages for advanced processing;
                *       or performing mathematical transformations to normalize device data.</p>
                *          <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a
                *         <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must
                *       contain only one activity. For example:</p>
                *          <p>
                *             <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ...
                *       ]</code>
                *          </p>
                */
            pipelineActivities: PipelineActivity[] | undefined;
            /**
                * <p>Metadata which can be used to manage the pipeline.</p>
                */
            tags?: Tag[];
    }
    export namespace CreatePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePipelineRequest) => any;
    }
    export interface CreatePipelineResponse {
            /**
                * <p>The name of the pipeline.</p>
                */
            pipelineName?: string;
            /**
                * <p>The ARN of the pipeline.</p>
                */
            pipelineArn?: string;
    }
    export namespace CreatePipelineResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePipelineResponse) => any;
    }
    export interface DeleteChannelRequest {
            /**
                * <p>The name of the channel to delete.</p>
                */
            channelName: string | undefined;
    }
    export namespace DeleteChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelRequest) => any;
    }
    export interface DeleteDatasetRequest {
            /**
                * <p>The name of the dataset to delete.</p>
                */
            datasetName: string | undefined;
    }
    export namespace DeleteDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatasetRequest) => any;
    }
    export interface DeleteDatasetContentRequest {
            /**
                * <p>The name of the dataset whose content is deleted.</p>
                */
            datasetName: string | undefined;
            /**
                * <p>The version of the dataset whose content is deleted. You can also use the strings
                *       "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data
                *       set. If not specified, "$LATEST_SUCCEEDED" is the default.</p>
                */
            versionId?: string;
    }
    export namespace DeleteDatasetContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatasetContentRequest) => any;
    }
    export interface DeleteDatastoreRequest {
            /**
                * <p>The name of the data store to delete.</p>
                */
            datastoreName: string | undefined;
    }
    export namespace DeleteDatastoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatastoreRequest) => any;
    }
    export interface DeletePipelineRequest {
            /**
                * <p>The name of the pipeline to delete.</p>
                */
            pipelineName: string | undefined;
    }
    export namespace DeletePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePipelineRequest) => any;
    }
    export interface DescribeChannelRequest {
            /**
                * <p>The name of the channel whose information is retrieved.</p>
                */
            channelName: string | undefined;
            /**
                * <p>If true, additional statistical information about the channel is included in the response.
                *       This feature can't be used with a channel whose S3 storage is customer-managed.</p>
                */
            includeStatistics?: boolean;
    }
    export namespace DescribeChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelRequest) => any;
    }
    export enum ChannelStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING"
    }
    /**
        * <p>A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages
        *       before publishing the data to a pipeline.</p>
        */
    export interface Channel {
            /**
                * <p>The name of the channel.</p>
                */
            name?: string;
            /**
                * <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or
                *         <code>customerManagedS3</code> storage. If not specified, the default is
                *         <code>serviceManagedS3</code>. You can't change this storage option after the channel is
                *       created.</p>
                */
            storage?: ChannelStorage;
            /**
                * <p>The ARN of the channel.</p>
                */
            arn?: string;
            /**
                * <p>The status of the channel.</p>
                */
            status?: ChannelStatus | string;
            /**
                * <p>How long, in days, message data is kept for the channel.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>When the channel was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>When the channel was last updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>The last time when a new message arrived in the channel.</p>
                *          <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
                *          <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
                */
            lastMessageArrivalTime?: Date;
    }
    export namespace Channel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Channel) => any;
    }
    /**
        * <p>The estimated size of the resource.</p>
        */
    export interface EstimatedResourceSize {
            /**
                * <p>The estimated size of the resource, in bytes.</p>
                */
            estimatedSizeInBytes?: number;
            /**
                * <p>The time when the estimate of the size of the resource was made.</p>
                */
            estimatedOn?: Date;
    }
    export namespace EstimatedResourceSize {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EstimatedResourceSize) => any;
    }
    /**
        * <p>Statistics information about the channel.</p>
        */
    export interface ChannelStatistics {
            /**
                * <p>The estimated size of the channel.</p>
                */
            size?: EstimatedResourceSize;
    }
    export namespace ChannelStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelStatistics) => any;
    }
    export interface DescribeChannelResponse {
            /**
                * <p>An object that contains information about the channel.</p>
                */
            channel?: Channel;
            /**
                * <p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is
                *       set to <code>true</code> in the request.</p>
                */
            statistics?: ChannelStatistics;
    }
    export namespace DescribeChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelResponse) => any;
    }
    export interface DescribeDatasetRequest {
            /**
                * <p>The name of the dataset whose information is retrieved.</p>
                */
            datasetName: string | undefined;
    }
    export namespace DescribeDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatasetRequest) => any;
    }
    export enum DatasetStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING"
    }
    /**
        * <p>Information about a dataset.</p>
        */
    export interface Dataset {
            /**
                * <p>The name of the dataset.</p>
                */
            name?: string;
            /**
                * <p>The ARN of the dataset.</p>
                */
            arn?: string;
            /**
                * <p>The <code>DatasetAction</code> objects that automatically create the dataset
                *       contents.</p>
                */
            actions?: DatasetAction[];
            /**
                * <p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically
                *       updated.</p>
                */
            triggers?: DatasetTrigger[];
            /**
                * <p>When dataset contents are created they are delivered to destinations specified
                *       here.</p>
                */
            contentDeliveryRules?: DatasetContentDeliveryRule[];
            /**
                * <p>The status of the dataset.</p>
                */
            status?: DatasetStatus | string;
            /**
                * <p>When the dataset was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last time the dataset was updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>Optional. How long, in days, message data is kept for the dataset.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>Optional. How many versions of dataset contents are kept. If not specified or set to null,
                *       only the latest version plus the latest succeeded version (if they are different) are kept for
                *       the time period specified by the <code>retentionPeriod</code> parameter. For more information,
                *       see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions">
                *         Keeping Multiple Versions of IoT Analytics datasets</a> in the
                *         <i>IoT Analytics User Guide</i>.</p>
                */
            versioningConfiguration?: VersioningConfiguration;
            /**
                * <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
                */
            lateDataRules?: LateDataRule[];
    }
    export namespace Dataset {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Dataset) => any;
    }
    export interface DescribeDatasetResponse {
            /**
                * <p>An object that contains information about the dataset.</p>
                */
            dataset?: Dataset;
    }
    export namespace DescribeDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatasetResponse) => any;
    }
    export interface DescribeDatastoreRequest {
            /**
                * <p>The name of the data store</p>
                */
            datastoreName: string | undefined;
            /**
                * <p>If true, additional statistical information about the data store is included in the
                *       response. This feature can't be used with a data store whose S3 storage is
                *       customer-managed.</p>
                */
            includeStatistics?: boolean;
    }
    export namespace DescribeDatastoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatastoreRequest) => any;
    }
    export enum DatastoreStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING"
    }
    /**
        * <p>Information about a data store.</p>
        */
    export interface Datastore {
            /**
                * <p>The name of the data store.</p>
                */
            name?: string;
            /**
                * <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
                */
            storage?: DatastoreStorage;
            /**
                * <p>The ARN of the data store.</p>
                */
            arn?: string;
            /**
                * <p>The status of a data store:</p>
                *          <dl>
                *             <dt>CREATING</dt>
                *             <dd>
                *                <p>The data store is being created.</p>
                *             </dd>
                *             <dt>ACTIVE</dt>
                *             <dd>
                *                <p>The data store has been created and can be used.</p>
                *             </dd>
                *             <dt>DELETING</dt>
                *             <dd>
                *                <p>The data store is being deleted.</p>
                *             </dd>
                *          </dl>
                */
            status?: DatastoreStatus | string;
            /**
                * <p>How long, in days, message data is kept for the data store. When
                *         <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>When the data store was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last time the data store was updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>The last time when a new message arrived in the data store.</p>
                *          <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
                *          <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
                */
            lastMessageArrivalTime?: Date;
            /**
                * <p>Contains the configuration information of file formats.  IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
                *          <p>The default file format is JSON. You can specify only one format.</p>
                *          <p>You can't change the file format after you create the data store.</p>
                */
            fileFormatConfiguration?: FileFormatConfiguration;
            /**
                * <p> Contains information about the partition dimensions in a data store. </p>
                */
            datastorePartitions?: DatastorePartitions;
    }
    export namespace Datastore {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Datastore) => any;
    }
    /**
        * <p>Statistical information about the data store.</p>
        */
    export interface DatastoreStatistics {
            /**
                * <p>The estimated size of the data store.</p>
                */
            size?: EstimatedResourceSize;
    }
    export namespace DatastoreStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreStatistics) => any;
    }
    export interface DescribeDatastoreResponse {
            /**
                * <p>Information about the data store.</p>
                */
            datastore?: Datastore;
            /**
                * <p>Additional statistical information about the data store. Included if the
                *         <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
                */
            statistics?: DatastoreStatistics;
    }
    export namespace DescribeDatastoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatastoreResponse) => any;
    }
    export interface DescribeLoggingOptionsRequest {
    }
    export namespace DescribeLoggingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoggingOptionsRequest) => any;
    }
    export enum LoggingLevel {
            ERROR = "ERROR"
    }
    /**
        * <p>Information about logging options.</p>
        */
    export interface LoggingOptions {
            /**
                * <p>The ARN of the role that grants permission to IoT Analytics to perform logging.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>The logging level. Currently, only ERROR is supported.</p>
                */
            level: LoggingLevel | string | undefined;
            /**
                * <p>If true, logging is enabled for IoT Analytics.</p>
                */
            enabled: boolean | undefined;
    }
    export namespace LoggingOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingOptions) => any;
    }
    export interface DescribeLoggingOptionsResponse {
            /**
                * <p>The current settings of the IoT Analytics logging options.</p>
                */
            loggingOptions?: LoggingOptions;
    }
    export namespace DescribeLoggingOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoggingOptionsResponse) => any;
    }
    export interface DescribePipelineRequest {
            /**
                * <p>The name of the pipeline whose information is retrieved.</p>
                */
            pipelineName: string | undefined;
    }
    export namespace DescribePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineRequest) => any;
    }
    export enum ReprocessingStatus {
            CANCELLED = "CANCELLED",
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>Information about pipeline reprocessing.</p>
        */
    export interface ReprocessingSummary {
            /**
                * <p>The <code>reprocessingId</code> returned by <code>StartPipelineReprocessing</code>.</p>
                */
            id?: string;
            /**
                * <p>The status of the pipeline reprocessing.</p>
                */
            status?: ReprocessingStatus | string;
            /**
                * <p>The time the pipeline reprocessing was created.</p>
                */
            creationTime?: Date;
    }
    export namespace ReprocessingSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReprocessingSummary) => any;
    }
    /**
        * <p>Contains information about a pipeline.</p>
        */
    export interface Pipeline {
            /**
                * <p>The name of the pipeline.</p>
                */
            name?: string;
            /**
                * <p>The ARN of the pipeline.</p>
                */
            arn?: string;
            /**
                * <p>The activities that perform transformations on the messages.</p>
                */
            activities?: PipelineActivity[];
            /**
                * <p>A summary of information about the pipeline reprocessing.</p>
                */
            reprocessingSummaries?: ReprocessingSummary[];
            /**
                * <p>When the pipeline was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last time the pipeline was updated.</p>
                */
            lastUpdateTime?: Date;
    }
    export namespace Pipeline {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Pipeline) => any;
    }
    export interface DescribePipelineResponse {
            /**
                * <p>A <code>Pipeline</code> object that contains information about the pipeline.</p>
                */
            pipeline?: Pipeline;
    }
    export namespace DescribePipelineResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePipelineResponse) => any;
    }
    export interface GetDatasetContentRequest {
            /**
                * <p>The name of the dataset whose contents are retrieved.</p>
                */
            datasetName: string | undefined;
            /**
                * <p>The version of the dataset whose contents are retrieved. You can also use the strings
                *       "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully
                *       completed dataset. If not specified, "$LATEST_SUCCEEDED" is the default.</p>
                */
            versionId?: string;
    }
    export namespace GetDatasetContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatasetContentRequest) => any;
    }
    /**
        * <p>The reference to a dataset entry.</p>
        */
    export interface DatasetEntry {
            /**
                * <p>The name of the dataset item.</p>
                */
            entryName?: string;
            /**
                * <p>The presigned URI of the dataset item.</p>
                */
            dataURI?: string;
    }
    export namespace DatasetEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetEntry) => any;
    }
    export enum DatasetContentState {
            CREATING = "CREATING",
            FAILED = "FAILED",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>The state of the dataset contents and the reason they are in this state.</p>
        */
    export interface DatasetContentStatus {
            /**
                * <p>The state of the dataset contents. Can be one of READY, CREATING, SUCCEEDED, or
                *       FAILED.</p>
                */
            state?: DatasetContentState | string;
            /**
                * <p>The reason the dataset contents are in this state.</p>
                */
            reason?: string;
    }
    export namespace DatasetContentStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetContentStatus) => any;
    }
    export interface GetDatasetContentResponse {
            /**
                * <p>A list of <code>DatasetEntry</code> objects.</p>
                */
            entries?: DatasetEntry[];
            /**
                * <p>The time when the request was made.</p>
                */
            timestamp?: Date;
            /**
                * <p>The status of the dataset content.</p>
                */
            status?: DatasetContentStatus;
    }
    export namespace GetDatasetContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatasetContentResponse) => any;
    }
    export interface ListChannelsRequest {
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                *          <p>The default value is 100.</p>
                */
            maxResults?: number;
    }
    export namespace ListChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsRequest) => any;
    }
    /**
        * <p>Used to store channel data in an S3 bucket that you manage.</p>
        */
    export interface CustomerManagedChannelS3StorageSummary {
            /**
                * <p>The name of the S3 bucket in which channel data is stored.</p>
                */
            bucket?: string;
            /**
                * <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in
                *       an S3 bucket has a key that is its unique identifier within the bucket (each object in a
                *       bucket has exactly one key). The prefix must end with a forward slash (/).</p>
                */
            keyPrefix?: string;
            /**
                * <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3
                *       resources.</p>
                */
            roleArn?: string;
    }
    export namespace CustomerManagedChannelS3StorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomerManagedChannelS3StorageSummary) => any;
    }
    /**
        * <p>Used to store channel data in an S3 bucket managed by IoT Analytics.</p>
        */
    export interface ServiceManagedChannelS3StorageSummary {
    }
    export namespace ServiceManagedChannelS3StorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceManagedChannelS3StorageSummary) => any;
    }
    /**
        * <p>Where channel data is stored.</p>
        */
    export interface ChannelStorageSummary {
            /**
                * <p>Used to store channel data in an S3 bucket managed by IoT Analytics.</p>
                */
            serviceManagedS3?: ServiceManagedChannelS3StorageSummary;
            /**
                * <p>Used to store channel data in an S3 bucket that you manage.</p>
                */
            customerManagedS3?: CustomerManagedChannelS3StorageSummary;
    }
    export namespace ChannelStorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelStorageSummary) => any;
    }
    /**
        * <p>A summary of information about a channel.</p>
        */
    export interface ChannelSummary {
            /**
                * <p>The name of the channel.</p>
                */
            channelName?: string;
            /**
                * <p>Where channel data is stored.</p>
                */
            channelStorage?: ChannelStorageSummary;
            /**
                * <p>The status of the channel.</p>
                */
            status?: ChannelStatus | string;
            /**
                * <p>When the channel was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last time the channel was updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>The last time when a new message arrived in the channel.</p>
                *          <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
                *          <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
                */
            lastMessageArrivalTime?: Date;
    }
    export namespace ChannelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelSummary) => any;
    }
    export interface ListChannelsResponse {
            /**
                * <p>A list of <code>ChannelSummary</code> objects.</p>
                */
            channelSummaries?: ChannelSummary[];
            /**
                * <p>The token to retrieve the next set of results, or <code>null</code> if there are no more
                *       results.</p>
                */
            nextToken?: string;
    }
    export namespace ListChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsResponse) => any;
    }
    export interface ListDatasetContentsRequest {
            /**
                * <p>The name of the dataset whose contents information you want to list.</p>
                */
            datasetName: string | undefined;
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                */
            maxResults?: number;
            /**
                * <p>A filter to limit results to those dataset contents whose creation is scheduled on or
                *       after the given time. See the field <code>triggers.schedule</code> in the
                *         <code>CreateDataset</code> request. (timestamp)</p>
                */
            scheduledOnOrAfter?: Date;
            /**
                * <p>A filter to limit results to those dataset contents whose creation is scheduled before the
                *       given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code>
                *       request. (timestamp)</p>
                */
            scheduledBefore?: Date;
    }
    export namespace ListDatasetContentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetContentsRequest) => any;
    }
    /**
        * <p>Summary information about dataset contents.</p>
        */
    export interface DatasetContentSummary {
            /**
                * <p>The version of the dataset contents.</p>
                */
            version?: string;
            /**
                * <p>The status of the dataset contents.</p>
                */
            status?: DatasetContentStatus;
            /**
                * <p>The actual time the creation of the dataset contents was started.</p>
                */
            creationTime?: Date;
            /**
                * <p>The time the creation of the dataset contents was scheduled to start.</p>
                */
            scheduleTime?: Date;
            /**
                * <p>The time the dataset content status was updated to SUCCEEDED or FAILED.</p>
                */
            completionTime?: Date;
    }
    export namespace DatasetContentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetContentSummary) => any;
    }
    export interface ListDatasetContentsResponse {
            /**
                * <p>Summary information about dataset contents that have been created.</p>
                */
            datasetContentSummaries?: DatasetContentSummary[];
            /**
                * <p>The token to retrieve the next set of results, or <code>null</code> if there are no more
                *       results.</p>
                */
            nextToken?: string;
    }
    export namespace ListDatasetContentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetContentsResponse) => any;
    }
    export interface ListDatasetsRequest {
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                *          <p>The default value is 100.</p>
                */
            maxResults?: number;
    }
    export namespace ListDatasetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetsRequest) => any;
    }
    export enum DatasetActionType {
            CONTAINER = "CONTAINER",
            QUERY = "QUERY"
    }
    /**
        * <p>Information about the action that automatically creates the dataset's contents.</p>
        */
    export interface DatasetActionSummary {
            /**
                * <p>The name of the action that automatically creates the dataset's contents.</p>
                */
            actionName?: string;
            /**
                * <p>The type of action by which the dataset's contents are automatically created.</p>
                */
            actionType?: DatasetActionType | string;
    }
    export namespace DatasetActionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetActionSummary) => any;
    }
    /**
        * <p>A summary of information about a dataset.</p>
        */
    export interface DatasetSummary {
            /**
                * <p>The name of the dataset.</p>
                */
            datasetName?: string;
            /**
                * <p>The status of the dataset.</p>
                */
            status?: DatasetStatus | string;
            /**
                * <p>The time the dataset was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last time the dataset was updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>A list of triggers. A trigger causes dataset content to be populated at a specified time
                *       interval or when another dataset is populated. The list of triggers can be empty or contain up
                *       to five <code>DataSetTrigger</code> objects</p>
                */
            triggers?: DatasetTrigger[];
            /**
                * <p>A list of <code>DataActionSummary</code> objects.</p>
                */
            actions?: DatasetActionSummary[];
    }
    export namespace DatasetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetSummary) => any;
    }
    export interface ListDatasetsResponse {
            /**
                * <p>A list of <code>DatasetSummary</code> objects.</p>
                */
            datasetSummaries?: DatasetSummary[];
            /**
                * <p>The token to retrieve the next set of results, or <code>null</code> if there are no more
                *       results.</p>
                */
            nextToken?: string;
    }
    export namespace ListDatasetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetsResponse) => any;
    }
    export interface ListDatastoresRequest {
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                *          <p>The default value is 100.</p>
                */
            maxResults?: number;
    }
    export namespace ListDatastoresRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatastoresRequest) => any;
    }
    /**
        * <p>Contains information about the data store that you manage.</p>
        */
    export interface CustomerManagedDatastoreS3StorageSummary {
            /**
                * <p>The name of the Amazon S3 bucket where your data is stored.</p>
                */
            bucket?: string;
            /**
                * <p>(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).</p>
                */
            keyPrefix?: string;
            /**
                * <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
                */
            roleArn?: string;
    }
    export namespace CustomerManagedDatastoreS3StorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomerManagedDatastoreS3StorageSummary) => any;
    }
    /**
        * <p> Contains information about the data store that you manage, which stores data used by IoT SiteWise. </p>
        */
    export interface IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
            /**
                * <p> The name of the Amazon S3 bucket where your data is stored. </p>
                */
            bucket?: string;
            /**
                * <p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>
                */
            keyPrefix?: string;
    }
    export namespace IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IotSiteWiseCustomerManagedDatastoreS3StorageSummary) => any;
    }
    /**
        * <p> Contains information about the data store that you manage, which stores data used by IoT SiteWise. </p>
        */
    export interface DatastoreIotSiteWiseMultiLayerStorageSummary {
            /**
                * <p>Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.</p>
                */
            customerManagedS3Storage?: IotSiteWiseCustomerManagedDatastoreS3StorageSummary;
    }
    export namespace DatastoreIotSiteWiseMultiLayerStorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreIotSiteWiseMultiLayerStorageSummary) => any;
    }
    /**
        * <p>Contains information about the data store that is managed by IoT Analytics.</p>
        */
    export interface ServiceManagedDatastoreS3StorageSummary {
    }
    export namespace ServiceManagedDatastoreS3StorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceManagedDatastoreS3StorageSummary) => any;
    }
    /**
        * <p>Contains information about your data store.</p>
        */
    export interface DatastoreStorageSummary {
            /**
                * <p>Used to store data in an Amazon S3 bucket managed by IoT Analytics.</p>
                */
            serviceManagedS3?: ServiceManagedDatastoreS3StorageSummary;
            /**
                * <p>Used to store data in an Amazon S3 bucket managed by IoT Analytics.</p>
                */
            customerManagedS3?: CustomerManagedDatastoreS3StorageSummary;
            /**
                * <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
                */
            iotSiteWiseMultiLayerStorage?: DatastoreIotSiteWiseMultiLayerStorageSummary;
    }
    export namespace DatastoreStorageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreStorageSummary) => any;
    }
    export enum FileFormatType {
            JSON = "JSON",
            PARQUET = "PARQUET"
    }
    /**
        * <p>A summary of information about a data store.</p>
        */
    export interface DatastoreSummary {
            /**
                * <p>The name of the data store.</p>
                */
            datastoreName?: string;
            /**
                * <p>Where data in a data store is stored.</p>
                */
            datastoreStorage?: DatastoreStorageSummary;
            /**
                * <p>The status of the data store.</p>
                */
            status?: DatastoreStatus | string;
            /**
                * <p>When the data store was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The last time the data store was updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>The last time when a new message arrived in the data store.</p>
                *          <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
                *          <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
                */
            lastMessageArrivalTime?: Date;
            /**
                * <p>The file format of the data in the data store.</p>
                */
            fileFormatType?: FileFormatType | string;
            /**
                * <p> Contains information about the partition dimensions in a data store. </p>
                */
            datastorePartitions?: DatastorePartitions;
    }
    export namespace DatastoreSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatastoreSummary) => any;
    }
    export interface ListDatastoresResponse {
            /**
                * <p>A list of <code>DatastoreSummary</code> objects.</p>
                */
            datastoreSummaries?: DatastoreSummary[];
            /**
                * <p>The token to retrieve the next set of results, or <code>null</code> if there are no more
                *       results.</p>
                */
            nextToken?: string;
    }
    export namespace ListDatastoresResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatastoresResponse) => any;
    }
    export interface ListPipelinesRequest {
            /**
                * <p>The token for the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                *          <p>The default value is 100.</p>
                */
            maxResults?: number;
    }
    export namespace ListPipelinesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelinesRequest) => any;
    }
    /**
        * <p>A summary of information about a pipeline.</p>
        */
    export interface PipelineSummary {
            /**
                * <p>The name of the pipeline.</p>
                */
            pipelineName?: string;
            /**
                * <p>A summary of information about the pipeline reprocessing.</p>
                */
            reprocessingSummaries?: ReprocessingSummary[];
            /**
                * <p>When the pipeline was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>When the pipeline was last updated.</p>
                */
            lastUpdateTime?: Date;
    }
    export namespace PipelineSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineSummary) => any;
    }
    export interface ListPipelinesResponse {
            /**
                * <p>A list of <code>PipelineSummary</code> objects.</p>
                */
            pipelineSummaries?: PipelineSummary[];
            /**
                * <p>The token to retrieve the next set of results, or <code>null</code> if there are no more
                *       results.</p>
                */
            nextToken?: string;
    }
    export namespace ListPipelinesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPipelinesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource whose tags you want to list.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags (metadata) that you have assigned to the resource.</p>
                */
            tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface PutLoggingOptionsRequest {
            /**
                * <p>The new values of the IoT Analytics logging options.</p>
                */
            loggingOptions: LoggingOptions | undefined;
    }
    export namespace PutLoggingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLoggingOptionsRequest) => any;
    }
    export interface RunPipelineActivityRequest {
            /**
                * <p>The pipeline activity that is run. This must not be a channel activity or a data store
                *       activity because these activities are used in a pipeline only to load the original message and
                *       to store the (possibly) transformed message. If a Lambda activity is specified, only
                *       short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be
                *       used.</p>
                */
            pipelineActivity: PipelineActivity | undefined;
            /**
                * <p>The sample message payloads on which the pipeline activity is run.</p>
                */
            payloads: Uint8Array[] | undefined;
    }
    export namespace RunPipelineActivityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunPipelineActivityRequest) => any;
    }
    export interface RunPipelineActivityResponse {
            /**
                * <p>The enriched or transformed sample message payloads as base64-encoded strings. (The
                *       results of running the pipeline activity on each input sample message payload, encoded in
                *       base64.)</p>
                */
            payloads?: Uint8Array[];
            /**
                * <p>In case the pipeline activity fails, the log message that is generated.</p>
                */
            logResult?: string;
    }
    export namespace RunPipelineActivityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunPipelineActivityResponse) => any;
    }
    export interface SampleChannelDataRequest {
            /**
                * <p>The name of the channel whose message samples are retrieved.</p>
                */
            channelName: string | undefined;
            /**
                * <p>The number of sample messages to be retrieved. The limit is 10. The default is also
                *       10.</p>
                */
            maxMessages?: number;
            /**
                * <p>The start of the time window from which sample messages are retrieved.</p>
                */
            startTime?: Date;
            /**
                * <p>The end of the time window from which sample messages are retrieved.</p>
                */
            endTime?: Date;
    }
    export namespace SampleChannelDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SampleChannelDataRequest) => any;
    }
    export interface SampleChannelDataResponse {
            /**
                * <p>The list of message samples. Each sample message is returned as a base64-encoded
                *       string.</p>
                */
            payloads?: Uint8Array[];
    }
    export namespace SampleChannelDataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SampleChannelDataResponse) => any;
    }
    /**
        * <p>Specifies one or more sets of channel messages.</p>
        */
    export interface ChannelMessages {
            /**
                * <p>Specifies one or more keys that identify the Amazon Simple Storage Service (Amazon S3) objects that save your
                *       channel messages.</p>
                *          <p>You must use the full path for the key.</p>
                *          <p>Example path: <code>channel/mychannel/__dt=2020-02-29
                *         00:00:00/1582940490000_1582940520000_123456789012_mychannel_0_2118.0.json.gz</code>
                *          </p>
                */
            s3Paths?: string[];
    }
    export namespace ChannelMessages {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMessages) => any;
    }
    export interface StartPipelineReprocessingRequest {
            /**
                * <p>The name of the pipeline on which to start reprocessing.</p>
                */
            pipelineName: string | undefined;
            /**
                * <p>The start time (inclusive) of raw message data that is reprocessed.</p>
                *          <p>If you specify a value for the <code>startTime</code> parameter, you must not use the
                *         <code>channelMessages</code> object.</p>
                */
            startTime?: Date;
            /**
                * <p>The end time (exclusive) of raw message data that is reprocessed.</p>
                *          <p>If you specify a value for the <code>endTime</code> parameter, you must not use the
                *         <code>channelMessages</code> object.</p>
                */
            endTime?: Date;
            /**
                * <p>Specifies one or more sets of channel messages that you want to reprocess.</p>
                *          <p>If you use the <code>channelMessages</code> object, you must not specify a value for
                *         <code>startTime</code> and <code>endTime</code>.</p>
                */
            channelMessages?: ChannelMessages;
    }
    export namespace StartPipelineReprocessingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPipelineReprocessingRequest) => any;
    }
    export interface StartPipelineReprocessingResponse {
            /**
                * <p>The ID of the pipeline reprocessing activity that was started.</p>
                */
            reprocessingId?: string;
    }
    export namespace StartPipelineReprocessingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPipelineReprocessingResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource whose tags you want to modify.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The new or modified tags for the resource.</p>
                */
            tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource whose tags you want to remove.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The keys of those tags which you want to remove.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateChannelRequest {
            /**
                * <p>The name of the channel to be updated.</p>
                */
            channelName: string | undefined;
            /**
                * <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or
                *         <code>customerManagedS3</code> storage. If not specified, the default is
                *         <code>serviceManagedS3</code>. You can't change this storage option after the channel is
                *       created.</p>
                */
            channelStorage?: ChannelStorage;
            /**
                * <p>How long, in days, message data is kept for the channel. The retention period can't be
                *       updated if the channel's Amazon S3 storage is customer-managed.</p>
                */
            retentionPeriod?: RetentionPeriod;
    }
    export namespace UpdateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelRequest) => any;
    }
    export interface UpdateDatasetRequest {
            /**
                * <p>The name of the dataset to update.</p>
                */
            datasetName: string | undefined;
            /**
                * <p>A list of <code>DatasetAction</code> objects.</p>
                */
            actions: DatasetAction[] | undefined;
            /**
                * <p>A list of <code>DatasetTrigger</code> objects. The list can be empty or can contain up to
                *       five <code>DatasetTrigger</code> objects.</p>
                */
            triggers?: DatasetTrigger[];
            /**
                * <p>When dataset contents are created, they are delivered to destinations specified
                *       here.</p>
                */
            contentDeliveryRules?: DatasetContentDeliveryRule[];
            /**
                * <p>How long, in days, dataset contents are kept for the dataset.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>Optional. How many versions of dataset contents are kept. If not specified or set to null,
                *       only the latest version plus the latest succeeded version (if they are different) are kept for
                *       the time period specified by the <code>retentionPeriod</code> parameter. For more information,
                *       see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions">Keeping Multiple Versions of IoT Analytics datasets</a> in the
                *         <i>IoT Analytics User Guide</i>.</p>
                */
            versioningConfiguration?: VersioningConfiguration;
            /**
                * <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
                */
            lateDataRules?: LateDataRule[];
    }
    export namespace UpdateDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatasetRequest) => any;
    }
    export interface UpdateDatastoreRequest {
            /**
                * <p>The name of the data store to be updated.</p>
                */
            datastoreName: string | undefined;
            /**
                * <p>How long, in days, message data is kept for the data store. The retention period can't be
                *       updated if the data store's Amazon S3 storage is customer-managed.</p>
                */
            retentionPeriod?: RetentionPeriod;
            /**
                * <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
                */
            datastoreStorage?: DatastoreStorage;
            /**
                * <p>Contains the configuration information of file formats.  IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
                *          <p>The default file format is JSON. You can specify only one format.</p>
                *          <p>You can't change the file format after you create the data store.</p>
                */
            fileFormatConfiguration?: FileFormatConfiguration;
    }
    export namespace UpdateDatastoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatastoreRequest) => any;
    }
    export interface UpdatePipelineRequest {
            /**
                * <p>The name of the pipeline to update.</p>
                */
            pipelineName: string | undefined;
            /**
                * <p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on
                *       your messages, such as removing, renaming or adding message attributes; filtering messages
                *       based on attribute values; invoking your Lambda functions on messages for advanced processing;
                *       or performing mathematical transformations to normalize device data.</p>
                *          <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a
                *         <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must
                *       contain only one activity. For example:</p>
                *          <p>
                *             <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ...
                *       ]</code>
                *          </p>
                */
            pipelineActivities: PipelineActivity[] | undefined;
    }
    export namespace UpdatePipelineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePipelineRequest) => any;
    }
}

declare module '@aws-sdk/client-iotanalytics/node_modules/@aws-sdk/client-iotanalytics/dist-types/models/IoTAnalyticsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from IoTAnalytics service.
        */
    export class IoTAnalyticsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

