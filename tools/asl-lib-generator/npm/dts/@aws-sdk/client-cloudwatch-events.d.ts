// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-cloudwatch-events' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CloudWatchEventsClient } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ActivateEventSourceCommandInput, ActivateEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ActivateEventSourceCommand";
    import { CancelReplayCommandInput, CancelReplayCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CancelReplayCommand";
    import { CreateApiDestinationCommandInput, CreateApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateApiDestinationCommand";
    import { CreateArchiveCommandInput, CreateArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateArchiveCommand";
    import { CreateConnectionCommandInput, CreateConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateConnectionCommand";
    import { CreateEventBusCommandInput, CreateEventBusCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateEventBusCommand";
    import { CreatePartnerEventSourceCommandInput, CreatePartnerEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreatePartnerEventSourceCommand";
    import { DeactivateEventSourceCommandInput, DeactivateEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeactivateEventSourceCommand";
    import { DeauthorizeConnectionCommandInput, DeauthorizeConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeauthorizeConnectionCommand";
    import { DeleteApiDestinationCommandInput, DeleteApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteApiDestinationCommand";
    import { DeleteArchiveCommandInput, DeleteArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteArchiveCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteConnectionCommand";
    import { DeleteEventBusCommandInput, DeleteEventBusCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteEventBusCommand";
    import { DeletePartnerEventSourceCommandInput, DeletePartnerEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeletePartnerEventSourceCommand";
    import { DeleteRuleCommandInput, DeleteRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteRuleCommand";
    import { DescribeApiDestinationCommandInput, DescribeApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeApiDestinationCommand";
    import { DescribeArchiveCommandInput, DescribeArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeArchiveCommand";
    import { DescribeConnectionCommandInput, DescribeConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeConnectionCommand";
    import { DescribeEventBusCommandInput, DescribeEventBusCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeEventBusCommand";
    import { DescribeEventSourceCommandInput, DescribeEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeEventSourceCommand";
    import { DescribePartnerEventSourceCommandInput, DescribePartnerEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribePartnerEventSourceCommand";
    import { DescribeReplayCommandInput, DescribeReplayCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeReplayCommand";
    import { DescribeRuleCommandInput, DescribeRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeRuleCommand";
    import { DisableRuleCommandInput, DisableRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DisableRuleCommand";
    import { EnableRuleCommandInput, EnableRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/EnableRuleCommand";
    import { ListApiDestinationsCommandInput, ListApiDestinationsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListApiDestinationsCommand";
    import { ListArchivesCommandInput, ListArchivesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListArchivesCommand";
    import { ListConnectionsCommandInput, ListConnectionsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListConnectionsCommand";
    import { ListEventBusesCommandInput, ListEventBusesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListEventBusesCommand";
    import { ListEventSourcesCommandInput, ListEventSourcesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListEventSourcesCommand";
    import { ListPartnerEventSourceAccountsCommandInput, ListPartnerEventSourceAccountsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListPartnerEventSourceAccountsCommand";
    import { ListPartnerEventSourcesCommandInput, ListPartnerEventSourcesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListPartnerEventSourcesCommand";
    import { ListReplaysCommandInput, ListReplaysCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListReplaysCommand";
    import { ListRuleNamesByTargetCommandInput, ListRuleNamesByTargetCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListRuleNamesByTargetCommand";
    import { ListRulesCommandInput, ListRulesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListRulesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetsByRuleCommandInput, ListTargetsByRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListTargetsByRuleCommand";
    import { PutEventsCommandInput, PutEventsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutEventsCommand";
    import { PutPartnerEventsCommandInput, PutPartnerEventsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutPartnerEventsCommand";
    import { PutPermissionCommandInput, PutPermissionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutPermissionCommand";
    import { PutRuleCommandInput, PutRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutRuleCommand";
    import { PutTargetsCommandInput, PutTargetsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutTargetsCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/RemovePermissionCommand";
    import { RemoveTargetsCommandInput, RemoveTargetsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/RemoveTargetsCommand";
    import { StartReplayCommandInput, StartReplayCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/StartReplayCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/TagResourceCommand";
    import { TestEventPatternCommandInput, TestEventPatternCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/TestEventPatternCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UntagResourceCommand";
    import { UpdateApiDestinationCommandInput, UpdateApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateApiDestinationCommand";
    import { UpdateArchiveCommandInput, UpdateArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateArchiveCommand";
    import { UpdateConnectionCommandInput, UpdateConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateConnectionCommand";
    /**
        * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your
        *       resources change state, they automatically send events to an event stream. You can create
        *       rules that match selected events in the stream and route them to targets to take action. You
        *       can also use rules to take action on a predetermined schedule. For example, you can configure
        *       rules to:</p>
        *          <ul>
        *             <li>
        *                <p>Automatically invoke an Lambda function to update DNS entries when an event
        *           notifies you that Amazon EC2 instance enters the running state.</p>
        *             </li>
        *             <li>
        *                <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for
        *           detailed analysis of potential security or availability risks.</p>
        *             </li>
        *             <li>
        *                <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS
        *           volume.</p>
        *             </li>
        *          </ul>
        *          <p>For more information about the features of Amazon EventBridge, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide">Amazon EventBridge User
        *         Guide</a>.</p>
        */
    export class CloudWatchEvents extends CloudWatchEventsClient {
            /**
                * <p>Activates a partner event source that has been deactivated. Once activated, your matching
                *       event bus will start receiving events from the event source.</p>
                */
            activateEventSource(args: ActivateEventSourceCommandInput, options?: __HttpHandlerOptions): Promise<ActivateEventSourceCommandOutput>;
            activateEventSource(args: ActivateEventSourceCommandInput, cb: (err: any, data?: ActivateEventSourceCommandOutput) => void): void;
            activateEventSource(args: ActivateEventSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ActivateEventSourceCommandOutput) => void): void;
            /**
                * <p>Cancels the specified replay.</p>
                */
            cancelReplay(args: CancelReplayCommandInput, options?: __HttpHandlerOptions): Promise<CancelReplayCommandOutput>;
            cancelReplay(args: CancelReplayCommandInput, cb: (err: any, data?: CancelReplayCommandOutput) => void): void;
            cancelReplay(args: CancelReplayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelReplayCommandOutput) => void): void;
            /**
                * <p>Creates an API destination, which is an HTTP invocation endpoint configured as a target
                *       for events.</p>
                */
            createApiDestination(args: CreateApiDestinationCommandInput, options?: __HttpHandlerOptions): Promise<CreateApiDestinationCommandOutput>;
            createApiDestination(args: CreateApiDestinationCommandInput, cb: (err: any, data?: CreateApiDestinationCommandOutput) => void): void;
            createApiDestination(args: CreateApiDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApiDestinationCommandOutput) => void): void;
            /**
                * <p>Creates an archive of events with the specified settings. When you create an archive,
                *       incoming events might not immediately start being sent to the archive. Allow a short period of
                *       time for changes to take effect. If you do not specify a pattern to filter events sent to the
                *       archive, all events are sent to the archive except replayed events. Replayed events are not
                *       sent to an archive.</p>
                */
            createArchive(args: CreateArchiveCommandInput, options?: __HttpHandlerOptions): Promise<CreateArchiveCommandOutput>;
            createArchive(args: CreateArchiveCommandInput, cb: (err: any, data?: CreateArchiveCommandOutput) => void): void;
            createArchive(args: CreateArchiveCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateArchiveCommandOutput) => void): void;
            /**
                * <p>Creates a connection. A connection defines the authorization type and credentials to use
                *       for authorization with an API destination HTTP endpoint.</p>
                */
            createConnection(args: CreateConnectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectionCommandOutput>;
            createConnection(args: CreateConnectionCommandInput, cb: (err: any, data?: CreateConnectionCommandOutput) => void): void;
            createConnection(args: CreateConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectionCommandOutput) => void): void;
            /**
                * <p>Creates a new event bus within your account. This can be a custom event bus which you can
                *       use to receive events from your custom applications and services, or it can be a partner event
                *       bus which can be matched to a partner event source.</p>
                */
            createEventBus(args: CreateEventBusCommandInput, options?: __HttpHandlerOptions): Promise<CreateEventBusCommandOutput>;
            createEventBus(args: CreateEventBusCommandInput, cb: (err: any, data?: CreateEventBusCommandOutput) => void): void;
            createEventBus(args: CreateEventBusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEventBusCommandOutput) => void): void;
            /**
                * <p>Called by an SaaS partner to create a partner event source. This operation is not used by
                *       Amazon Web Services customers.</p>
                *          <p>Each partner event source can be used by one Amazon Web Services account to create a matching partner
                *       event bus in that Amazon Web Services account. A SaaS partner must create one partner event source for each
                *       Amazon Web Services account that wants to receive those event types. </p>
                *          <p>A partner event source creates events based on resources within the SaaS partner's service
                *       or application.</p>
                *          <p>An Amazon Web Services account that creates a partner event bus that matches the partner event source can
                *       use that event bus to receive events from the partner, and then process them using Amazon Web Services Events
                *       rules and targets.</p>
                *          <p>Partner event source names follow this format:</p>
                *          <p>
                *             <code>
                *                <i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i>
                *             </code>
                *          </p>
                *          <p>
                *             <i>partner_name</i> is determined during partner registration and identifies
                *       the partner to Amazon Web Services customers. <i>event_namespace</i> is determined by the
                *       partner and is a way for the partner to categorize their events.
                *         <i>event_name</i> is determined by the partner, and should uniquely identify
                *       an event-generating resource within the partner system. The combination of
                *         <i>event_namespace</i> and <i>event_name</i> should help Amazon Web Services
                *       customers decide whether to create an event bus to receive these events.</p>
                */
            createPartnerEventSource(args: CreatePartnerEventSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreatePartnerEventSourceCommandOutput>;
            createPartnerEventSource(args: CreatePartnerEventSourceCommandInput, cb: (err: any, data?: CreatePartnerEventSourceCommandOutput) => void): void;
            createPartnerEventSource(args: CreatePartnerEventSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePartnerEventSourceCommandOutput) => void): void;
            /**
                * <p>You can use this operation to temporarily stop receiving events from the specified partner
                *       event source. The matching event bus is not deleted. </p>
                *          <p>When you deactivate a partner event source, the source goes into PENDING state. If it
                *       remains in PENDING state for more than two weeks, it is deleted.</p>
                *          <p>To activate a deactivated partner event source, use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_ActivateEventSource.html">ActivateEventSource</a>.</p>
                */
            deactivateEventSource(args: DeactivateEventSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeactivateEventSourceCommandOutput>;
            deactivateEventSource(args: DeactivateEventSourceCommandInput, cb: (err: any, data?: DeactivateEventSourceCommandOutput) => void): void;
            deactivateEventSource(args: DeactivateEventSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeactivateEventSourceCommandOutput) => void): void;
            /**
                * <p>Removes all authorization parameters from the connection. This lets you remove the secret
                *       from the connection so you can reuse it without having to create a new connection.</p>
                */
            deauthorizeConnection(args: DeauthorizeConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeauthorizeConnectionCommandOutput>;
            deauthorizeConnection(args: DeauthorizeConnectionCommandInput, cb: (err: any, data?: DeauthorizeConnectionCommandOutput) => void): void;
            deauthorizeConnection(args: DeauthorizeConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeauthorizeConnectionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified API destination.</p>
                */
            deleteApiDestination(args: DeleteApiDestinationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApiDestinationCommandOutput>;
            deleteApiDestination(args: DeleteApiDestinationCommandInput, cb: (err: any, data?: DeleteApiDestinationCommandOutput) => void): void;
            deleteApiDestination(args: DeleteApiDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApiDestinationCommandOutput) => void): void;
            /**
                * <p>Deletes the specified archive.</p>
                */
            deleteArchive(args: DeleteArchiveCommandInput, options?: __HttpHandlerOptions): Promise<DeleteArchiveCommandOutput>;
            deleteArchive(args: DeleteArchiveCommandInput, cb: (err: any, data?: DeleteArchiveCommandOutput) => void): void;
            deleteArchive(args: DeleteArchiveCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteArchiveCommandOutput) => void): void;
            /**
                * <p>Deletes a connection.</p>
                */
            deleteConnection(args: DeleteConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectionCommandOutput>;
            deleteConnection(args: DeleteConnectionCommandInput, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            deleteConnection(args: DeleteConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified custom event bus or partner event bus. All rules associated with
                *       this event bus need to be deleted. You can't delete your account's default event bus.</p>
                */
            deleteEventBus(args: DeleteEventBusCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventBusCommandOutput>;
            deleteEventBus(args: DeleteEventBusCommandInput, cb: (err: any, data?: DeleteEventBusCommandOutput) => void): void;
            deleteEventBus(args: DeleteEventBusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventBusCommandOutput) => void): void;
            /**
                * <p>This operation is used by SaaS partners to delete a partner event source. This operation
                *       is not used by Amazon Web Services customers.</p>
                *          <p>When you delete an event source, the status of the corresponding partner event bus in the
                *       Amazon Web Services customer account becomes DELETED.</p>
                *          <p></p>
                */
            deletePartnerEventSource(args: DeletePartnerEventSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeletePartnerEventSourceCommandOutput>;
            deletePartnerEventSource(args: DeletePartnerEventSourceCommandInput, cb: (err: any, data?: DeletePartnerEventSourceCommandOutput) => void): void;
            deletePartnerEventSource(args: DeletePartnerEventSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePartnerEventSourceCommandOutput) => void): void;
            /**
                * <p>Deletes the specified rule.</p>
                *          <p>Before you can delete the rule, you must remove all targets, using <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_RemoveTargets.html">RemoveTargets</a>.</p>
                *
                *          <p>When you delete a rule, incoming events might continue to match to the deleted rule. Allow
                *       a short period of time for changes to take effect.</p>
                *
                *          <p>If you call delete rule multiple times for the same rule, all calls will succeed. When you
                *       call delete rule for a non-existent custom eventbus, <code>ResourceNotFoundException</code> is
                *       returned.</p>
                *
                *          <p>Managed rules are rules created and managed by another Amazon Web Services service on your behalf. These
                *       rules are created by those other Amazon Web Services services to support functionality in those services. You
                *       can delete these rules using the <code>Force</code> option, but you should do so only if you
                *       are sure the other service is not still using that rule.</p>
                */
            deleteRule(args: DeleteRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRuleCommandOutput>;
            deleteRule(args: DeleteRuleCommandInput, cb: (err: any, data?: DeleteRuleCommandOutput) => void): void;
            deleteRule(args: DeleteRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRuleCommandOutput) => void): void;
            /**
                * <p>Retrieves details about an API destination.</p>
                */
            describeApiDestination(args: DescribeApiDestinationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApiDestinationCommandOutput>;
            describeApiDestination(args: DescribeApiDestinationCommandInput, cb: (err: any, data?: DescribeApiDestinationCommandOutput) => void): void;
            describeApiDestination(args: DescribeApiDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApiDestinationCommandOutput) => void): void;
            /**
                * <p>Retrieves details about an archive.</p>
                */
            describeArchive(args: DescribeArchiveCommandInput, options?: __HttpHandlerOptions): Promise<DescribeArchiveCommandOutput>;
            describeArchive(args: DescribeArchiveCommandInput, cb: (err: any, data?: DescribeArchiveCommandOutput) => void): void;
            describeArchive(args: DescribeArchiveCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeArchiveCommandOutput) => void): void;
            /**
                * <p>Retrieves details about a connection.</p>
                */
            describeConnection(args: DescribeConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConnectionCommandOutput>;
            describeConnection(args: DescribeConnectionCommandInput, cb: (err: any, data?: DescribeConnectionCommandOutput) => void): void;
            describeConnection(args: DescribeConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConnectionCommandOutput) => void): void;
            /**
                * <p>Displays details about an event bus in your account. This can include the external Amazon Web Services
                *       accounts that are permitted to write events to your default event bus, and the associated
                *       policy. For custom event buses and partner event buses, it displays the name, ARN, policy,
                *       state, and creation time.</p>
                *          <p> To enable your account to receive events from other accounts on its default event bus,
                *       use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutPermission.html">PutPermission</a>.</p>
                *          <p>For more information about partner event buses, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html">CreateEventBus</a>.</p>
                */
            describeEventBus(args: DescribeEventBusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventBusCommandOutput>;
            describeEventBus(args: DescribeEventBusCommandInput, cb: (err: any, data?: DescribeEventBusCommandOutput) => void): void;
            describeEventBus(args: DescribeEventBusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventBusCommandOutput) => void): void;
            /**
                * <p>This operation lists details about a partner event source that is shared with your
                *       account.</p>
                */
            describeEventSource(args: DescribeEventSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventSourceCommandOutput>;
            describeEventSource(args: DescribeEventSourceCommandInput, cb: (err: any, data?: DescribeEventSourceCommandOutput) => void): void;
            describeEventSource(args: DescribeEventSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventSourceCommandOutput) => void): void;
            /**
                * <p>An SaaS partner can use this operation to list details about a partner event source that
                *       they have created. Amazon Web Services customers do not use this operation. Instead, Amazon Web Services customers can use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DescribeEventSource.html">DescribeEventSource</a>
                *       to see details about a partner event source that is
                *       shared with them.</p>
                */
            describePartnerEventSource(args: DescribePartnerEventSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribePartnerEventSourceCommandOutput>;
            describePartnerEventSource(args: DescribePartnerEventSourceCommandInput, cb: (err: any, data?: DescribePartnerEventSourceCommandOutput) => void): void;
            describePartnerEventSource(args: DescribePartnerEventSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePartnerEventSourceCommandOutput) => void): void;
            /**
                * <p>Retrieves details about a replay. Use <code>DescribeReplay</code> to determine the
                *       progress of a running replay. A replay processes events to replay based on the time in the
                *       event, and replays them using 1 minute intervals. If you use <code>StartReplay</code> and
                *       specify an <code>EventStartTime</code> and an <code>EventEndTime</code> that covers a 20
                *       minute time range, the events are replayed from the first minute of that 20 minute range
                *       first. Then the events from the second minute are replayed. You can use
                *         <code>DescribeReplay</code> to determine the progress of a replay. The value returned for
                *         <code>EventLastReplayedTime</code> indicates the time within the specified time range
                *       associated with the last event replayed.</p>
                */
            describeReplay(args: DescribeReplayCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplayCommandOutput>;
            describeReplay(args: DescribeReplayCommandInput, cb: (err: any, data?: DescribeReplayCommandOutput) => void): void;
            describeReplay(args: DescribeReplayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplayCommandOutput) => void): void;
            /**
                * <p>Describes the specified rule.</p>
                *          <p>DescribeRule does not list the targets of a rule. To see the targets associated with a
                *       rule, use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_ListTargetsByRule.html">ListTargetsByRule</a>.</p>
                */
            describeRule(args: DescribeRuleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRuleCommandOutput>;
            describeRule(args: DescribeRuleCommandInput, cb: (err: any, data?: DescribeRuleCommandOutput) => void): void;
            describeRule(args: DescribeRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRuleCommandOutput) => void): void;
            /**
                * <p>Disables the specified rule. A disabled rule won't match any events, and won't
                *       self-trigger if it has a schedule expression.</p>
                *
                *          <p>When you disable a rule, incoming events might continue to match to the disabled rule.
                *       Allow a short period of time for changes to take effect.</p>
                */
            disableRule(args: DisableRuleCommandInput, options?: __HttpHandlerOptions): Promise<DisableRuleCommandOutput>;
            disableRule(args: DisableRuleCommandInput, cb: (err: any, data?: DisableRuleCommandOutput) => void): void;
            disableRule(args: DisableRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableRuleCommandOutput) => void): void;
            /**
                * <p>Enables the specified rule. If the rule does not exist, the operation fails.</p>
                *
                *          <p>When you enable a rule, incoming events might not immediately start matching to a newly
                *       enabled rule. Allow a short period of time for changes to take effect.</p>
                */
            enableRule(args: EnableRuleCommandInput, options?: __HttpHandlerOptions): Promise<EnableRuleCommandOutput>;
            enableRule(args: EnableRuleCommandInput, cb: (err: any, data?: EnableRuleCommandOutput) => void): void;
            enableRule(args: EnableRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableRuleCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of API destination in the account in the current Region.</p>
                */
            listApiDestinations(args: ListApiDestinationsCommandInput, options?: __HttpHandlerOptions): Promise<ListApiDestinationsCommandOutput>;
            listApiDestinations(args: ListApiDestinationsCommandInput, cb: (err: any, data?: ListApiDestinationsCommandOutput) => void): void;
            listApiDestinations(args: ListApiDestinationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApiDestinationsCommandOutput) => void): void;
            /**
                * <p>Lists your archives. You can either list all the archives or you can provide a prefix to
                *       match to the archive names. Filter parameters are exclusive.</p>
                */
            listArchives(args: ListArchivesCommandInput, options?: __HttpHandlerOptions): Promise<ListArchivesCommandOutput>;
            listArchives(args: ListArchivesCommandInput, cb: (err: any, data?: ListArchivesCommandOutput) => void): void;
            listArchives(args: ListArchivesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListArchivesCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of connections from the account.</p>
                */
            listConnections(args: ListConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<ListConnectionsCommandOutput>;
            listConnections(args: ListConnectionsCommandInput, cb: (err: any, data?: ListConnectionsCommandOutput) => void): void;
            listConnections(args: ListConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConnectionsCommandOutput) => void): void;
            /**
                * <p>Lists all the event buses in your account, including the default event bus, custom event
                *       buses, and partner event buses.</p>
                */
            listEventBuses(args: ListEventBusesCommandInput, options?: __HttpHandlerOptions): Promise<ListEventBusesCommandOutput>;
            listEventBuses(args: ListEventBusesCommandInput, cb: (err: any, data?: ListEventBusesCommandOutput) => void): void;
            listEventBuses(args: ListEventBusesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventBusesCommandOutput) => void): void;
            /**
                * <p>You can use this to see all the partner event sources that have been shared with your Amazon Web Services
                *       account. For more information about partner event sources, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html">CreateEventBus</a>.</p>
                */
            listEventSources(args: ListEventSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListEventSourcesCommandOutput>;
            listEventSources(args: ListEventSourcesCommandInput, cb: (err: any, data?: ListEventSourcesCommandOutput) => void): void;
            listEventSources(args: ListEventSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventSourcesCommandOutput) => void): void;
            /**
                * <p>An SaaS partner can use this operation to display the Amazon Web Services account ID that a particular
                *       partner event source name is associated with. This operation is not used by Amazon Web Services
                *       customers.</p>
                */
            listPartnerEventSourceAccounts(args: ListPartnerEventSourceAccountsCommandInput, options?: __HttpHandlerOptions): Promise<ListPartnerEventSourceAccountsCommandOutput>;
            listPartnerEventSourceAccounts(args: ListPartnerEventSourceAccountsCommandInput, cb: (err: any, data?: ListPartnerEventSourceAccountsCommandOutput) => void): void;
            listPartnerEventSourceAccounts(args: ListPartnerEventSourceAccountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPartnerEventSourceAccountsCommandOutput) => void): void;
            /**
                * <p>An SaaS partner can use this operation to list all the partner event source names that
                *       they have created. This operation is not used by Amazon Web Services customers.</p>
                */
            listPartnerEventSources(args: ListPartnerEventSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListPartnerEventSourcesCommandOutput>;
            listPartnerEventSources(args: ListPartnerEventSourcesCommandInput, cb: (err: any, data?: ListPartnerEventSourcesCommandOutput) => void): void;
            listPartnerEventSources(args: ListPartnerEventSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPartnerEventSourcesCommandOutput) => void): void;
            /**
                * <p>Lists your replays. You can either list all the replays or you can provide a prefix to
                *       match to the replay names. Filter parameters are exclusive.</p>
                */
            listReplays(args: ListReplaysCommandInput, options?: __HttpHandlerOptions): Promise<ListReplaysCommandOutput>;
            listReplays(args: ListReplaysCommandInput, cb: (err: any, data?: ListReplaysCommandOutput) => void): void;
            listReplays(args: ListReplaysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListReplaysCommandOutput) => void): void;
            /**
                * <p>Lists the rules for the specified target. You can see which of the rules in Amazon
                *       EventBridge can invoke a specific target in your account.</p>
                */
            listRuleNamesByTarget(args: ListRuleNamesByTargetCommandInput, options?: __HttpHandlerOptions): Promise<ListRuleNamesByTargetCommandOutput>;
            listRuleNamesByTarget(args: ListRuleNamesByTargetCommandInput, cb: (err: any, data?: ListRuleNamesByTargetCommandOutput) => void): void;
            listRuleNamesByTarget(args: ListRuleNamesByTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRuleNamesByTargetCommandOutput) => void): void;
            /**
                * <p>Lists your Amazon EventBridge rules. You can either list all the rules or you can provide
                *       a prefix to match to the rule names.</p>
                *
                *          <p>ListRules does not list the targets of a rule. To see the targets associated with a rule,
                *       use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_ListTargetsByRule.html">ListTargetsByRule</a>.</p>
                */
            listRules(args: ListRulesCommandInput, options?: __HttpHandlerOptions): Promise<ListRulesCommandOutput>;
            listRules(args: ListRulesCommandInput, cb: (err: any, data?: ListRulesCommandOutput) => void): void;
            listRules(args: ListRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRulesCommandOutput) => void): void;
            /**
                * <p>Displays the tags associated with an EventBridge resource. In EventBridge, rules and event
                *       buses can be tagged.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists the targets assigned to the specified rule.</p>
                */
            listTargetsByRule(args: ListTargetsByRuleCommandInput, options?: __HttpHandlerOptions): Promise<ListTargetsByRuleCommandOutput>;
            listTargetsByRule(args: ListTargetsByRuleCommandInput, cb: (err: any, data?: ListTargetsByRuleCommandOutput) => void): void;
            listTargetsByRule(args: ListTargetsByRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTargetsByRuleCommandOutput) => void): void;
            /**
                * <p>Sends custom events to Amazon EventBridge so that they can be matched to rules.</p>
                */
            putEvents(args: PutEventsCommandInput, options?: __HttpHandlerOptions): Promise<PutEventsCommandOutput>;
            putEvents(args: PutEventsCommandInput, cb: (err: any, data?: PutEventsCommandOutput) => void): void;
            putEvents(args: PutEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEventsCommandOutput) => void): void;
            /**
                * <p>This is used by SaaS partners to write events to a customer's partner event bus. Amazon Web Services
                *       customers do not use this operation.</p>
                */
            putPartnerEvents(args: PutPartnerEventsCommandInput, options?: __HttpHandlerOptions): Promise<PutPartnerEventsCommandOutput>;
            putPartnerEvents(args: PutPartnerEventsCommandInput, cb: (err: any, data?: PutPartnerEventsCommandOutput) => void): void;
            putPartnerEvents(args: PutPartnerEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPartnerEventsCommandOutput) => void): void;
            /**
                * <p>Running <code>PutPermission</code> permits the specified Amazon Web Services account or Amazon Web Services organization
                *       to put events to the specified <i>event bus</i>. Amazon EventBridge (CloudWatch
                *       Events) rules in your account are triggered by these events arriving to an event bus in your
                *       account. </p>
                *          <p>For another account to send events to your account, that external account must have an
                *       EventBridge rule with your account's event bus as a target.</p>
                *
                *          <p>To enable multiple Amazon Web Services accounts to put events to your event bus, run
                *         <code>PutPermission</code> once for each of these accounts. Or, if all the accounts are
                *       members of the same Amazon Web Services organization, you can run <code>PutPermission</code> once specifying
                *         <code>Principal</code> as "*" and specifying the Amazon Web Services organization ID in
                *         <code>Condition</code>, to grant permissions to all accounts in that organization.</p>
                *
                *          <p>If you grant permissions using an organization, then accounts in that organization must
                *       specify a <code>RoleArn</code> with proper permissions when they use <code>PutTarget</code> to
                *       add your account's event bus as a target. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending and
                *         Receiving Events Between Amazon Web Services Accounts</a> in the <i>Amazon EventBridge User
                *         Guide</i>.</p>
                *
                *          <p>The permission policy on the event bus cannot exceed 10 KB in size.</p>
                */
            putPermission(args: PutPermissionCommandInput, options?: __HttpHandlerOptions): Promise<PutPermissionCommandOutput>;
            putPermission(args: PutPermissionCommandInput, cb: (err: any, data?: PutPermissionCommandOutput) => void): void;
            putPermission(args: PutPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPermissionCommandOutput) => void): void;
            /**
                * <p>Creates or updates the specified rule. Rules are enabled by default, or based on value of
                *       the state. You can disable a rule using <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DisableRule.html">DisableRule</a>.</p>
                *
                *          <p>A single rule watches for events from a single event bus. Events generated by Amazon Web Services services
                *       go to your account's default event bus. Events generated by SaaS partner services or
                *       applications go to the matching partner event bus. If you have custom applications or
                *       services, you can specify whether their events go to your default event bus or a custom event
                *       bus that you have created. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html">CreateEventBus</a>.</p>
                *
                *          <p>If you are updating an existing rule, the rule is replaced with what you specify in this
                *         <code>PutRule</code> command. If you omit arguments in <code>PutRule</code>, the old values
                *       for those arguments are not kept. Instead, they are replaced with null values.</p>
                *
                *          <p>When you create or update a rule, incoming events might not immediately start matching to
                *       new or updated rules. Allow a short period of time for changes to take effect.</p>
                *
                *          <p>A rule must contain at least an EventPattern or ScheduleExpression. Rules with
                *       EventPatterns are triggered when a matching event is observed. Rules with ScheduleExpressions
                *       self-trigger based on the given schedule. A rule can have both an EventPattern and a
                *       ScheduleExpression, in which case the rule triggers on matching events as well as on a
                *       schedule.</p>
                *
                *          <p>When you initially create a rule, you can optionally assign one or more tags to the rule.
                *       Tags can help you organize and categorize your resources. You can also use them to scope user
                *       permissions, by granting a user permission to access or change only rules with certain tag
                *       values. To use the <code>PutRule</code> operation and assign tags, you must have both the
                *         <code>events:PutRule</code> and <code>events:TagResource</code> permissions.</p>
                *          <p>If you are updating an existing rule, any tags you specify in the <code>PutRule</code>
                *       operation are ignored. To update the tags of an existing rule, use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_TagResource.html">TagResource</a> and <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
                *
                *          <p>Most services in Amazon Web Services treat : or / as the same character in Amazon Resource Names (ARNs).
                *       However, EventBridge uses an exact match in event patterns and rules. Be sure to use the
                *       correct ARN characters when creating event patterns so that they match the ARN syntax in the
                *       event you want to match.</p>
                *
                *          <p>In EventBridge, it is possible to create rules that lead to infinite loops, where a rule
                *       is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket,
                *       and trigger software to change them to the desired state. If the rule is not written
                *       carefully, the subsequent change to the ACLs fires the rule again, creating an infinite
                *       loop.</p>
                *          <p>To prevent this, write the rules so that the triggered actions do not re-fire the same
                *       rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead
                *       of after any change. </p>
                *          <p>An infinite loop can quickly cause higher than expected charges. We recommend that you use
                *       budgeting, which alerts you when charges exceed your specified limit. For more information,
                *       see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing Your Costs with
                *         Budgets</a>.</p>
                */
            putRule(args: PutRuleCommandInput, options?: __HttpHandlerOptions): Promise<PutRuleCommandOutput>;
            putRule(args: PutRuleCommandInput, cb: (err: any, data?: PutRuleCommandOutput) => void): void;
            putRule(args: PutRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRuleCommandOutput) => void): void;
            /**
                * <p>Adds the specified targets to the specified rule, or updates the targets if they are
                *       already associated with the rule.</p>
                *          <p>Targets are the resources that are invoked when a rule is triggered.</p>
                *          <p>You can configure the following as targets for Events:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-api-destinations.html">API
                *           destination</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Amazon API Gateway REST API endpoints</p>
                *             </li>
                *             <li>
                *                <p>API Gateway</p>
                *             </li>
                *             <li>
                *                <p>Batch job queue</p>
                *             </li>
                *             <li>
                *                <p>CloudWatch Logs group</p>
                *             </li>
                *             <li>
                *                <p>CodeBuild project</p>
                *             </li>
                *             <li>
                *                <p>CodePipeline</p>
                *             </li>
                *             <li>
                *                <p>Amazon EC2 <code>CreateSnapshot</code> API call</p>
                *             </li>
                *             <li>
                *                <p>Amazon EC2 <code>RebootInstances</code> API call</p>
                *             </li>
                *             <li>
                *                <p>Amazon EC2 <code>StopInstances</code> API call</p>
                *             </li>
                *             <li>
                *                <p>Amazon EC2 <code>TerminateInstances</code> API call</p>
                *             </li>
                *             <li>
                *                <p>Amazon ECS tasks</p>
                *             </li>
                *             <li>
                *                <p>Event bus in a different Amazon Web Services account or Region.</p>
                *                <p>You can use an event bus in the US East (N. Virginia) us-east-1, US West (Oregon)
                *           us-west-2, or Europe (Ireland) eu-west-1 Regions as a target for a rule.</p>
                *             </li>
                *             <li>
                *                <p>Firehose delivery stream (Kinesis Data Firehose)</p>
                *             </li>
                *             <li>
                *                <p>Inspector assessment template (Amazon Inspector)</p>
                *             </li>
                *             <li>
                *                <p>Kinesis stream (Kinesis Data Stream)</p>
                *             </li>
                *             <li>
                *                <p>Lambda function</p>
                *             </li>
                *             <li>
                *                <p>Redshift clusters (Data API statement execution)</p>
                *             </li>
                *             <li>
                *                <p>Amazon SNS topic</p>
                *             </li>
                *             <li>
                *                <p>Amazon SQS queues (includes FIFO queues</p>
                *             </li>
                *             <li>
                *                <p>SSM Automation</p>
                *             </li>
                *             <li>
                *                <p>SSM OpsItem</p>
                *             </li>
                *             <li>
                *                <p>SSM Run Command</p>
                *             </li>
                *             <li>
                *                <p>Step Functions state machines</p>
                *             </li>
                *          </ul>
                *
                *          <p>Creating rules with built-in targets is supported only in the Management Console. The
                *       built-in targets are <code>EC2 CreateSnapshot API call</code>, <code>EC2 RebootInstances API
                *         call</code>, <code>EC2 StopInstances API call</code>, and <code>EC2 TerminateInstances API
                *         call</code>. </p>
                *
                *          <p>For some target types, <code>PutTargets</code> provides target-specific parameters. If the
                *       target is a Kinesis data stream, you can optionally specify which shard the event goes to by
                *       using the <code>KinesisParameters</code> argument. To invoke a command on multiple EC2
                *       instances with one rule, you can use the <code>RunCommandParameters</code> field.</p>
                *
                *          <p>To be able to make API calls against the resources that you own, Amazon EventBridge
                *       needs the appropriate permissions. For Lambda and Amazon SNS
                *       resources, EventBridge relies on resource-based policies. For EC2 instances, Kinesis Data Streams,
                *       Step Functions state machines and API Gateway REST APIs, EventBridge relies on
                *       IAM roles that you specify in the <code>RoleARN</code> argument in <code>PutTargets</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html">Authentication
                *         and Access Control</a> in the <i>Amazon EventBridge User Guide</i>.</p>
                *
                *          <p>If another Amazon Web Services account is in the same region and has granted you permission (using
                *         <code>PutPermission</code>), you can send events to that account. Set that account's event
                *       bus as a target of the rules in your account. To send the matched events to the other account,
                *       specify that account's event bus as the <code>Arn</code> value when you run
                *         <code>PutTargets</code>. If your account sends events to another account, your account is
                *       charged for each sent event. Each event sent to another account is charged as a custom event.
                *       The account receiving the event is not charged. For more information, see <a href="http://aws.amazon.com/eventbridge/pricing/">Amazon EventBridge
                *         Pricing</a>.</p>
                *
                *          <note>
                *             <p>
                *                <code>Input</code>, <code>InputPath</code>, and <code>InputTransformer</code> are not
                *         available with <code>PutTarget</code> if the target is an event bus of a different Amazon Web Services
                *         account.</p>
                *          </note>
                *
                *          <p>If you are setting the event bus of another account as the target, and that account
                *       granted permission to your account through an organization instead of directly by the account
                *       ID, then you must specify a <code>RoleArn</code> with proper permissions in the
                *         <code>Target</code> structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending and
                *           Receiving Events Between Amazon Web Services Accounts</a> in the <i>Amazon EventBridge User
                *         Guide</i>.</p>
                *
                *          <p>For more information about enabling cross-account events, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutPermission.html">PutPermission</a>.</p>
                *
                *          <p>
                *             <b>Input</b>, <b>InputPath</b>, and
                *         <b>InputTransformer</b> are mutually exclusive and optional
                *       parameters of a target. When a rule is triggered due to a matched event:</p>
                *
                *          <ul>
                *             <li>
                *                <p>If none of the following arguments are specified for a target, then the entire event
                *           is passed to the target in JSON format (unless the target is Amazon EC2 Run Command or
                *           Amazon ECS task, in which case nothing from the event is passed to the target).</p>
                *             </li>
                *             <li>
                *                <p>If <b>Input</b> is specified in the form of valid JSON, then
                *           the matched event is overridden with this constant.</p>
                *             </li>
                *             <li>
                *                <p>If <b>InputPath</b> is specified in the form of JSONPath
                *           (for example, <code>$.detail</code>), then only the part of the event specified in the
                *           path is passed to the target (for example, only the detail part of the event is
                *           passed).</p>
                *             </li>
                *             <li>
                *                <p>If <b>InputTransformer</b> is specified, then one or more
                *           specified JSONPaths are extracted from the event and used as values in a template that you
                *           specify as the input to the target.</p>
                *             </li>
                *          </ul>
                *
                *          <p>When you specify <code>InputPath</code> or <code>InputTransformer</code>, you must use
                *       JSON dot notation, not bracket notation.</p>
                *
                *          <p>When you add targets to a rule and the associated rule triggers soon after, new or updated
                *       targets might not be immediately invoked. Allow a short period of time for changes to take
                *       effect.</p>
                *
                *          <p>This action can partially fail if too many requests are made at the same time. If that
                *       happens, <code>FailedEntryCount</code> is non-zero in the response and each entry in
                *         <code>FailedEntries</code> provides the ID of the failed target and the error code.</p>
                */
            putTargets(args: PutTargetsCommandInput, options?: __HttpHandlerOptions): Promise<PutTargetsCommandOutput>;
            putTargets(args: PutTargetsCommandInput, cb: (err: any, data?: PutTargetsCommandOutput) => void): void;
            putTargets(args: PutTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutTargetsCommandOutput) => void): void;
            /**
                * <p>Revokes the permission of another Amazon Web Services account to be able to put events to the specified
                *       event bus. Specify the account to revoke by the <code>StatementId</code> value that you
                *       associated with the account when you granted it permission with <code>PutPermission</code>.
                *       You can find the <code>StatementId</code> by using <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DescribeEventBus.html">DescribeEventBus</a>.</p>
                */
            removePermission(args: RemovePermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemovePermissionCommandOutput>;
            removePermission(args: RemovePermissionCommandInput, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            removePermission(args: RemovePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemovePermissionCommandOutput) => void): void;
            /**
                * <p>Removes the specified targets from the specified rule. When the rule is triggered, those
                *       targets are no longer be invoked.</p>
                *
                *          <p>When you remove a target, when the associated rule triggers, removed targets might
                *       continue to be invoked. Allow a short period of time for changes to take effect.</p>
                *
                *          <p>This action can partially fail if too many requests are made at the same time. If that
                *       happens, <code>FailedEntryCount</code> is non-zero in the response and each entry in
                *         <code>FailedEntries</code> provides the ID of the failed target and the error code.</p>
                */
            removeTargets(args: RemoveTargetsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTargetsCommandOutput>;
            removeTargets(args: RemoveTargetsCommandInput, cb: (err: any, data?: RemoveTargetsCommandOutput) => void): void;
            removeTargets(args: RemoveTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTargetsCommandOutput) => void): void;
            /**
                * <p>Starts the specified replay. Events are not necessarily replayed in the exact same order
                *       that they were added to the archive. A replay processes events to replay based on the time in
                *       the event, and replays them using 1 minute intervals. If you specify an
                *         <code>EventStartTime</code> and an <code>EventEndTime</code> that covers a 20 minute time
                *       range, the events are replayed from the first minute of that 20 minute range first. Then the
                *       events from the second minute are replayed. You can use <code>DescribeReplay</code> to
                *       determine the progress of a replay. The value returned for <code>EventLastReplayedTime</code>
                *       indicates the time within the specified time range associated with the last event
                *       replayed.</p>
                */
            startReplay(args: StartReplayCommandInput, options?: __HttpHandlerOptions): Promise<StartReplayCommandOutput>;
            startReplay(args: StartReplayCommandInput, cb: (err: any, data?: StartReplayCommandOutput) => void): void;
            startReplay(args: StartReplayCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartReplayCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified EventBridge resource. Tags can
                *       help you organize and categorize your resources. You can also use them to scope user
                *       permissions by granting a user permission to access or change only resources with certain tag
                *       values. In EventBridge, rules and event buses can be tagged.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of
                *       characters.</p>
                *          <p>You can use the <code>TagResource</code> action with a resource that already has tags. If
                *       you specify a new tag key, this tag is appended to the list of tags associated with the
                *       resource. If you specify a tag key that is already associated with the resource, the new tag
                *       value that you specify replaces the previous value for that tag.</p>
                *          <p>You can associate as many as 50 tags with a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Tests whether the specified event pattern matches the provided event.</p>
                *          <p>Most services in Amazon Web Services treat : or / as the same character in Amazon Resource Names (ARNs).
                *       However, EventBridge uses an exact match in event patterns and rules. Be sure to use the
                *       correct ARN characters when creating event patterns so that they match the ARN syntax in the
                *       event you want to match.</p>
                */
            testEventPattern(args: TestEventPatternCommandInput, options?: __HttpHandlerOptions): Promise<TestEventPatternCommandOutput>;
            testEventPattern(args: TestEventPatternCommandInput, cb: (err: any, data?: TestEventPatternCommandOutput) => void): void;
            testEventPattern(args: TestEventPatternCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestEventPatternCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified EventBridge resource. In Amazon EventBridge
                *       (CloudWatch Events), rules and event buses can be tagged.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an API destination.</p>
                */
            updateApiDestination(args: UpdateApiDestinationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApiDestinationCommandOutput>;
            updateApiDestination(args: UpdateApiDestinationCommandInput, cb: (err: any, data?: UpdateApiDestinationCommandOutput) => void): void;
            updateApiDestination(args: UpdateApiDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApiDestinationCommandOutput) => void): void;
            /**
                * <p>Updates the specified archive.</p>
                */
            updateArchive(args: UpdateArchiveCommandInput, options?: __HttpHandlerOptions): Promise<UpdateArchiveCommandOutput>;
            updateArchive(args: UpdateArchiveCommandInput, cb: (err: any, data?: UpdateArchiveCommandOutput) => void): void;
            updateArchive(args: UpdateArchiveCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateArchiveCommandOutput) => void): void;
            /**
                * <p>Updates settings for a connection.</p>
                */
            updateConnection(args: UpdateConnectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectionCommandOutput>;
            updateConnection(args: UpdateConnectionCommandInput, cb: (err: any, data?: UpdateConnectionCommandOutput) => void): void;
            updateConnection(args: UpdateConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectionCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { ActivateEventSourceCommandInput, ActivateEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ActivateEventSourceCommand";
    import { CancelReplayCommandInput, CancelReplayCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CancelReplayCommand";
    import { CreateApiDestinationCommandInput, CreateApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateApiDestinationCommand";
    import { CreateArchiveCommandInput, CreateArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateArchiveCommand";
    import { CreateConnectionCommandInput, CreateConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateConnectionCommand";
    import { CreateEventBusCommandInput, CreateEventBusCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateEventBusCommand";
    import { CreatePartnerEventSourceCommandInput, CreatePartnerEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreatePartnerEventSourceCommand";
    import { DeactivateEventSourceCommandInput, DeactivateEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeactivateEventSourceCommand";
    import { DeauthorizeConnectionCommandInput, DeauthorizeConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeauthorizeConnectionCommand";
    import { DeleteApiDestinationCommandInput, DeleteApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteApiDestinationCommand";
    import { DeleteArchiveCommandInput, DeleteArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteArchiveCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteConnectionCommand";
    import { DeleteEventBusCommandInput, DeleteEventBusCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteEventBusCommand";
    import { DeletePartnerEventSourceCommandInput, DeletePartnerEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeletePartnerEventSourceCommand";
    import { DeleteRuleCommandInput, DeleteRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteRuleCommand";
    import { DescribeApiDestinationCommandInput, DescribeApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeApiDestinationCommand";
    import { DescribeArchiveCommandInput, DescribeArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeArchiveCommand";
    import { DescribeConnectionCommandInput, DescribeConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeConnectionCommand";
    import { DescribeEventBusCommandInput, DescribeEventBusCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeEventBusCommand";
    import { DescribeEventSourceCommandInput, DescribeEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeEventSourceCommand";
    import { DescribePartnerEventSourceCommandInput, DescribePartnerEventSourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribePartnerEventSourceCommand";
    import { DescribeReplayCommandInput, DescribeReplayCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeReplayCommand";
    import { DescribeRuleCommandInput, DescribeRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeRuleCommand";
    import { DisableRuleCommandInput, DisableRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DisableRuleCommand";
    import { EnableRuleCommandInput, EnableRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/EnableRuleCommand";
    import { ListApiDestinationsCommandInput, ListApiDestinationsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListApiDestinationsCommand";
    import { ListArchivesCommandInput, ListArchivesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListArchivesCommand";
    import { ListConnectionsCommandInput, ListConnectionsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListConnectionsCommand";
    import { ListEventBusesCommandInput, ListEventBusesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListEventBusesCommand";
    import { ListEventSourcesCommandInput, ListEventSourcesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListEventSourcesCommand";
    import { ListPartnerEventSourceAccountsCommandInput, ListPartnerEventSourceAccountsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListPartnerEventSourceAccountsCommand";
    import { ListPartnerEventSourcesCommandInput, ListPartnerEventSourcesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListPartnerEventSourcesCommand";
    import { ListReplaysCommandInput, ListReplaysCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListReplaysCommand";
    import { ListRuleNamesByTargetCommandInput, ListRuleNamesByTargetCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListRuleNamesByTargetCommand";
    import { ListRulesCommandInput, ListRulesCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListRulesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetsByRuleCommandInput, ListTargetsByRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListTargetsByRuleCommand";
    import { PutEventsCommandInput, PutEventsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutEventsCommand";
    import { PutPartnerEventsCommandInput, PutPartnerEventsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutPartnerEventsCommand";
    import { PutPermissionCommandInput, PutPermissionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutPermissionCommand";
    import { PutRuleCommandInput, PutRuleCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutRuleCommand";
    import { PutTargetsCommandInput, PutTargetsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutTargetsCommand";
    import { RemovePermissionCommandInput, RemovePermissionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/RemovePermissionCommand";
    import { RemoveTargetsCommandInput, RemoveTargetsCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/RemoveTargetsCommand";
    import { StartReplayCommandInput, StartReplayCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/StartReplayCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/TagResourceCommand";
    import { TestEventPatternCommandInput, TestEventPatternCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/TestEventPatternCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UntagResourceCommand";
    import { UpdateApiDestinationCommandInput, UpdateApiDestinationCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateApiDestinationCommand";
    import { UpdateArchiveCommandInput, UpdateArchiveCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateArchiveCommand";
    import { UpdateConnectionCommandInput, UpdateConnectionCommandOutput } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateConnectionCommand";
    export type ServiceInputTypes = ActivateEventSourceCommandInput | CancelReplayCommandInput | CreateApiDestinationCommandInput | CreateArchiveCommandInput | CreateConnectionCommandInput | CreateEventBusCommandInput | CreatePartnerEventSourceCommandInput | DeactivateEventSourceCommandInput | DeauthorizeConnectionCommandInput | DeleteApiDestinationCommandInput | DeleteArchiveCommandInput | DeleteConnectionCommandInput | DeleteEventBusCommandInput | DeletePartnerEventSourceCommandInput | DeleteRuleCommandInput | DescribeApiDestinationCommandInput | DescribeArchiveCommandInput | DescribeConnectionCommandInput | DescribeEventBusCommandInput | DescribeEventSourceCommandInput | DescribePartnerEventSourceCommandInput | DescribeReplayCommandInput | DescribeRuleCommandInput | DisableRuleCommandInput | EnableRuleCommandInput | ListApiDestinationsCommandInput | ListArchivesCommandInput | ListConnectionsCommandInput | ListEventBusesCommandInput | ListEventSourcesCommandInput | ListPartnerEventSourceAccountsCommandInput | ListPartnerEventSourcesCommandInput | ListReplaysCommandInput | ListRuleNamesByTargetCommandInput | ListRulesCommandInput | ListTagsForResourceCommandInput | ListTargetsByRuleCommandInput | PutEventsCommandInput | PutPartnerEventsCommandInput | PutPermissionCommandInput | PutRuleCommandInput | PutTargetsCommandInput | RemovePermissionCommandInput | RemoveTargetsCommandInput | StartReplayCommandInput | TagResourceCommandInput | TestEventPatternCommandInput | UntagResourceCommandInput | UpdateApiDestinationCommandInput | UpdateArchiveCommandInput | UpdateConnectionCommandInput;
    export type ServiceOutputTypes = ActivateEventSourceCommandOutput | CancelReplayCommandOutput | CreateApiDestinationCommandOutput | CreateArchiveCommandOutput | CreateConnectionCommandOutput | CreateEventBusCommandOutput | CreatePartnerEventSourceCommandOutput | DeactivateEventSourceCommandOutput | DeauthorizeConnectionCommandOutput | DeleteApiDestinationCommandOutput | DeleteArchiveCommandOutput | DeleteConnectionCommandOutput | DeleteEventBusCommandOutput | DeletePartnerEventSourceCommandOutput | DeleteRuleCommandOutput | DescribeApiDestinationCommandOutput | DescribeArchiveCommandOutput | DescribeConnectionCommandOutput | DescribeEventBusCommandOutput | DescribeEventSourceCommandOutput | DescribePartnerEventSourceCommandOutput | DescribeReplayCommandOutput | DescribeRuleCommandOutput | DisableRuleCommandOutput | EnableRuleCommandOutput | ListApiDestinationsCommandOutput | ListArchivesCommandOutput | ListConnectionsCommandOutput | ListEventBusesCommandOutput | ListEventSourcesCommandOutput | ListPartnerEventSourceAccountsCommandOutput | ListPartnerEventSourcesCommandOutput | ListReplaysCommandOutput | ListRuleNamesByTargetCommandOutput | ListRulesCommandOutput | ListTagsForResourceCommandOutput | ListTargetsByRuleCommandOutput | PutEventsCommandOutput | PutPartnerEventsCommandOutput | PutPermissionCommandOutput | PutRuleCommandOutput | PutTargetsCommandOutput | RemovePermissionCommandOutput | RemoveTargetsCommandOutput | StartReplayCommandOutput | TagResourceCommandOutput | TestEventPatternCommandOutput | UntagResourceCommandOutput | UpdateApiDestinationCommandOutput | UpdateArchiveCommandOutput | UpdateConnectionCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CloudWatchEventsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CloudWatchEventsClient class constructor that set the region, credentials and other options.
        */
    export interface CloudWatchEventsClientConfig extends CloudWatchEventsClientConfigType {
    }
    type CloudWatchEventsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CloudWatchEventsClient class. This is resolved and normalized from the {@link CloudWatchEventsClientConfig | constructor configuration interface}.
        */
    export interface CloudWatchEventsClientResolvedConfig extends CloudWatchEventsClientResolvedConfigType {
    }
    /**
        * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your
        *       resources change state, they automatically send events to an event stream. You can create
        *       rules that match selected events in the stream and route them to targets to take action. You
        *       can also use rules to take action on a predetermined schedule. For example, you can configure
        *       rules to:</p>
        *          <ul>
        *             <li>
        *                <p>Automatically invoke an Lambda function to update DNS entries when an event
        *           notifies you that Amazon EC2 instance enters the running state.</p>
        *             </li>
        *             <li>
        *                <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for
        *           detailed analysis of potential security or availability risks.</p>
        *             </li>
        *             <li>
        *                <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS
        *           volume.</p>
        *             </li>
        *          </ul>
        *          <p>For more information about the features of Amazon EventBridge, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide">Amazon EventBridge User
        *         Guide</a>.</p>
        */
    export class CloudWatchEventsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CloudWatchEventsClientResolvedConfig> {
            /**
                * The resolved configuration of CloudWatchEventsClient class. This is resolved and normalized from the {@link CloudWatchEventsClientConfig | constructor configuration interface}.
                */
            readonly config: CloudWatchEventsClientResolvedConfig;
            constructor(configuration: CloudWatchEventsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ActivateEventSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ActivateEventSourceRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ActivateEventSourceCommandInput extends ActivateEventSourceRequest {
    }
    export interface ActivateEventSourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Activates a partner event source that has been deactivated. Once activated, your matching
        *       event bus will start receiving events from the event source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ActivateEventSourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ActivateEventSourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ActivateEventSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ActivateEventSourceCommandInput} for command's `input` shape.
        * @see {@link ActivateEventSourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ActivateEventSourceCommand extends $Command<ActivateEventSourceCommandInput, ActivateEventSourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ActivateEventSourceCommandInput;
            constructor(input: ActivateEventSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ActivateEventSourceCommandInput, ActivateEventSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CancelReplayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { CancelReplayRequest, CancelReplayResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface CancelReplayCommandInput extends CancelReplayRequest {
    }
    export interface CancelReplayCommandOutput extends CancelReplayResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified replay.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, CancelReplayCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, CancelReplayCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new CancelReplayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelReplayCommandInput} for command's `input` shape.
        * @see {@link CancelReplayCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class CancelReplayCommand extends $Command<CancelReplayCommandInput, CancelReplayCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: CancelReplayCommandInput;
            constructor(input: CancelReplayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelReplayCommandInput, CancelReplayCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateApiDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { CreateApiDestinationRequest, CreateApiDestinationResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface CreateApiDestinationCommandInput extends CreateApiDestinationRequest {
    }
    export interface CreateApiDestinationCommandOutput extends CreateApiDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an API destination, which is an HTTP invocation endpoint configured as a target
        *       for events.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, CreateApiDestinationCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, CreateApiDestinationCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new CreateApiDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApiDestinationCommandInput} for command's `input` shape.
        * @see {@link CreateApiDestinationCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class CreateApiDestinationCommand extends $Command<CreateApiDestinationCommandInput, CreateApiDestinationCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: CreateApiDestinationCommandInput;
            constructor(input: CreateApiDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApiDestinationCommandInput, CreateApiDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateArchiveCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { CreateArchiveRequest, CreateArchiveResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface CreateArchiveCommandInput extends CreateArchiveRequest {
    }
    export interface CreateArchiveCommandOutput extends CreateArchiveResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an archive of events with the specified settings. When you create an archive,
        *       incoming events might not immediately start being sent to the archive. Allow a short period of
        *       time for changes to take effect. If you do not specify a pattern to filter events sent to the
        *       archive, all events are sent to the archive except replayed events. Replayed events are not
        *       sent to an archive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, CreateArchiveCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, CreateArchiveCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new CreateArchiveCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateArchiveCommandInput} for command's `input` shape.
        * @see {@link CreateArchiveCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class CreateArchiveCommand extends $Command<CreateArchiveCommandInput, CreateArchiveCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: CreateArchiveCommandInput;
            constructor(input: CreateArchiveCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateArchiveCommandInput, CreateArchiveCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { CreateConnectionRequest, CreateConnectionResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface CreateConnectionCommandInput extends CreateConnectionRequest {
    }
    export interface CreateConnectionCommandOutput extends CreateConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a connection. A connection defines the authorization type and credentials to use
        *       for authorization with an API destination HTTP endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, CreateConnectionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, CreateConnectionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new CreateConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectionCommandInput} for command's `input` shape.
        * @see {@link CreateConnectionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class CreateConnectionCommand extends $Command<CreateConnectionCommandInput, CreateConnectionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: CreateConnectionCommandInput;
            constructor(input: CreateConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectionCommandInput, CreateConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreateEventBusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { CreateEventBusRequest, CreateEventBusResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface CreateEventBusCommandInput extends CreateEventBusRequest {
    }
    export interface CreateEventBusCommandOutput extends CreateEventBusResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new event bus within your account. This can be a custom event bus which you can
        *       use to receive events from your custom applications and services, or it can be a partner event
        *       bus which can be matched to a partner event source.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, CreateEventBusCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, CreateEventBusCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new CreateEventBusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEventBusCommandInput} for command's `input` shape.
        * @see {@link CreateEventBusCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class CreateEventBusCommand extends $Command<CreateEventBusCommandInput, CreateEventBusCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: CreateEventBusCommandInput;
            constructor(input: CreateEventBusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEventBusCommandInput, CreateEventBusCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/CreatePartnerEventSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { CreatePartnerEventSourceRequest, CreatePartnerEventSourceResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface CreatePartnerEventSourceCommandInput extends CreatePartnerEventSourceRequest {
    }
    export interface CreatePartnerEventSourceCommandOutput extends CreatePartnerEventSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Called by an SaaS partner to create a partner event source. This operation is not used by
        *       Amazon Web Services customers.</p>
        *          <p>Each partner event source can be used by one Amazon Web Services account to create a matching partner
        *       event bus in that Amazon Web Services account. A SaaS partner must create one partner event source for each
        *       Amazon Web Services account that wants to receive those event types. </p>
        *          <p>A partner event source creates events based on resources within the SaaS partner's service
        *       or application.</p>
        *          <p>An Amazon Web Services account that creates a partner event bus that matches the partner event source can
        *       use that event bus to receive events from the partner, and then process them using Amazon Web Services Events
        *       rules and targets.</p>
        *          <p>Partner event source names follow this format:</p>
        *          <p>
        *             <code>
        *                <i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i>
        *             </code>
        *          </p>
        *          <p>
        *             <i>partner_name</i> is determined during partner registration and identifies
        *       the partner to Amazon Web Services customers. <i>event_namespace</i> is determined by the
        *       partner and is a way for the partner to categorize their events.
        *         <i>event_name</i> is determined by the partner, and should uniquely identify
        *       an event-generating resource within the partner system. The combination of
        *         <i>event_namespace</i> and <i>event_name</i> should help Amazon Web Services
        *       customers decide whether to create an event bus to receive these events.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, CreatePartnerEventSourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, CreatePartnerEventSourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new CreatePartnerEventSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePartnerEventSourceCommandInput} for command's `input` shape.
        * @see {@link CreatePartnerEventSourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class CreatePartnerEventSourceCommand extends $Command<CreatePartnerEventSourceCommandInput, CreatePartnerEventSourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: CreatePartnerEventSourceCommandInput;
            constructor(input: CreatePartnerEventSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePartnerEventSourceCommandInput, CreatePartnerEventSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeactivateEventSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeactivateEventSourceRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeactivateEventSourceCommandInput extends DeactivateEventSourceRequest {
    }
    export interface DeactivateEventSourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>You can use this operation to temporarily stop receiving events from the specified partner
        *       event source. The matching event bus is not deleted. </p>
        *          <p>When you deactivate a partner event source, the source goes into PENDING state. If it
        *       remains in PENDING state for more than two weeks, it is deleted.</p>
        *          <p>To activate a deactivated partner event source, use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_ActivateEventSource.html">ActivateEventSource</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeactivateEventSourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeactivateEventSourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeactivateEventSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeactivateEventSourceCommandInput} for command's `input` shape.
        * @see {@link DeactivateEventSourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeactivateEventSourceCommand extends $Command<DeactivateEventSourceCommandInput, DeactivateEventSourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeactivateEventSourceCommandInput;
            constructor(input: DeactivateEventSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeactivateEventSourceCommandInput, DeactivateEventSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeauthorizeConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeauthorizeConnectionRequest, DeauthorizeConnectionResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeauthorizeConnectionCommandInput extends DeauthorizeConnectionRequest {
    }
    export interface DeauthorizeConnectionCommandOutput extends DeauthorizeConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Removes all authorization parameters from the connection. This lets you remove the secret
        *       from the connection so you can reuse it without having to create a new connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeauthorizeConnectionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeauthorizeConnectionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeauthorizeConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeauthorizeConnectionCommandInput} for command's `input` shape.
        * @see {@link DeauthorizeConnectionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeauthorizeConnectionCommand extends $Command<DeauthorizeConnectionCommandInput, DeauthorizeConnectionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeauthorizeConnectionCommandInput;
            constructor(input: DeauthorizeConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeauthorizeConnectionCommandInput, DeauthorizeConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteApiDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeleteApiDestinationRequest, DeleteApiDestinationResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeleteApiDestinationCommandInput extends DeleteApiDestinationRequest {
    }
    export interface DeleteApiDestinationCommandOutput extends DeleteApiDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified API destination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeleteApiDestinationCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeleteApiDestinationCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeleteApiDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApiDestinationCommandInput} for command's `input` shape.
        * @see {@link DeleteApiDestinationCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeleteApiDestinationCommand extends $Command<DeleteApiDestinationCommandInput, DeleteApiDestinationCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeleteApiDestinationCommandInput;
            constructor(input: DeleteApiDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApiDestinationCommandInput, DeleteApiDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteArchiveCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeleteArchiveRequest, DeleteArchiveResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeleteArchiveCommandInput extends DeleteArchiveRequest {
    }
    export interface DeleteArchiveCommandOutput extends DeleteArchiveResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified archive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeleteArchiveCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeleteArchiveCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeleteArchiveCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteArchiveCommandInput} for command's `input` shape.
        * @see {@link DeleteArchiveCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeleteArchiveCommand extends $Command<DeleteArchiveCommandInput, DeleteArchiveCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeleteArchiveCommandInput;
            constructor(input: DeleteArchiveCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteArchiveCommandInput, DeleteArchiveCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeleteConnectionRequest, DeleteConnectionResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeleteConnectionCommandInput extends DeleteConnectionRequest {
    }
    export interface DeleteConnectionCommandOutput extends DeleteConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeleteConnectionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeleteConnectionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeleteConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeleteConnectionCommand extends $Command<DeleteConnectionCommandInput, DeleteConnectionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeleteConnectionCommandInput;
            constructor(input: DeleteConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectionCommandInput, DeleteConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteEventBusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeleteEventBusRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeleteEventBusCommandInput extends DeleteEventBusRequest {
    }
    export interface DeleteEventBusCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified custom event bus or partner event bus. All rules associated with
        *       this event bus need to be deleted. You can't delete your account's default event bus.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeleteEventBusCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeleteEventBusCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeleteEventBusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventBusCommandInput} for command's `input` shape.
        * @see {@link DeleteEventBusCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeleteEventBusCommand extends $Command<DeleteEventBusCommandInput, DeleteEventBusCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeleteEventBusCommandInput;
            constructor(input: DeleteEventBusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventBusCommandInput, DeleteEventBusCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeletePartnerEventSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeletePartnerEventSourceRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeletePartnerEventSourceCommandInput extends DeletePartnerEventSourceRequest {
    }
    export interface DeletePartnerEventSourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>This operation is used by SaaS partners to delete a partner event source. This operation
        *       is not used by Amazon Web Services customers.</p>
        *          <p>When you delete an event source, the status of the corresponding partner event bus in the
        *       Amazon Web Services customer account becomes DELETED.</p>
        *          <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeletePartnerEventSourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeletePartnerEventSourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeletePartnerEventSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePartnerEventSourceCommandInput} for command's `input` shape.
        * @see {@link DeletePartnerEventSourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeletePartnerEventSourceCommand extends $Command<DeletePartnerEventSourceCommandInput, DeletePartnerEventSourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeletePartnerEventSourceCommandInput;
            constructor(input: DeletePartnerEventSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePartnerEventSourceCommandInput, DeletePartnerEventSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DeleteRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DeleteRuleRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DeleteRuleCommandInput extends DeleteRuleRequest {
    }
    export interface DeleteRuleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified rule.</p>
        *          <p>Before you can delete the rule, you must remove all targets, using <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_RemoveTargets.html">RemoveTargets</a>.</p>
        *
        *          <p>When you delete a rule, incoming events might continue to match to the deleted rule. Allow
        *       a short period of time for changes to take effect.</p>
        *
        *          <p>If you call delete rule multiple times for the same rule, all calls will succeed. When you
        *       call delete rule for a non-existent custom eventbus, <code>ResourceNotFoundException</code> is
        *       returned.</p>
        *
        *          <p>Managed rules are rules created and managed by another Amazon Web Services service on your behalf. These
        *       rules are created by those other Amazon Web Services services to support functionality in those services. You
        *       can delete these rules using the <code>Force</code> option, but you should do so only if you
        *       are sure the other service is not still using that rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DeleteRuleCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DeleteRuleCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DeleteRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DeleteRuleCommand extends $Command<DeleteRuleCommandInput, DeleteRuleCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DeleteRuleCommandInput;
            constructor(input: DeleteRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRuleCommandInput, DeleteRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeApiDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeApiDestinationRequest, DescribeApiDestinationResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeApiDestinationCommandInput extends DescribeApiDestinationRequest {
    }
    export interface DescribeApiDestinationCommandOutput extends DescribeApiDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details about an API destination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeApiDestinationCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeApiDestinationCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeApiDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApiDestinationCommandInput} for command's `input` shape.
        * @see {@link DescribeApiDestinationCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeApiDestinationCommand extends $Command<DescribeApiDestinationCommandInput, DescribeApiDestinationCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeApiDestinationCommandInput;
            constructor(input: DescribeApiDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApiDestinationCommandInput, DescribeApiDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeArchiveCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeArchiveRequest, DescribeArchiveResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeArchiveCommandInput extends DescribeArchiveRequest {
    }
    export interface DescribeArchiveCommandOutput extends DescribeArchiveResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details about an archive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeArchiveCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeArchiveCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeArchiveCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeArchiveCommandInput} for command's `input` shape.
        * @see {@link DescribeArchiveCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeArchiveCommand extends $Command<DescribeArchiveCommandInput, DescribeArchiveCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeArchiveCommandInput;
            constructor(input: DescribeArchiveCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeArchiveCommandInput, DescribeArchiveCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeConnectionRequest, DescribeConnectionResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeConnectionCommandInput extends DescribeConnectionRequest {
    }
    export interface DescribeConnectionCommandOutput extends DescribeConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details about a connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeConnectionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeConnectionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConnectionCommandInput} for command's `input` shape.
        * @see {@link DescribeConnectionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeConnectionCommand extends $Command<DescribeConnectionCommandInput, DescribeConnectionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeConnectionCommandInput;
            constructor(input: DescribeConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConnectionCommandInput, DescribeConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeEventBusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeEventBusRequest, DescribeEventBusResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeEventBusCommandInput extends DescribeEventBusRequest {
    }
    export interface DescribeEventBusCommandOutput extends DescribeEventBusResponse, __MetadataBearer {
    }
    /**
        * <p>Displays details about an event bus in your account. This can include the external Amazon Web Services
        *       accounts that are permitted to write events to your default event bus, and the associated
        *       policy. For custom event buses and partner event buses, it displays the name, ARN, policy,
        *       state, and creation time.</p>
        *          <p> To enable your account to receive events from other accounts on its default event bus,
        *       use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutPermission.html">PutPermission</a>.</p>
        *          <p>For more information about partner event buses, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html">CreateEventBus</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeEventBusCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeEventBusCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeEventBusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventBusCommandInput} for command's `input` shape.
        * @see {@link DescribeEventBusCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeEventBusCommand extends $Command<DescribeEventBusCommandInput, DescribeEventBusCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeEventBusCommandInput;
            constructor(input: DescribeEventBusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventBusCommandInput, DescribeEventBusCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeEventSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeEventSourceRequest, DescribeEventSourceResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeEventSourceCommandInput extends DescribeEventSourceRequest {
    }
    export interface DescribeEventSourceCommandOutput extends DescribeEventSourceResponse, __MetadataBearer {
    }
    /**
        * <p>This operation lists details about a partner event source that is shared with your
        *       account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeEventSourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeEventSourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeEventSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventSourceCommandInput} for command's `input` shape.
        * @see {@link DescribeEventSourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeEventSourceCommand extends $Command<DescribeEventSourceCommandInput, DescribeEventSourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeEventSourceCommandInput;
            constructor(input: DescribeEventSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventSourceCommandInput, DescribeEventSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribePartnerEventSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribePartnerEventSourceRequest, DescribePartnerEventSourceResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribePartnerEventSourceCommandInput extends DescribePartnerEventSourceRequest {
    }
    export interface DescribePartnerEventSourceCommandOutput extends DescribePartnerEventSourceResponse, __MetadataBearer {
    }
    /**
        * <p>An SaaS partner can use this operation to list details about a partner event source that
        *       they have created. Amazon Web Services customers do not use this operation. Instead, Amazon Web Services customers can use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DescribeEventSource.html">DescribeEventSource</a>
        *       to see details about a partner event source that is
        *       shared with them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribePartnerEventSourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribePartnerEventSourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribePartnerEventSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePartnerEventSourceCommandInput} for command's `input` shape.
        * @see {@link DescribePartnerEventSourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribePartnerEventSourceCommand extends $Command<DescribePartnerEventSourceCommandInput, DescribePartnerEventSourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribePartnerEventSourceCommandInput;
            constructor(input: DescribePartnerEventSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePartnerEventSourceCommandInput, DescribePartnerEventSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeReplayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeReplayRequest, DescribeReplayResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeReplayCommandInput extends DescribeReplayRequest {
    }
    export interface DescribeReplayCommandOutput extends DescribeReplayResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves details about a replay. Use <code>DescribeReplay</code> to determine the
        *       progress of a running replay. A replay processes events to replay based on the time in the
        *       event, and replays them using 1 minute intervals. If you use <code>StartReplay</code> and
        *       specify an <code>EventStartTime</code> and an <code>EventEndTime</code> that covers a 20
        *       minute time range, the events are replayed from the first minute of that 20 minute range
        *       first. Then the events from the second minute are replayed. You can use
        *         <code>DescribeReplay</code> to determine the progress of a replay. The value returned for
        *         <code>EventLastReplayedTime</code> indicates the time within the specified time range
        *       associated with the last event replayed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeReplayCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeReplayCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeReplayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplayCommandInput} for command's `input` shape.
        * @see {@link DescribeReplayCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeReplayCommand extends $Command<DescribeReplayCommandInput, DescribeReplayCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeReplayCommandInput;
            constructor(input: DescribeReplayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplayCommandInput, DescribeReplayCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DescribeRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DescribeRuleRequest, DescribeRuleResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DescribeRuleCommandInput extends DescribeRuleRequest {
    }
    export interface DescribeRuleCommandOutput extends DescribeRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the specified rule.</p>
        *          <p>DescribeRule does not list the targets of a rule. To see the targets associated with a
        *       rule, use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_ListTargetsByRule.html">ListTargetsByRule</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DescribeRuleCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DescribeRuleCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DescribeRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRuleCommandInput} for command's `input` shape.
        * @see {@link DescribeRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DescribeRuleCommand extends $Command<DescribeRuleCommandInput, DescribeRuleCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DescribeRuleCommandInput;
            constructor(input: DescribeRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRuleCommandInput, DescribeRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/DisableRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { DisableRuleRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface DisableRuleCommandInput extends DisableRuleRequest {
    }
    export interface DisableRuleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disables the specified rule. A disabled rule won't match any events, and won't
        *       self-trigger if it has a schedule expression.</p>
        *
        *          <p>When you disable a rule, incoming events might continue to match to the disabled rule.
        *       Allow a short period of time for changes to take effect.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, DisableRuleCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, DisableRuleCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new DisableRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableRuleCommandInput} for command's `input` shape.
        * @see {@link DisableRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class DisableRuleCommand extends $Command<DisableRuleCommandInput, DisableRuleCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: DisableRuleCommandInput;
            constructor(input: DisableRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableRuleCommandInput, DisableRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/EnableRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { EnableRuleRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface EnableRuleCommandInput extends EnableRuleRequest {
    }
    export interface EnableRuleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables the specified rule. If the rule does not exist, the operation fails.</p>
        *
        *          <p>When you enable a rule, incoming events might not immediately start matching to a newly
        *       enabled rule. Allow a short period of time for changes to take effect.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, EnableRuleCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, EnableRuleCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new EnableRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableRuleCommandInput} for command's `input` shape.
        * @see {@link EnableRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class EnableRuleCommand extends $Command<EnableRuleCommandInput, EnableRuleCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: EnableRuleCommandInput;
            constructor(input: EnableRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableRuleCommandInput, EnableRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListApiDestinationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListApiDestinationsRequest, ListApiDestinationsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListApiDestinationsCommandInput extends ListApiDestinationsRequest {
    }
    export interface ListApiDestinationsCommandOutput extends ListApiDestinationsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of API destination in the account in the current Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListApiDestinationsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListApiDestinationsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListApiDestinationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApiDestinationsCommandInput} for command's `input` shape.
        * @see {@link ListApiDestinationsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListApiDestinationsCommand extends $Command<ListApiDestinationsCommandInput, ListApiDestinationsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListApiDestinationsCommandInput;
            constructor(input: ListApiDestinationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApiDestinationsCommandInput, ListApiDestinationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListArchivesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListArchivesRequest, ListArchivesResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListArchivesCommandInput extends ListArchivesRequest {
    }
    export interface ListArchivesCommandOutput extends ListArchivesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists your archives. You can either list all the archives or you can provide a prefix to
        *       match to the archive names. Filter parameters are exclusive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListArchivesCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListArchivesCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListArchivesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListArchivesCommandInput} for command's `input` shape.
        * @see {@link ListArchivesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListArchivesCommand extends $Command<ListArchivesCommandInput, ListArchivesCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListArchivesCommandInput;
            constructor(input: ListArchivesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListArchivesCommandInput, ListArchivesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListConnectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListConnectionsRequest, ListConnectionsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListConnectionsCommandInput extends ListConnectionsRequest {
    }
    export interface ListConnectionsCommandOutput extends ListConnectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of connections from the account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListConnectionsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListConnectionsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListConnectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConnectionsCommandInput} for command's `input` shape.
        * @see {@link ListConnectionsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListConnectionsCommand extends $Command<ListConnectionsCommandInput, ListConnectionsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListConnectionsCommandInput;
            constructor(input: ListConnectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConnectionsCommandInput, ListConnectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListEventBusesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListEventBusesRequest, ListEventBusesResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListEventBusesCommandInput extends ListEventBusesRequest {
    }
    export interface ListEventBusesCommandOutput extends ListEventBusesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the event buses in your account, including the default event bus, custom event
        *       buses, and partner event buses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListEventBusesCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListEventBusesCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListEventBusesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventBusesCommandInput} for command's `input` shape.
        * @see {@link ListEventBusesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListEventBusesCommand extends $Command<ListEventBusesCommandInput, ListEventBusesCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListEventBusesCommandInput;
            constructor(input: ListEventBusesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventBusesCommandInput, ListEventBusesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListEventSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListEventSourcesRequest, ListEventSourcesResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListEventSourcesCommandInput extends ListEventSourcesRequest {
    }
    export interface ListEventSourcesCommandOutput extends ListEventSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>You can use this to see all the partner event sources that have been shared with your Amazon Web Services
        *       account. For more information about partner event sources, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html">CreateEventBus</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListEventSourcesCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListEventSourcesCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListEventSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventSourcesCommandInput} for command's `input` shape.
        * @see {@link ListEventSourcesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListEventSourcesCommand extends $Command<ListEventSourcesCommandInput, ListEventSourcesCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListEventSourcesCommandInput;
            constructor(input: ListEventSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventSourcesCommandInput, ListEventSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListPartnerEventSourceAccountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListPartnerEventSourceAccountsRequest, ListPartnerEventSourceAccountsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListPartnerEventSourceAccountsCommandInput extends ListPartnerEventSourceAccountsRequest {
    }
    export interface ListPartnerEventSourceAccountsCommandOutput extends ListPartnerEventSourceAccountsResponse, __MetadataBearer {
    }
    /**
        * <p>An SaaS partner can use this operation to display the Amazon Web Services account ID that a particular
        *       partner event source name is associated with. This operation is not used by Amazon Web Services
        *       customers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListPartnerEventSourceAccountsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListPartnerEventSourceAccountsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListPartnerEventSourceAccountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPartnerEventSourceAccountsCommandInput} for command's `input` shape.
        * @see {@link ListPartnerEventSourceAccountsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListPartnerEventSourceAccountsCommand extends $Command<ListPartnerEventSourceAccountsCommandInput, ListPartnerEventSourceAccountsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListPartnerEventSourceAccountsCommandInput;
            constructor(input: ListPartnerEventSourceAccountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPartnerEventSourceAccountsCommandInput, ListPartnerEventSourceAccountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListPartnerEventSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListPartnerEventSourcesRequest, ListPartnerEventSourcesResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListPartnerEventSourcesCommandInput extends ListPartnerEventSourcesRequest {
    }
    export interface ListPartnerEventSourcesCommandOutput extends ListPartnerEventSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>An SaaS partner can use this operation to list all the partner event source names that
        *       they have created. This operation is not used by Amazon Web Services customers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListPartnerEventSourcesCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListPartnerEventSourcesCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListPartnerEventSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPartnerEventSourcesCommandInput} for command's `input` shape.
        * @see {@link ListPartnerEventSourcesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListPartnerEventSourcesCommand extends $Command<ListPartnerEventSourcesCommandInput, ListPartnerEventSourcesCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListPartnerEventSourcesCommandInput;
            constructor(input: ListPartnerEventSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPartnerEventSourcesCommandInput, ListPartnerEventSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListReplaysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListReplaysRequest, ListReplaysResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListReplaysCommandInput extends ListReplaysRequest {
    }
    export interface ListReplaysCommandOutput extends ListReplaysResponse, __MetadataBearer {
    }
    /**
        * <p>Lists your replays. You can either list all the replays or you can provide a prefix to
        *       match to the replay names. Filter parameters are exclusive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListReplaysCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListReplaysCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListReplaysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListReplaysCommandInput} for command's `input` shape.
        * @see {@link ListReplaysCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListReplaysCommand extends $Command<ListReplaysCommandInput, ListReplaysCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListReplaysCommandInput;
            constructor(input: ListReplaysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListReplaysCommandInput, ListReplaysCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListRuleNamesByTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListRuleNamesByTargetRequest, ListRuleNamesByTargetResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListRuleNamesByTargetCommandInput extends ListRuleNamesByTargetRequest {
    }
    export interface ListRuleNamesByTargetCommandOutput extends ListRuleNamesByTargetResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the rules for the specified target. You can see which of the rules in Amazon
        *       EventBridge can invoke a specific target in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListRuleNamesByTargetCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListRuleNamesByTargetCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListRuleNamesByTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRuleNamesByTargetCommandInput} for command's `input` shape.
        * @see {@link ListRuleNamesByTargetCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListRuleNamesByTargetCommand extends $Command<ListRuleNamesByTargetCommandInput, ListRuleNamesByTargetCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListRuleNamesByTargetCommandInput;
            constructor(input: ListRuleNamesByTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRuleNamesByTargetCommandInput, ListRuleNamesByTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListRulesRequest, ListRulesResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListRulesCommandInput extends ListRulesRequest {
    }
    export interface ListRulesCommandOutput extends ListRulesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists your Amazon EventBridge rules. You can either list all the rules or you can provide
        *       a prefix to match to the rule names.</p>
        *
        *          <p>ListRules does not list the targets of a rule. To see the targets associated with a rule,
        *       use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_ListTargetsByRule.html">ListTargetsByRule</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListRulesCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListRulesCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRulesCommandInput} for command's `input` shape.
        * @see {@link ListRulesCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListRulesCommand extends $Command<ListRulesCommandInput, ListRulesCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListRulesCommandInput;
            constructor(input: ListRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRulesCommandInput, ListRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Displays the tags associated with an EventBridge resource. In EventBridge, rules and event
        *       buses can be tagged.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListTagsForResourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListTagsForResourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/ListTargetsByRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { ListTargetsByRuleRequest, ListTargetsByRuleResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface ListTargetsByRuleCommandInput extends ListTargetsByRuleRequest {
    }
    export interface ListTargetsByRuleCommandOutput extends ListTargetsByRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the targets assigned to the specified rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, ListTargetsByRuleCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, ListTargetsByRuleCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new ListTargetsByRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTargetsByRuleCommandInput} for command's `input` shape.
        * @see {@link ListTargetsByRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class ListTargetsByRuleCommand extends $Command<ListTargetsByRuleCommandInput, ListTargetsByRuleCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: ListTargetsByRuleCommandInput;
            constructor(input: ListTargetsByRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTargetsByRuleCommandInput, ListTargetsByRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { PutEventsRequest, PutEventsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface PutEventsCommandInput extends PutEventsRequest {
    }
    export interface PutEventsCommandOutput extends PutEventsResponse, __MetadataBearer {
    }
    /**
        * <p>Sends custom events to Amazon EventBridge so that they can be matched to rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, PutEventsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, PutEventsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new PutEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEventsCommandInput} for command's `input` shape.
        * @see {@link PutEventsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class PutEventsCommand extends $Command<PutEventsCommandInput, PutEventsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: PutEventsCommandInput;
            constructor(input: PutEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEventsCommandInput, PutEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutPartnerEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { PutPartnerEventsRequest, PutPartnerEventsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface PutPartnerEventsCommandInput extends PutPartnerEventsRequest {
    }
    export interface PutPartnerEventsCommandOutput extends PutPartnerEventsResponse, __MetadataBearer {
    }
    /**
        * <p>This is used by SaaS partners to write events to a customer's partner event bus. Amazon Web Services
        *       customers do not use this operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, PutPartnerEventsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, PutPartnerEventsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new PutPartnerEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPartnerEventsCommandInput} for command's `input` shape.
        * @see {@link PutPartnerEventsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class PutPartnerEventsCommand extends $Command<PutPartnerEventsCommandInput, PutPartnerEventsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: PutPartnerEventsCommandInput;
            constructor(input: PutPartnerEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPartnerEventsCommandInput, PutPartnerEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { PutPermissionRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface PutPermissionCommandInput extends PutPermissionRequest {
    }
    export interface PutPermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Running <code>PutPermission</code> permits the specified Amazon Web Services account or Amazon Web Services organization
        *       to put events to the specified <i>event bus</i>. Amazon EventBridge (CloudWatch
        *       Events) rules in your account are triggered by these events arriving to an event bus in your
        *       account. </p>
        *          <p>For another account to send events to your account, that external account must have an
        *       EventBridge rule with your account's event bus as a target.</p>
        *
        *          <p>To enable multiple Amazon Web Services accounts to put events to your event bus, run
        *         <code>PutPermission</code> once for each of these accounts. Or, if all the accounts are
        *       members of the same Amazon Web Services organization, you can run <code>PutPermission</code> once specifying
        *         <code>Principal</code> as "*" and specifying the Amazon Web Services organization ID in
        *         <code>Condition</code>, to grant permissions to all accounts in that organization.</p>
        *
        *          <p>If you grant permissions using an organization, then accounts in that organization must
        *       specify a <code>RoleArn</code> with proper permissions when they use <code>PutTarget</code> to
        *       add your account's event bus as a target. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending and
        *         Receiving Events Between Amazon Web Services Accounts</a> in the <i>Amazon EventBridge User
        *         Guide</i>.</p>
        *
        *          <p>The permission policy on the event bus cannot exceed 10 KB in size.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, PutPermissionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, PutPermissionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new PutPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPermissionCommandInput} for command's `input` shape.
        * @see {@link PutPermissionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class PutPermissionCommand extends $Command<PutPermissionCommandInput, PutPermissionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: PutPermissionCommandInput;
            constructor(input: PutPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPermissionCommandInput, PutPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { PutRuleRequest, PutRuleResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface PutRuleCommandInput extends PutRuleRequest {
    }
    export interface PutRuleCommandOutput extends PutRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates the specified rule. Rules are enabled by default, or based on value of
        *       the state. You can disable a rule using <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DisableRule.html">DisableRule</a>.</p>
        *
        *          <p>A single rule watches for events from a single event bus. Events generated by Amazon Web Services services
        *       go to your account's default event bus. Events generated by SaaS partner services or
        *       applications go to the matching partner event bus. If you have custom applications or
        *       services, you can specify whether their events go to your default event bus or a custom event
        *       bus that you have created. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html">CreateEventBus</a>.</p>
        *
        *          <p>If you are updating an existing rule, the rule is replaced with what you specify in this
        *         <code>PutRule</code> command. If you omit arguments in <code>PutRule</code>, the old values
        *       for those arguments are not kept. Instead, they are replaced with null values.</p>
        *
        *          <p>When you create or update a rule, incoming events might not immediately start matching to
        *       new or updated rules. Allow a short period of time for changes to take effect.</p>
        *
        *          <p>A rule must contain at least an EventPattern or ScheduleExpression. Rules with
        *       EventPatterns are triggered when a matching event is observed. Rules with ScheduleExpressions
        *       self-trigger based on the given schedule. A rule can have both an EventPattern and a
        *       ScheduleExpression, in which case the rule triggers on matching events as well as on a
        *       schedule.</p>
        *
        *          <p>When you initially create a rule, you can optionally assign one or more tags to the rule.
        *       Tags can help you organize and categorize your resources. You can also use them to scope user
        *       permissions, by granting a user permission to access or change only rules with certain tag
        *       values. To use the <code>PutRule</code> operation and assign tags, you must have both the
        *         <code>events:PutRule</code> and <code>events:TagResource</code> permissions.</p>
        *          <p>If you are updating an existing rule, any tags you specify in the <code>PutRule</code>
        *       operation are ignored. To update the tags of an existing rule, use <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_TagResource.html">TagResource</a> and <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
        *
        *          <p>Most services in Amazon Web Services treat : or / as the same character in Amazon Resource Names (ARNs).
        *       However, EventBridge uses an exact match in event patterns and rules. Be sure to use the
        *       correct ARN characters when creating event patterns so that they match the ARN syntax in the
        *       event you want to match.</p>
        *
        *          <p>In EventBridge, it is possible to create rules that lead to infinite loops, where a rule
        *       is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket,
        *       and trigger software to change them to the desired state. If the rule is not written
        *       carefully, the subsequent change to the ACLs fires the rule again, creating an infinite
        *       loop.</p>
        *          <p>To prevent this, write the rules so that the triggered actions do not re-fire the same
        *       rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead
        *       of after any change. </p>
        *          <p>An infinite loop can quickly cause higher than expected charges. We recommend that you use
        *       budgeting, which alerts you when charges exceed your specified limit. For more information,
        *       see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing Your Costs with
        *         Budgets</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, PutRuleCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, PutRuleCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new PutRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRuleCommandInput} for command's `input` shape.
        * @see {@link PutRuleCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class PutRuleCommand extends $Command<PutRuleCommandInput, PutRuleCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: PutRuleCommandInput;
            constructor(input: PutRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRuleCommandInput, PutRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/PutTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { PutTargetsRequest, PutTargetsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface PutTargetsCommandInput extends PutTargetsRequest {
    }
    export interface PutTargetsCommandOutput extends PutTargetsResponse, __MetadataBearer {
    }
    /**
        * <p>Adds the specified targets to the specified rule, or updates the targets if they are
        *       already associated with the rule.</p>
        *          <p>Targets are the resources that are invoked when a rule is triggered.</p>
        *          <p>You can configure the following as targets for Events:</p>
        *
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-api-destinations.html">API
        *           destination</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Amazon API Gateway REST API endpoints</p>
        *             </li>
        *             <li>
        *                <p>API Gateway</p>
        *             </li>
        *             <li>
        *                <p>Batch job queue</p>
        *             </li>
        *             <li>
        *                <p>CloudWatch Logs group</p>
        *             </li>
        *             <li>
        *                <p>CodeBuild project</p>
        *             </li>
        *             <li>
        *                <p>CodePipeline</p>
        *             </li>
        *             <li>
        *                <p>Amazon EC2 <code>CreateSnapshot</code> API call</p>
        *             </li>
        *             <li>
        *                <p>Amazon EC2 <code>RebootInstances</code> API call</p>
        *             </li>
        *             <li>
        *                <p>Amazon EC2 <code>StopInstances</code> API call</p>
        *             </li>
        *             <li>
        *                <p>Amazon EC2 <code>TerminateInstances</code> API call</p>
        *             </li>
        *             <li>
        *                <p>Amazon ECS tasks</p>
        *             </li>
        *             <li>
        *                <p>Event bus in a different Amazon Web Services account or Region.</p>
        *                <p>You can use an event bus in the US East (N. Virginia) us-east-1, US West (Oregon)
        *           us-west-2, or Europe (Ireland) eu-west-1 Regions as a target for a rule.</p>
        *             </li>
        *             <li>
        *                <p>Firehose delivery stream (Kinesis Data Firehose)</p>
        *             </li>
        *             <li>
        *                <p>Inspector assessment template (Amazon Inspector)</p>
        *             </li>
        *             <li>
        *                <p>Kinesis stream (Kinesis Data Stream)</p>
        *             </li>
        *             <li>
        *                <p>Lambda function</p>
        *             </li>
        *             <li>
        *                <p>Redshift clusters (Data API statement execution)</p>
        *             </li>
        *             <li>
        *                <p>Amazon SNS topic</p>
        *             </li>
        *             <li>
        *                <p>Amazon SQS queues (includes FIFO queues</p>
        *             </li>
        *             <li>
        *                <p>SSM Automation</p>
        *             </li>
        *             <li>
        *                <p>SSM OpsItem</p>
        *             </li>
        *             <li>
        *                <p>SSM Run Command</p>
        *             </li>
        *             <li>
        *                <p>Step Functions state machines</p>
        *             </li>
        *          </ul>
        *
        *          <p>Creating rules with built-in targets is supported only in the Management Console. The
        *       built-in targets are <code>EC2 CreateSnapshot API call</code>, <code>EC2 RebootInstances API
        *         call</code>, <code>EC2 StopInstances API call</code>, and <code>EC2 TerminateInstances API
        *         call</code>. </p>
        *
        *          <p>For some target types, <code>PutTargets</code> provides target-specific parameters. If the
        *       target is a Kinesis data stream, you can optionally specify which shard the event goes to by
        *       using the <code>KinesisParameters</code> argument. To invoke a command on multiple EC2
        *       instances with one rule, you can use the <code>RunCommandParameters</code> field.</p>
        *
        *          <p>To be able to make API calls against the resources that you own, Amazon EventBridge
        *       needs the appropriate permissions. For Lambda and Amazon SNS
        *       resources, EventBridge relies on resource-based policies. For EC2 instances, Kinesis Data Streams,
        *       Step Functions state machines and API Gateway REST APIs, EventBridge relies on
        *       IAM roles that you specify in the <code>RoleARN</code> argument in <code>PutTargets</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html">Authentication
        *         and Access Control</a> in the <i>Amazon EventBridge User Guide</i>.</p>
        *
        *          <p>If another Amazon Web Services account is in the same region and has granted you permission (using
        *         <code>PutPermission</code>), you can send events to that account. Set that account's event
        *       bus as a target of the rules in your account. To send the matched events to the other account,
        *       specify that account's event bus as the <code>Arn</code> value when you run
        *         <code>PutTargets</code>. If your account sends events to another account, your account is
        *       charged for each sent event. Each event sent to another account is charged as a custom event.
        *       The account receiving the event is not charged. For more information, see <a href="http://aws.amazon.com/eventbridge/pricing/">Amazon EventBridge
        *         Pricing</a>.</p>
        *
        *          <note>
        *             <p>
        *                <code>Input</code>, <code>InputPath</code>, and <code>InputTransformer</code> are not
        *         available with <code>PutTarget</code> if the target is an event bus of a different Amazon Web Services
        *         account.</p>
        *          </note>
        *
        *          <p>If you are setting the event bus of another account as the target, and that account
        *       granted permission to your account through an organization instead of directly by the account
        *       ID, then you must specify a <code>RoleArn</code> with proper permissions in the
        *         <code>Target</code> structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending and
        *           Receiving Events Between Amazon Web Services Accounts</a> in the <i>Amazon EventBridge User
        *         Guide</i>.</p>
        *
        *          <p>For more information about enabling cross-account events, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutPermission.html">PutPermission</a>.</p>
        *
        *          <p>
        *             <b>Input</b>, <b>InputPath</b>, and
        *         <b>InputTransformer</b> are mutually exclusive and optional
        *       parameters of a target. When a rule is triggered due to a matched event:</p>
        *
        *          <ul>
        *             <li>
        *                <p>If none of the following arguments are specified for a target, then the entire event
        *           is passed to the target in JSON format (unless the target is Amazon EC2 Run Command or
        *           Amazon ECS task, in which case nothing from the event is passed to the target).</p>
        *             </li>
        *             <li>
        *                <p>If <b>Input</b> is specified in the form of valid JSON, then
        *           the matched event is overridden with this constant.</p>
        *             </li>
        *             <li>
        *                <p>If <b>InputPath</b> is specified in the form of JSONPath
        *           (for example, <code>$.detail</code>), then only the part of the event specified in the
        *           path is passed to the target (for example, only the detail part of the event is
        *           passed).</p>
        *             </li>
        *             <li>
        *                <p>If <b>InputTransformer</b> is specified, then one or more
        *           specified JSONPaths are extracted from the event and used as values in a template that you
        *           specify as the input to the target.</p>
        *             </li>
        *          </ul>
        *
        *          <p>When you specify <code>InputPath</code> or <code>InputTransformer</code>, you must use
        *       JSON dot notation, not bracket notation.</p>
        *
        *          <p>When you add targets to a rule and the associated rule triggers soon after, new or updated
        *       targets might not be immediately invoked. Allow a short period of time for changes to take
        *       effect.</p>
        *
        *          <p>This action can partially fail if too many requests are made at the same time. If that
        *       happens, <code>FailedEntryCount</code> is non-zero in the response and each entry in
        *         <code>FailedEntries</code> provides the ID of the failed target and the error code.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, PutTargetsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, PutTargetsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new PutTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutTargetsCommandInput} for command's `input` shape.
        * @see {@link PutTargetsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class PutTargetsCommand extends $Command<PutTargetsCommandInput, PutTargetsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: PutTargetsCommandInput;
            constructor(input: PutTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutTargetsCommandInput, PutTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/RemovePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { RemovePermissionRequest } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface RemovePermissionCommandInput extends RemovePermissionRequest {
    }
    export interface RemovePermissionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Revokes the permission of another Amazon Web Services account to be able to put events to the specified
        *       event bus. Specify the account to revoke by the <code>StatementId</code> value that you
        *       associated with the account when you granted it permission with <code>PutPermission</code>.
        *       You can find the <code>StatementId</code> by using <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DescribeEventBus.html">DescribeEventBus</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, RemovePermissionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, RemovePermissionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new RemovePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemovePermissionCommandInput} for command's `input` shape.
        * @see {@link RemovePermissionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class RemovePermissionCommand extends $Command<RemovePermissionCommandInput, RemovePermissionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: RemovePermissionCommandInput;
            constructor(input: RemovePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemovePermissionCommandInput, RemovePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/RemoveTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { RemoveTargetsRequest, RemoveTargetsResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface RemoveTargetsCommandInput extends RemoveTargetsRequest {
    }
    export interface RemoveTargetsCommandOutput extends RemoveTargetsResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified targets from the specified rule. When the rule is triggered, those
        *       targets are no longer be invoked.</p>
        *
        *          <p>When you remove a target, when the associated rule triggers, removed targets might
        *       continue to be invoked. Allow a short period of time for changes to take effect.</p>
        *
        *          <p>This action can partially fail if too many requests are made at the same time. If that
        *       happens, <code>FailedEntryCount</code> is non-zero in the response and each entry in
        *         <code>FailedEntries</code> provides the ID of the failed target and the error code.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, RemoveTargetsCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, RemoveTargetsCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new RemoveTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTargetsCommandInput} for command's `input` shape.
        * @see {@link RemoveTargetsCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class RemoveTargetsCommand extends $Command<RemoveTargetsCommandInput, RemoveTargetsCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: RemoveTargetsCommandInput;
            constructor(input: RemoveTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTargetsCommandInput, RemoveTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/StartReplayCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { StartReplayRequest, StartReplayResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface StartReplayCommandInput extends StartReplayRequest {
    }
    export interface StartReplayCommandOutput extends StartReplayResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the specified replay. Events are not necessarily replayed in the exact same order
        *       that they were added to the archive. A replay processes events to replay based on the time in
        *       the event, and replays them using 1 minute intervals. If you specify an
        *         <code>EventStartTime</code> and an <code>EventEndTime</code> that covers a 20 minute time
        *       range, the events are replayed from the first minute of that 20 minute range first. Then the
        *       events from the second minute are replayed. You can use <code>DescribeReplay</code> to
        *       determine the progress of a replay. The value returned for <code>EventLastReplayedTime</code>
        *       indicates the time within the specified time range associated with the last event
        *       replayed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, StartReplayCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, StartReplayCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new StartReplayCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartReplayCommandInput} for command's `input` shape.
        * @see {@link StartReplayCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class StartReplayCommand extends $Command<StartReplayCommandInput, StartReplayCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: StartReplayCommandInput;
            constructor(input: StartReplayCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartReplayCommandInput, StartReplayCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified EventBridge resource. Tags can
        *       help you organize and categorize your resources. You can also use them to scope user
        *       permissions by granting a user permission to access or change only resources with certain tag
        *       values. In EventBridge, rules and event buses can be tagged.</p>
        *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of
        *       characters.</p>
        *          <p>You can use the <code>TagResource</code> action with a resource that already has tags. If
        *       you specify a new tag key, this tag is appended to the list of tags associated with the
        *       resource. If you specify a tag key that is already associated with the resource, the new tag
        *       value that you specify replaces the previous value for that tag.</p>
        *          <p>You can associate as many as 50 tags with a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, TagResourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, TagResourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/TestEventPatternCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { TestEventPatternRequest, TestEventPatternResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface TestEventPatternCommandInput extends TestEventPatternRequest {
    }
    export interface TestEventPatternCommandOutput extends TestEventPatternResponse, __MetadataBearer {
    }
    /**
        * <p>Tests whether the specified event pattern matches the provided event.</p>
        *          <p>Most services in Amazon Web Services treat : or / as the same character in Amazon Resource Names (ARNs).
        *       However, EventBridge uses an exact match in event patterns and rules. Be sure to use the
        *       correct ARN characters when creating event patterns so that they match the ARN syntax in the
        *       event you want to match.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, TestEventPatternCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, TestEventPatternCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new TestEventPatternCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestEventPatternCommandInput} for command's `input` shape.
        * @see {@link TestEventPatternCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class TestEventPatternCommand extends $Command<TestEventPatternCommandInput, TestEventPatternCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: TestEventPatternCommandInput;
            constructor(input: TestEventPatternCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestEventPatternCommandInput, TestEventPatternCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified EventBridge resource. In Amazon EventBridge
        *       (CloudWatch Events), rules and event buses can be tagged.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, UntagResourceCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, UntagResourceCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateApiDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { UpdateApiDestinationRequest, UpdateApiDestinationResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface UpdateApiDestinationCommandInput extends UpdateApiDestinationRequest {
    }
    export interface UpdateApiDestinationCommandOutput extends UpdateApiDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an API destination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, UpdateApiDestinationCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, UpdateApiDestinationCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new UpdateApiDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApiDestinationCommandInput} for command's `input` shape.
        * @see {@link UpdateApiDestinationCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class UpdateApiDestinationCommand extends $Command<UpdateApiDestinationCommandInput, UpdateApiDestinationCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: UpdateApiDestinationCommandInput;
            constructor(input: UpdateApiDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApiDestinationCommandInput, UpdateApiDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateArchiveCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { UpdateArchiveRequest, UpdateArchiveResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface UpdateArchiveCommandInput extends UpdateArchiveRequest {
    }
    export interface UpdateArchiveCommandOutput extends UpdateArchiveResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified archive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, UpdateArchiveCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, UpdateArchiveCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new UpdateArchiveCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateArchiveCommandInput} for command's `input` shape.
        * @see {@link UpdateArchiveCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class UpdateArchiveCommand extends $Command<UpdateArchiveCommandInput, UpdateArchiveCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: UpdateArchiveCommandInput;
            constructor(input: UpdateArchiveCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateArchiveCommandInput, UpdateArchiveCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/commands/UpdateConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloudWatchEventsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/CloudWatchEventsClient";
    import { UpdateConnectionRequest, UpdateConnectionResponse } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0";
    export interface UpdateConnectionCommandInput extends UpdateConnectionRequest {
    }
    export interface UpdateConnectionCommandOutput extends UpdateConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates settings for a connection.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CloudWatchEventsClient, UpdateConnectionCommand } from "@aws-sdk/client-cloudwatch-events"; // ES Modules import
        * // const { CloudWatchEventsClient, UpdateConnectionCommand } = require("@aws-sdk/client-cloudwatch-events"); // CommonJS import
        * const client = new CloudWatchEventsClient(config);
        * const command = new UpdateConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectionCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectionCommandOutput} for command's `response` shape.
        * @see {@link CloudWatchEventsClientResolvedConfig | config} for CloudWatchEventsClient's `config` shape.
        *
        */
    export class UpdateConnectionCommand extends $Command<UpdateConnectionCommandInput, UpdateConnectionCommandOutput, CloudWatchEventsClientResolvedConfig> {
            readonly input: UpdateConnectionCommandInput;
            constructor(input: UpdateConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudWatchEventsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectionCommandInput, UpdateConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CloudWatchEventsServiceException as __BaseException } from "@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/CloudWatchEventsServiceException";
    export interface ActivateEventSourceRequest {
            /**
                * <p>The name of the partner event source to activate.</p>
                */
            Name: string | undefined;
    }
    export namespace ActivateEventSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivateEventSourceRequest) => any;
    }
    /**
        * <p>There is concurrent modification on a rule, target, archive, or replay.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>This exception occurs due to unexpected causes.</p>
        */
    export class InternalException extends __BaseException {
            readonly name: "InternalException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
    }
    /**
        * <p>The specified state is not a valid state for an event source.</p>
        */
    export class InvalidStateException extends __BaseException {
            readonly name: "InvalidStateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidStateException, __BaseException>);
    }
    /**
        * <p>The operation you are attempting is not available in this region.</p>
        */
    export class OperationDisabledException extends __BaseException {
            readonly name: "OperationDisabledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationDisabledException, __BaseException>);
    }
    /**
        * <p>An entity that you specified does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum ApiDestinationState {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE"
    }
    export enum ApiDestinationHttpMethod {
            DELETE = "DELETE",
            GET = "GET",
            HEAD = "HEAD",
            OPTIONS = "OPTIONS",
            PATCH = "PATCH",
            POST = "POST",
            PUT = "PUT"
    }
    /**
        * <p>Contains details about an API destination.</p>
        */
    export interface ApiDestination {
            /**
                * <p>The ARN of the API destination.</p>
                */
            ApiDestinationArn?: string;
            /**
                * <p>The name of the API destination.</p>
                */
            Name?: string;
            /**
                * <p>The state of the API destination.</p>
                */
            ApiDestinationState?: ApiDestinationState | string;
            /**
                * <p>The ARN of the connection specified for the API destination.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The URL to the endpoint for the API destination.</p>
                */
            InvocationEndpoint?: string;
            /**
                * <p>The method to use to connect to the HTTP endpoint.</p>
                */
            HttpMethod?: ApiDestinationHttpMethod | string;
            /**
                * <p>The maximum number of invocations per second to send to the HTTP endpoint.</p>
                */
            InvocationRateLimitPerSecond?: number;
            /**
                * <p>A time stamp for the time that the API destination was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the API destination was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace ApiDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiDestination) => any;
    }
    export enum ArchiveState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATING = "CREATING",
            DISABLED = "DISABLED",
            ENABLED = "ENABLED",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATING = "UPDATING"
    }
    /**
        * <p>An <code>Archive</code> object that contains details about an archive.</p>
        */
    export interface Archive {
            /**
                * <p>The name of the archive.</p>
                */
            ArchiveName?: string;
            /**
                * <p>The ARN of the event bus associated with the archive. Only events from this event bus are
                *       sent to the archive.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>The current state of the archive.</p>
                */
            State?: ArchiveState | string;
            /**
                * <p>A description for the reason that the archive is in the current state.</p>
                */
            StateReason?: string;
            /**
                * <p>The number of days to retain events in the archive before they are deleted.</p>
                */
            RetentionDays?: number;
            /**
                * <p>The size of the archive, in bytes.</p>
                */
            SizeBytes?: number;
            /**
                * <p>The number of events in the archive.</p>
                */
            EventCount?: number;
            /**
                * <p>The time stamp for the time that the archive was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace Archive {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Archive) => any;
    }
    export enum AssignPublicIp {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export interface CancelReplayRequest {
            /**
                * <p>The name of the replay to cancel.</p>
                */
            ReplayName: string | undefined;
    }
    export namespace CancelReplayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelReplayRequest) => any;
    }
    export enum ReplayState {
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            STARTING = "STARTING"
    }
    export interface CancelReplayResponse {
            /**
                * <p>The ARN of the replay to cancel.</p>
                */
            ReplayArn?: string;
            /**
                * <p>The current state of the replay.</p>
                */
            State?: ReplayState | string;
            /**
                * <p>The reason that the replay is in the current state.</p>
                */
            StateReason?: string;
    }
    export namespace CancelReplayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelReplayResponse) => any;
    }
    /**
        * <p>An error occurred because a replay can be canceled only when the state is Running or
        *       Starting.</p>
        */
    export class IllegalStatusException extends __BaseException {
            readonly name: "IllegalStatusException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IllegalStatusException, __BaseException>);
    }
    export interface CreateApiDestinationRequest {
            /**
                * <p>The name for the API destination to create.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the API destination to create.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the connection to use for the API destination. The destination endpoint must
                *       support the authorization type specified for the connection.</p>
                */
            ConnectionArn: string | undefined;
            /**
                * <p>The URL to the HTTP invocation endpoint for the API destination.</p>
                */
            InvocationEndpoint: string | undefined;
            /**
                * <p>The method to use for the request to the HTTP invocation endpoint.</p>
                */
            HttpMethod: ApiDestinationHttpMethod | string | undefined;
            /**
                * <p>The maximum number of requests per second to send to the HTTP invocation endpoint.</p>
                */
            InvocationRateLimitPerSecond?: number;
    }
    export namespace CreateApiDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiDestinationRequest) => any;
    }
    export interface CreateApiDestinationResponse {
            /**
                * <p>The ARN of the API destination that was created by the request.</p>
                */
            ApiDestinationArn?: string;
            /**
                * <p>The state of the API destination that was created by the request.</p>
                */
            ApiDestinationState?: ApiDestinationState | string;
            /**
                * <p>A time stamp indicating the time that the API destination was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp indicating the time that the API destination was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace CreateApiDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiDestinationResponse) => any;
    }
    /**
        * <p>The request failed because it attempted to create resource beyond the allowed service
        *       quota.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The resource you are trying to create already exists.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    export interface CreateArchiveRequest {
            /**
                * <p>The name for the archive to create.</p>
                */
            ArchiveName: string | undefined;
            /**
                * <p>The ARN of the event bus that sends events to the archive.</p>
                */
            EventSourceArn: string | undefined;
            /**
                * <p>A description for the archive.</p>
                */
            Description?: string;
            /**
                * <p>An event pattern to use to filter events sent to the archive.</p>
                */
            EventPattern?: string;
            /**
                * <p>The number of days to retain events for. Default value is 0. If set to 0, events are
                *       retained indefinitely</p>
                */
            RetentionDays?: number;
    }
    export namespace CreateArchiveRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateArchiveRequest) => any;
    }
    export interface CreateArchiveResponse {
            /**
                * <p>The ARN of the archive that was created.</p>
                */
            ArchiveArn?: string;
            /**
                * <p>The state of the archive that was created.</p>
                */
            State?: ArchiveState | string;
            /**
                * <p>The reason that the archive is in the state.</p>
                */
            StateReason?: string;
            /**
                * <p>The time at which the archive was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace CreateArchiveResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateArchiveResponse) => any;
    }
    /**
        * <p>The event pattern is not valid.</p>
        */
    export class InvalidEventPatternException extends __BaseException {
            readonly name: "InvalidEventPatternException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEventPatternException, __BaseException>);
    }
    export enum ConnectionAuthorizationType {
            API_KEY = "API_KEY",
            BASIC = "BASIC",
            OAUTH_CLIENT_CREDENTIALS = "OAUTH_CLIENT_CREDENTIALS"
    }
    /**
        * <p>Contains the API key authorization parameters for the connection.</p>
        */
    export interface CreateConnectionApiKeyAuthRequestParameters {
            /**
                * <p>The name of the API key to use for authorization.</p>
                */
            ApiKeyName: string | undefined;
            /**
                * <p>The value for the API key to use for authorization.</p>
                */
            ApiKeyValue: string | undefined;
    }
    export namespace CreateConnectionApiKeyAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionApiKeyAuthRequestParameters) => any;
    }
    /**
        * <p>Contains the Basic authorization parameters to use for the connection.</p>
        */
    export interface CreateConnectionBasicAuthRequestParameters {
            /**
                * <p>The user name to use for Basic authorization.</p>
                */
            Username: string | undefined;
            /**
                * <p>The password associated with the user name to use for Basic authorization.</p>
                */
            Password: string | undefined;
    }
    export namespace CreateConnectionBasicAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionBasicAuthRequestParameters) => any;
    }
    /**
        * <p>Additional parameter included in the body. You can include up to 100 additional body
        *       parameters per request. An event payload cannot exceed 64 KB.</p>
        */
    export interface ConnectionBodyParameter {
            /**
                * <p>The key for the parameter.</p>
                */
            Key?: string;
            /**
                * <p>The value associated with the key.</p>
                */
            Value?: string;
            /**
                * <p>Specified whether the value is secret.</p>
                */
            IsValueSecret?: boolean;
    }
    export namespace ConnectionBodyParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionBodyParameter) => any;
    }
    /**
        * <p>Additional parameter included in the header. You can include up to 100 additional header
        *       parameters per request. An event payload cannot exceed 64 KB.</p>
        */
    export interface ConnectionHeaderParameter {
            /**
                * <p>The key for the parameter.</p>
                */
            Key?: string;
            /**
                * <p>The value associated with the key.</p>
                */
            Value?: string;
            /**
                * <p>Specified whether the value is a secret.</p>
                */
            IsValueSecret?: boolean;
    }
    export namespace ConnectionHeaderParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionHeaderParameter) => any;
    }
    /**
        * <p>Additional query string parameter for the connection. You can include up to 100 additional
        *       query string parameters per request. Each additional parameter counts towards the event
        *       payload size, which cannot exceed 64 KB.</p>
        */
    export interface ConnectionQueryStringParameter {
            /**
                * <p>The key for a query string parameter.</p>
                */
            Key?: string;
            /**
                * <p>The value associated with the key for the query string parameter.</p>
                */
            Value?: string;
            /**
                * <p>Specifies whether the value is secret.</p>
                */
            IsValueSecret?: boolean;
    }
    export namespace ConnectionQueryStringParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionQueryStringParameter) => any;
    }
    /**
        * <p>Contains additional parameters for the connection.</p>
        */
    export interface ConnectionHttpParameters {
            /**
                * <p>Contains additional header parameters for the connection.</p>
                */
            HeaderParameters?: ConnectionHeaderParameter[];
            /**
                * <p>Contains additional query string parameters for the connection.</p>
                */
            QueryStringParameters?: ConnectionQueryStringParameter[];
            /**
                * <p>Contains additional body string parameters for the connection.</p>
                */
            BodyParameters?: ConnectionBodyParameter[];
    }
    export namespace ConnectionHttpParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionHttpParameters) => any;
    }
    /**
        * <p>Contains the Basic authorization parameters to use for the connection.</p>
        */
    export interface CreateConnectionOAuthClientRequestParameters {
            /**
                * <p>The client ID to use for OAuth authorization for the connection.</p>
                */
            ClientID: string | undefined;
            /**
                * <p>The client secret associated with the client ID to use for OAuth authorization for the
                *       connection.</p>
                */
            ClientSecret: string | undefined;
    }
    export namespace CreateConnectionOAuthClientRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionOAuthClientRequestParameters) => any;
    }
    export enum ConnectionOAuthHttpMethod {
            GET = "GET",
            POST = "POST",
            PUT = "PUT"
    }
    /**
        * <p>Contains the OAuth authorization parameters to use for the connection.</p>
        */
    export interface CreateConnectionOAuthRequestParameters {
            /**
                * <p>A <code>CreateConnectionOAuthClientRequestParameters</code> object that contains the
                *       client parameters for OAuth authorization.</p>
                */
            ClientParameters: CreateConnectionOAuthClientRequestParameters | undefined;
            /**
                * <p>The URL to the authorization endpoint when OAuth is specified as the authorization
                *       type.</p>
                */
            AuthorizationEndpoint: string | undefined;
            /**
                * <p>The method to use for the authorization request.</p>
                */
            HttpMethod: ConnectionOAuthHttpMethod | string | undefined;
            /**
                * <p>A <code>ConnectionHttpParameters</code> object that contains details about the additional
                *       parameters to use for the connection.</p>
                */
            OAuthHttpParameters?: ConnectionHttpParameters;
    }
    export namespace CreateConnectionOAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionOAuthRequestParameters) => any;
    }
    /**
        * <p>Contains the authorization parameters for the connection.</p>
        */
    export interface CreateConnectionAuthRequestParameters {
            /**
                * <p>A <code>CreateConnectionBasicAuthRequestParameters</code> object that contains the Basic
                *       authorization parameters to use for the connection.</p>
                */
            BasicAuthParameters?: CreateConnectionBasicAuthRequestParameters;
            /**
                * <p>A <code>CreateConnectionOAuthRequestParameters</code> object that contains the OAuth
                *       authorization parameters to use for the connection.</p>
                */
            OAuthParameters?: CreateConnectionOAuthRequestParameters;
            /**
                * <p>A <code>CreateConnectionApiKeyAuthRequestParameters</code> object that contains the API
                *       key authorization parameters to use for the connection.</p>
                */
            ApiKeyAuthParameters?: CreateConnectionApiKeyAuthRequestParameters;
            /**
                * <p>A <code>ConnectionHttpParameters</code> object that contains the API key authorization
                *       parameters to use for the connection. Note that if you include additional parameters for the
                *       target of a rule via <code>HttpParameters</code>, including query strings, the parameters
                *       added for the connection take precedence.</p>
                */
            InvocationHttpParameters?: ConnectionHttpParameters;
    }
    export namespace CreateConnectionAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionAuthRequestParameters) => any;
    }
    export interface CreateConnectionRequest {
            /**
                * <p>The name for the connection to create.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the connection to create.</p>
                */
            Description?: string;
            /**
                * <p>The type of authorization to use for the connection.</p>
                */
            AuthorizationType: ConnectionAuthorizationType | string | undefined;
            /**
                * <p>A <code>CreateConnectionAuthRequestParameters</code> object that contains the
                *       authorization parameters to use to authorize with the endpoint. </p>
                */
            AuthParameters: CreateConnectionAuthRequestParameters | undefined;
    }
    export namespace CreateConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionRequest) => any;
    }
    export enum ConnectionState {
            AUTHORIZED = "AUTHORIZED",
            AUTHORIZING = "AUTHORIZING",
            CREATING = "CREATING",
            DEAUTHORIZED = "DEAUTHORIZED",
            DEAUTHORIZING = "DEAUTHORIZING",
            DELETING = "DELETING",
            UPDATING = "UPDATING"
    }
    export interface CreateConnectionResponse {
            /**
                * <p>The ARN of the connection that was created by the request.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The state of the connection that was created by the request.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>A time stamp for the time that the connection was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace CreateConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionResponse) => any;
    }
    /**
        * <p>A key-value pair associated with an Amazon Web Services resource. In EventBridge, rules and event buses
        *       support tagging.</p>
        */
    export interface Tag {
            /**
                * <p>A string you can use to assign a value. The combination of tag keys and values can help
                *       you organize and categorize your resources.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value for the specified tag key.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateEventBusRequest {
            /**
                * <p>The name of the new event bus. </p>
                *          <p>Event bus names cannot contain the / character. You can't use the name
                *         <code>default</code> for a custom event bus, as this name is already used for your account's
                *       default event bus.</p>
                *          <p>If this is a partner event bus, the name must exactly match the name of the partner event
                *       source that this event bus is matched to.</p>
                */
            Name: string | undefined;
            /**
                * <p>If you are creating a partner event bus, this specifies the partner event source that the
                *       new event bus will be matched with.</p>
                */
            EventSourceName?: string;
            /**
                * <p>Tags to associate with the event bus.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEventBusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventBusRequest) => any;
    }
    export interface CreateEventBusResponse {
            /**
                * <p>The ARN of the new event bus.</p>
                */
            EventBusArn?: string;
    }
    export namespace CreateEventBusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventBusResponse) => any;
    }
    export interface CreatePartnerEventSourceRequest {
            /**
                * <p>The name of the partner event source. This name must be unique and must be in the format
                *           <code>
                *                <i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i>
                *             </code>.
                *       The Amazon Web Services account that wants to use this partner event source must create a partner event bus
                *       with a name that matches the name of the partner event source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The Amazon Web Services account ID that is permitted to create a matching partner event bus for this
                *       partner event source.</p>
                */
            Account: string | undefined;
    }
    export namespace CreatePartnerEventSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePartnerEventSourceRequest) => any;
    }
    export interface CreatePartnerEventSourceResponse {
            /**
                * <p>The ARN of the partner event source.</p>
                */
            EventSourceArn?: string;
    }
    export namespace CreatePartnerEventSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePartnerEventSourceResponse) => any;
    }
    export interface DeactivateEventSourceRequest {
            /**
                * <p>The name of the partner event source to deactivate.</p>
                */
            Name: string | undefined;
    }
    export namespace DeactivateEventSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeactivateEventSourceRequest) => any;
    }
    export interface DeauthorizeConnectionRequest {
            /**
                * <p>The name of the connection to remove authorization from.</p>
                */
            Name: string | undefined;
    }
    export namespace DeauthorizeConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeauthorizeConnectionRequest) => any;
    }
    export interface DeauthorizeConnectionResponse {
            /**
                * <p>The ARN of the connection that authorization was removed from.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The state of the connection.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>A time stamp for the time that the connection was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last updated.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last authorized.</p>
                */
            LastAuthorizedTime?: Date;
    }
    export namespace DeauthorizeConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeauthorizeConnectionResponse) => any;
    }
    export interface DeleteApiDestinationRequest {
            /**
                * <p>The name of the destination to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteApiDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiDestinationRequest) => any;
    }
    export interface DeleteApiDestinationResponse {
    }
    export namespace DeleteApiDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiDestinationResponse) => any;
    }
    export interface DeleteArchiveRequest {
            /**
                * <p>The name of the archive to delete.</p>
                */
            ArchiveName: string | undefined;
    }
    export namespace DeleteArchiveRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteArchiveRequest) => any;
    }
    export interface DeleteArchiveResponse {
    }
    export namespace DeleteArchiveResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteArchiveResponse) => any;
    }
    export interface DeleteConnectionRequest {
            /**
                * <p>The name of the connection to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionRequest) => any;
    }
    export interface DeleteConnectionResponse {
            /**
                * <p>The ARN of the connection that was deleted.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The state of the connection before it was deleted.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>A time stamp for the time that the connection was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last modified before it was
                *       deleted.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last authorized before it wa
                *       deleted.</p>
                */
            LastAuthorizedTime?: Date;
    }
    export namespace DeleteConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionResponse) => any;
    }
    export interface DeleteEventBusRequest {
            /**
                * <p>The name of the event bus to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteEventBusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventBusRequest) => any;
    }
    export interface DeletePartnerEventSourceRequest {
            /**
                * <p>The name of the event source to delete.</p>
                */
            Name: string | undefined;
            /**
                * <p>The Amazon Web Services account ID of the Amazon Web Services customer that the event source was created for.</p>
                */
            Account: string | undefined;
    }
    export namespace DeletePartnerEventSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePartnerEventSourceRequest) => any;
    }
    export interface DeleteRuleRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>If this is a managed rule, created by an Amazon Web Services service on your behalf, you must specify
                *         <code>Force</code> as <code>True</code> to delete the rule. This parameter is ignored for
                *       rules that are not managed rules. You can check whether a rule is a managed rule by using
                *         <code>DescribeRule</code> or <code>ListRules</code> and checking the <code>ManagedBy</code>
                *       field of the response.</p>
                */
            Force?: boolean;
    }
    export namespace DeleteRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleRequest) => any;
    }
    /**
        * <p>This rule was created by an Amazon Web Services service on behalf of your account. It is managed by that
        *       service. If you see this error in response to <code>DeleteRule</code> or
        *         <code>RemoveTargets</code>, you can use the <code>Force</code> parameter in those calls to
        *       delete the rule or remove targets from the rule. You cannot modify these managed rules by
        *       using <code>DisableRule</code>, <code>EnableRule</code>, <code>PutTargets</code>,
        *         <code>PutRule</code>, <code>TagResource</code>, or <code>UntagResource</code>. </p>
        */
    export class ManagedRuleException extends __BaseException {
            readonly name: "ManagedRuleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ManagedRuleException, __BaseException>);
    }
    export interface DescribeApiDestinationRequest {
            /**
                * <p>The name of the API destination to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeApiDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApiDestinationRequest) => any;
    }
    export interface DescribeApiDestinationResponse {
            /**
                * <p>The ARN of the API destination retrieved.</p>
                */
            ApiDestinationArn?: string;
            /**
                * <p>The name of the API destination retrieved.</p>
                */
            Name?: string;
            /**
                * <p>The description for the API destination retrieved.</p>
                */
            Description?: string;
            /**
                * <p>The state of the API destination retrieved.</p>
                */
            ApiDestinationState?: ApiDestinationState | string;
            /**
                * <p>The ARN of the connection specified for the API destination retrieved.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The URL to use to connect to the HTTP endpoint.</p>
                */
            InvocationEndpoint?: string;
            /**
                * <p>The method to use to connect to the HTTP endpoint.</p>
                */
            HttpMethod?: ApiDestinationHttpMethod | string;
            /**
                * <p>The maximum number of invocations per second to specified for the API destination. Note
                *       that if you set the invocation rate maximum to a value lower the rate necessary to send all
                *       events received on to the destination HTTP endpoint, some events may not be delivered within
                *       the 24-hour retry window. If you plan to set the rate lower than the rate necessary to deliver
                *       all events, consider using a dead-letter queue to catch events that are not delivered within
                *       24 hours.</p>
                */
            InvocationRateLimitPerSecond?: number;
            /**
                * <p>A time stamp for the time that the API destination was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the API destination was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace DescribeApiDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApiDestinationResponse) => any;
    }
    export interface DescribeArchiveRequest {
            /**
                * <p>The name of the archive to retrieve.</p>
                */
            ArchiveName: string | undefined;
    }
    export namespace DescribeArchiveRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeArchiveRequest) => any;
    }
    export interface DescribeArchiveResponse {
            /**
                * <p>The ARN of the archive.</p>
                */
            ArchiveArn?: string;
            /**
                * <p>The name of the archive.</p>
                */
            ArchiveName?: string;
            /**
                * <p>The ARN of the event source associated with the archive.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>The description of the archive.</p>
                */
            Description?: string;
            /**
                * <p>The event pattern used to filter events sent to the archive.</p>
                */
            EventPattern?: string;
            /**
                * <p>The state of the archive.</p>
                */
            State?: ArchiveState | string;
            /**
                * <p>The reason that the archive is in the state.</p>
                */
            StateReason?: string;
            /**
                * <p>The number of days to retain events for in the archive.</p>
                */
            RetentionDays?: number;
            /**
                * <p>The size of the archive in bytes.</p>
                */
            SizeBytes?: number;
            /**
                * <p>The number of events in the archive.</p>
                */
            EventCount?: number;
            /**
                * <p>The time at which the archive was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace DescribeArchiveResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeArchiveResponse) => any;
    }
    export interface DescribeConnectionRequest {
            /**
                * <p>The name of the connection to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionRequest) => any;
    }
    /**
        * <p>Contains the authorization parameters for the connection if API Key is specified as the
        *       authorization type.</p>
        */
    export interface ConnectionApiKeyAuthResponseParameters {
            /**
                * <p>The name of the header to use for the <code>APIKeyValue</code> used for
                *       authorization.</p>
                */
            ApiKeyName?: string;
    }
    export namespace ConnectionApiKeyAuthResponseParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionApiKeyAuthResponseParameters) => any;
    }
    /**
        * <p>Contains the authorization parameters for the connection if Basic is specified as the
        *       authorization type.</p>
        */
    export interface ConnectionBasicAuthResponseParameters {
            /**
                * <p>The user name to use for Basic authorization.</p>
                */
            Username?: string;
    }
    export namespace ConnectionBasicAuthResponseParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionBasicAuthResponseParameters) => any;
    }
    /**
        * <p>Contains the client response parameters for the connection when OAuth is specified as the
        *       authorization type.</p>
        */
    export interface ConnectionOAuthClientResponseParameters {
            /**
                * <p>The client ID associated with the response to the connection request.</p>
                */
            ClientID?: string;
    }
    export namespace ConnectionOAuthClientResponseParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionOAuthClientResponseParameters) => any;
    }
    /**
        * <p>Contains the response parameters when OAuth is specified as the authorization type.</p>
        */
    export interface ConnectionOAuthResponseParameters {
            /**
                * <p>A <code>ConnectionOAuthClientResponseParameters</code> object that contains details about
                *       the client parameters returned when OAuth is specified as the authorization type.</p>
                */
            ClientParameters?: ConnectionOAuthClientResponseParameters;
            /**
                * <p>The URL to the HTTP endpoint that authorized the request.</p>
                */
            AuthorizationEndpoint?: string;
            /**
                * <p>The method used to connect to the HTTP endpoint.</p>
                */
            HttpMethod?: ConnectionOAuthHttpMethod | string;
            /**
                * <p>The additional HTTP parameters used for the OAuth authorization request.</p>
                */
            OAuthHttpParameters?: ConnectionHttpParameters;
    }
    export namespace ConnectionOAuthResponseParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionOAuthResponseParameters) => any;
    }
    /**
        * <p>Contains the authorization parameters to use for the connection.</p>
        */
    export interface ConnectionAuthResponseParameters {
            /**
                * <p>The authorization parameters for Basic authorization.</p>
                */
            BasicAuthParameters?: ConnectionBasicAuthResponseParameters;
            /**
                * <p>The OAuth parameters to use for authorization.</p>
                */
            OAuthParameters?: ConnectionOAuthResponseParameters;
            /**
                * <p>The API Key parameters to use for authorization.</p>
                */
            ApiKeyAuthParameters?: ConnectionApiKeyAuthResponseParameters;
            /**
                * <p>Additional parameters for the connection that are passed through with every invocation to
                *       the HTTP endpoint.</p>
                */
            InvocationHttpParameters?: ConnectionHttpParameters;
    }
    export namespace ConnectionAuthResponseParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionAuthResponseParameters) => any;
    }
    export interface DescribeConnectionResponse {
            /**
                * <p>The ARN of the connection retrieved.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The name of the connection retrieved.</p>
                */
            Name?: string;
            /**
                * <p>The description for the connection retrieved.</p>
                */
            Description?: string;
            /**
                * <p>The state of the connection retrieved.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>The reason that the connection is in the current connection state.</p>
                */
            StateReason?: string;
            /**
                * <p>The type of authorization specified for the connection.</p>
                */
            AuthorizationType?: ConnectionAuthorizationType | string;
            /**
                * <p>The ARN of the secret created from the authorization parameters specified for the
                *       connection.</p>
                */
            SecretArn?: string;
            /**
                * <p>The parameters to use for authorization for the connection.</p>
                */
            AuthParameters?: ConnectionAuthResponseParameters;
            /**
                * <p>A time stamp for the time that the connection was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last authorized.</p>
                */
            LastAuthorizedTime?: Date;
    }
    export namespace DescribeConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionResponse) => any;
    }
    export interface DescribeEventBusRequest {
            /**
                * <p>The name or ARN of the event bus to show details for. If you omit this, the default event
                *       bus is displayed.</p>
                */
            Name?: string;
    }
    export namespace DescribeEventBusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventBusRequest) => any;
    }
    export interface DescribeEventBusResponse {
            /**
                * <p>The name of the event bus. Currently, this is always <code>default</code>.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the account permitted to write events to the current
                *       account.</p>
                */
            Arn?: string;
            /**
                * <p>The policy that enables the external account to send events to your account.</p>
                */
            Policy?: string;
    }
    export namespace DescribeEventBusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventBusResponse) => any;
    }
    export interface DescribeEventSourceRequest {
            /**
                * <p>The name of the partner event source to display the details of.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeEventSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventSourceRequest) => any;
    }
    export enum EventSourceState {
            ACTIVE = "ACTIVE",
            DELETED = "DELETED",
            PENDING = "PENDING"
    }
    export interface DescribeEventSourceResponse {
            /**
                * <p>The ARN of the partner event source.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the SaaS partner that created the event source.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the event source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time that the event source will expire if you do not create a matching event
                *       bus.</p>
                */
            ExpirationTime?: Date;
            /**
                * <p>The name of the partner event source.</p>
                */
            Name?: string;
            /**
                * <p>The state of the event source. If it is ACTIVE, you have already created a matching event
                *       bus for this event source, and that event bus is active. If it is PENDING, either you haven't
                *       yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have
                *       created a matching event bus, but the event source has since been deleted.</p>
                */
            State?: EventSourceState | string;
    }
    export namespace DescribeEventSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventSourceResponse) => any;
    }
    export interface DescribePartnerEventSourceRequest {
            /**
                * <p>The name of the event source to display.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribePartnerEventSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePartnerEventSourceRequest) => any;
    }
    export interface DescribePartnerEventSourceResponse {
            /**
                * <p>The ARN of the event source.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the event source.</p>
                */
            Name?: string;
    }
    export namespace DescribePartnerEventSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePartnerEventSourceResponse) => any;
    }
    export interface DescribeReplayRequest {
            /**
                * <p>The name of the replay to retrieve.</p>
                */
            ReplayName: string | undefined;
    }
    export namespace DescribeReplayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplayRequest) => any;
    }
    /**
        * <p>A <code>ReplayDestination</code> object that contains details about a replay.</p>
        */
    export interface ReplayDestination {
            /**
                * <p>The ARN of the event bus to replay event to. You can replay events only to the event bus
                *       specified to create the archive.</p>
                */
            Arn: string | undefined;
            /**
                * <p>A list of ARNs for rules to replay events to.</p>
                */
            FilterArns?: string[];
    }
    export namespace ReplayDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplayDestination) => any;
    }
    export interface DescribeReplayResponse {
            /**
                * <p>The name of the replay.</p>
                */
            ReplayName?: string;
            /**
                * <p>The ARN of the replay.</p>
                */
            ReplayArn?: string;
            /**
                * <p>The description of the replay.</p>
                */
            Description?: string;
            /**
                * <p>The current state of the replay.</p>
                */
            State?: ReplayState | string;
            /**
                * <p>The reason that the replay is in the current state.</p>
                */
            StateReason?: string;
            /**
                * <p>The ARN of the archive events were replayed from.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>A <code>ReplayDestination</code> object that contains details about the replay.</p>
                */
            Destination?: ReplayDestination;
            /**
                * <p>The time stamp of the first event that was last replayed from the archive.</p>
                */
            EventStartTime?: Date;
            /**
                * <p>The time stamp for the last event that was replayed from the archive.</p>
                */
            EventEndTime?: Date;
            /**
                * <p>The time that the event was last replayed.</p>
                */
            EventLastReplayedTime?: Date;
            /**
                * <p>A time stamp for the time that the replay started.</p>
                */
            ReplayStartTime?: Date;
            /**
                * <p>A time stamp for the time that the replay stopped.</p>
                */
            ReplayEndTime?: Date;
    }
    export namespace DescribeReplayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplayResponse) => any;
    }
    export interface DescribeRuleRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
    }
    export namespace DescribeRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuleRequest) => any;
    }
    export enum RuleState {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export interface DescribeRuleResponse {
            /**
                * <p>The name of the rule.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            Arn?: string;
            /**
                * <p>The event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event
                *         Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
                */
            EventPattern?: string;
            /**
                * <p>The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)".</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>Specifies whether the rule is enabled or disabled.</p>
                */
            State?: RuleState | string;
            /**
                * <p>The description of the rule.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role associated with the rule.</p>
                */
            RoleArn?: string;
            /**
                * <p>If this is a managed rule, created by an Amazon Web Services service on your behalf, this field displays
                *       the principal name of the Amazon Web Services service that created the rule.</p>
                */
            ManagedBy?: string;
            /**
                * <p>The name of the event bus associated with the rule.</p>
                */
            EventBusName?: string;
            /**
                * <p>The account ID of the user that created the rule. If you use <code>PutRule</code> to put a
                *       rule on an event bus in another account, the other account is the owner of the rule, and the
                *       rule ARN includes the account ID for that account. However, the value for
                *         <code>CreatedBy</code> is the account ID as the account that created the rule in the other
                *       account.</p>
                */
            CreatedBy?: string;
    }
    export namespace DescribeRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuleResponse) => any;
    }
    export interface DisableRuleRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
    }
    export namespace DisableRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableRuleRequest) => any;
    }
    export interface EnableRuleRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
    }
    export namespace EnableRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableRuleRequest) => any;
    }
    export interface ListApiDestinationsRequest {
            /**
                * <p>A name prefix to filter results returned. Only API destinations with a name that starts
                *       with the prefix are returned.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The ARN of the connection specified for the API destination.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of API destinations to include in the response.</p>
                */
            Limit?: number;
    }
    export namespace ListApiDestinationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApiDestinationsRequest) => any;
    }
    export interface ListApiDestinationsResponse {
            /**
                * <p>An array of <code>ApiDestination</code> objects that include information about an API
                *       destination.</p>
                */
            ApiDestinations?: ApiDestination[];
            /**
                * <p>A token you can use in a subsequent request to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListApiDestinationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApiDestinationsResponse) => any;
    }
    export interface ListArchivesRequest {
            /**
                * <p>A name prefix to filter the archives returned. Only archives with name that match the
                *       prefix are returned.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The ARN of the event source associated with the archive.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>The state of the archive.</p>
                */
            State?: ArchiveState | string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            Limit?: number;
    }
    export namespace ListArchivesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListArchivesRequest) => any;
    }
    export interface ListArchivesResponse {
            /**
                * <p>An array of <code>Archive</code> objects that include details about an archive.</p>
                */
            Archives?: Archive[];
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListArchivesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListArchivesResponse) => any;
    }
    export interface ListConnectionsRequest {
            /**
                * <p>A name prefix to filter results returned. Only connections with a name that starts with
                *       the prefix are returned.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The state of the connection.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of connections to return.</p>
                */
            Limit?: number;
    }
    export namespace ListConnectionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectionsRequest) => any;
    }
    /**
        * <p>Contains information about a connection.</p>
        */
    export interface Connection {
            /**
                * <p>The ARN of the connection.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The name of the connection.</p>
                */
            Name?: string;
            /**
                * <p>The state of the connection.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>The reason that the connection is in the connection state.</p>
                */
            StateReason?: string;
            /**
                * <p>The authorization type specified for the connection.</p>
                */
            AuthorizationType?: ConnectionAuthorizationType | string;
            /**
                * <p>A time stamp for the time that the connection was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last authorized.</p>
                */
            LastAuthorizedTime?: Date;
    }
    export namespace Connection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Connection) => any;
    }
    export interface ListConnectionsResponse {
            /**
                * <p>An array of connections objects that include details about the connections.</p>
                */
            Connections?: Connection[];
            /**
                * <p>A token you can use in a subsequent request to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListConnectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectionsResponse) => any;
    }
    export interface ListEventBusesRequest {
            /**
                * <p>Specifying this limits the results to only those event buses with names that start with
                *       the specified prefix.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifying this limits the number of results returned by this operation. The operation
                *       also returns a NextToken which you can use in a subsequent operation to retrieve the next set
                *       of results.</p>
                */
            Limit?: number;
    }
    export namespace ListEventBusesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventBusesRequest) => any;
    }
    /**
        * <p>An event bus receives events from a source and routes them to rules associated with that
        *       event bus. Your account's default event bus receives events from Amazon Web Services services. A custom event
        *       bus can receive events from your custom applications and services. A partner event bus
        *       receives events from an event source created by an SaaS partner. These events come from the
        *       partners services or applications.</p>
        */
    export interface EventBus {
            /**
                * <p>The name of the event bus.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of the event bus.</p>
                */
            Arn?: string;
            /**
                * <p>The permissions policy of the event bus, describing which other Amazon Web Services accounts can write
                *       events to this event bus.</p>
                */
            Policy?: string;
    }
    export namespace EventBus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventBus) => any;
    }
    export interface ListEventBusesResponse {
            /**
                * <p>This list of event buses.</p>
                */
            EventBuses?: EventBus[];
            /**
                * <p>A token you can use in a subsequent operation to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEventBusesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventBusesResponse) => any;
    }
    export interface ListEventSourcesRequest {
            /**
                * <p>Specifying this limits the results to only those partner event sources with names that
                *       start with the specified prefix.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifying this limits the number of results returned by this operation. The operation
                *       also returns a NextToken which you can use in a subsequent operation to retrieve the next set
                *       of results.</p>
                */
            Limit?: number;
    }
    export namespace ListEventSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventSourcesRequest) => any;
    }
    /**
        * <p>A partner event source is created by an SaaS partner. If a customer creates a partner
        *       event bus that matches this event source, that Amazon Web Services account can receive events from the
        *       partner's applications or services.</p>
        */
    export interface EventSource {
            /**
                * <p>The ARN of the event source.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the partner that created the event source.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time the event source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time that the event source will expire, if the Amazon Web Services account doesn't create a
                *       matching event bus for it.</p>
                */
            ExpirationTime?: Date;
            /**
                * <p>The name of the event source.</p>
                */
            Name?: string;
            /**
                * <p>The state of the event source. If it is ACTIVE, you have already created a matching event
                *       bus for this event source, and that event bus is active. If it is PENDING, either you haven't
                *       yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have
                *       created a matching event bus, but the event source has since been deleted.</p>
                */
            State?: EventSourceState | string;
    }
    export namespace EventSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSource) => any;
    }
    export interface ListEventSourcesResponse {
            /**
                * <p>The list of event sources.</p>
                */
            EventSources?: EventSource[];
            /**
                * <p>A token you can use in a subsequent operation to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEventSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventSourcesResponse) => any;
    }
    export interface ListPartnerEventSourceAccountsRequest {
            /**
                * <p>The name of the partner event source to display account information about.</p>
                */
            EventSourceName: string | undefined;
            /**
                * <p>The token returned by a previous call to this operation. Specifying this retrieves the
                *       next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifying this limits the number of results returned by this operation. The operation
                *       also returns a NextToken which you can use in a subsequent operation to retrieve the next set
                *       of results.</p>
                */
            Limit?: number;
    }
    export namespace ListPartnerEventSourceAccountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPartnerEventSourceAccountsRequest) => any;
    }
    /**
        * <p>The Amazon Web Services account that a partner event source has been offered to.</p>
        */
    export interface PartnerEventSourceAccount {
            /**
                * <p>The Amazon Web Services account ID that the partner event source was offered to.</p>
                */
            Account?: string;
            /**
                * <p>The date and time the event source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The date and time that the event source will expire, if the Amazon Web Services account doesn't create a
                *       matching event bus for it.</p>
                */
            ExpirationTime?: Date;
            /**
                * <p>The state of the event source. If it is ACTIVE, you have already created a matching event
                *       bus for this event source, and that event bus is active. If it is PENDING, either you haven't
                *       yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have
                *       created a matching event bus, but the event source has since been deleted.</p>
                */
            State?: EventSourceState | string;
    }
    export namespace PartnerEventSourceAccount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartnerEventSourceAccount) => any;
    }
    export interface ListPartnerEventSourceAccountsResponse {
            /**
                * <p>The list of partner event sources returned by the operation.</p>
                */
            PartnerEventSourceAccounts?: PartnerEventSourceAccount[];
            /**
                * <p>A token you can use in a subsequent operation to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPartnerEventSourceAccountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPartnerEventSourceAccountsResponse) => any;
    }
    export interface ListPartnerEventSourcesRequest {
            /**
                * <p>If you specify this, the results are limited to only those partner event sources that
                *       start with the string you specify.</p>
                */
            NamePrefix: string | undefined;
            /**
                * <p>The token returned by a previous call to this operation. Specifying this retrieves the
                *       next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>pecifying this limits the number of results returned by this operation. The operation also
                *       returns a NextToken which you can use in a subsequent operation to retrieve the next set of
                *       results.</p>
                */
            Limit?: number;
    }
    export namespace ListPartnerEventSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPartnerEventSourcesRequest) => any;
    }
    /**
        * <p>A partner event source is created by an SaaS partner. If a customer creates a partner
        *       event bus that matches this event source, that Amazon Web Services account can receive events from the
        *       partner's applications or services.</p>
        */
    export interface PartnerEventSource {
            /**
                * <p>The ARN of the partner event source.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the partner event source.</p>
                */
            Name?: string;
    }
    export namespace PartnerEventSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartnerEventSource) => any;
    }
    export interface ListPartnerEventSourcesResponse {
            /**
                * <p>The list of partner event sources returned by the operation.</p>
                */
            PartnerEventSources?: PartnerEventSource[];
            /**
                * <p>A token you can use in a subsequent operation to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPartnerEventSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPartnerEventSourcesResponse) => any;
    }
    export interface ListReplaysRequest {
            /**
                * <p>A name prefix to filter the replays returned. Only replays with name that match the prefix
                *       are returned.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The state of the replay.</p>
                */
            State?: ReplayState | string;
            /**
                * <p>The ARN of the archive from which the events are replayed.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of replays to retrieve.</p>
                */
            Limit?: number;
    }
    export namespace ListReplaysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReplaysRequest) => any;
    }
    /**
        * <p>A <code>Replay</code> object that contains details about a replay.</p>
        */
    export interface Replay {
            /**
                * <p>The name of the replay.</p>
                */
            ReplayName?: string;
            /**
                * <p>The ARN of the archive to replay event from.</p>
                */
            EventSourceArn?: string;
            /**
                * <p>The current state of the replay.</p>
                */
            State?: ReplayState | string;
            /**
                * <p>A description of why the replay is in the current state.</p>
                */
            StateReason?: string;
            /**
                * <p>A time stamp for the time to start replaying events. This is determined by the time in the
                *       event as described in <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEventsRequestEntry.html#eventbridge-Type-PutEventsRequestEntry-Time">Time</a>.</p>
                */
            EventStartTime?: Date;
            /**
                * <p>A time stamp for the time to start replaying events. Any event with a creation time prior
                *       to the <code>EventEndTime</code> specified is replayed.</p>
                */
            EventEndTime?: Date;
            /**
                * <p>A time stamp for the time that the last event was replayed.</p>
                */
            EventLastReplayedTime?: Date;
            /**
                * <p>A time stamp for the time that the replay started.</p>
                */
            ReplayStartTime?: Date;
            /**
                * <p>A time stamp for the time that the replay completed.</p>
                */
            ReplayEndTime?: Date;
    }
    export namespace Replay {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Replay) => any;
    }
    export interface ListReplaysResponse {
            /**
                * <p>An array of <code>Replay</code> objects that contain information about the replay.</p>
                */
            Replays?: Replay[];
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListReplaysResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReplaysResponse) => any;
    }
    export interface ListRuleNamesByTargetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the target resource.</p>
                */
            TargetArn: string | undefined;
            /**
                * <p>The name or ARN of the event bus to list rules for. If you omit this, the default event
                *       bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            Limit?: number;
    }
    export namespace ListRuleNamesByTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRuleNamesByTargetRequest) => any;
    }
    export interface ListRuleNamesByTargetResponse {
            /**
                * <p>The names of the rules that can invoke the given target.</p>
                */
            RuleNames?: string[];
            /**
                * <p>Indicates whether there are additional results to retrieve. If there are no more results,
                *       the value is null.</p>
                */
            NextToken?: string;
    }
    export namespace ListRuleNamesByTargetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRuleNamesByTargetResponse) => any;
    }
    export interface ListRulesRequest {
            /**
                * <p>The prefix matching the rule name.</p>
                */
            NamePrefix?: string;
            /**
                * <p>The name or ARN of the event bus to list the rules for. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            Limit?: number;
    }
    export namespace ListRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRulesRequest) => any;
    }
    /**
        * <p>Contains information about a rule in Amazon EventBridge.</p>
        */
    export interface Rule {
            /**
                * <p>The name of the rule.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            Arn?: string;
            /**
                * <p>The event pattern of the rule. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event
                *         Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
                */
            EventPattern?: string;
            /**
                * <p>The state of the rule.</p>
                */
            State?: RuleState | string;
            /**
                * <p>The description of the rule.</p>
                */
            Description?: string;
            /**
                * <p>The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html">Creating an Amazon EventBridge rule that runs on a schedule</a>.</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role that is used for target invocation.</p>
                *          <p>If you're setting an event bus in another account as the target and that account granted
                *       permission to your account through an organization instead of directly by the account ID, you
                *       must specify a <code>RoleArn</code> with proper permissions in the <code>Target</code>
                *       structure, instead of here in this parameter.</p>
                */
            RoleArn?: string;
            /**
                * <p>If the rule was created on behalf of your account by an Amazon Web Services service, this field displays
                *       the principal name of the service that created the rule.</p>
                */
            ManagedBy?: string;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    export interface ListRulesResponse {
            /**
                * <p>The rules that match the specified criteria.</p>
                */
            Rules?: Rule[];
            /**
                * <p>Indicates whether there are additional results to retrieve. If there are no more results,
                *       the value is null.</p>
                */
            NextToken?: string;
    }
    export namespace ListRulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRulesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the EventBridge resource for which you want to view tags.</p>
                */
            ResourceARN: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The list of tag keys and values associated with the resource you specified</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTargetsByRuleRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Rule: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            Limit?: number;
    }
    export namespace ListTargetsByRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetsByRuleRequest) => any;
    }
    /**
        * <p>The array properties for the submitted job, such as the size of the array. The array size
        *       can be between 2 and 10,000. If you specify array properties for a job, it becomes an array
        *       job. This parameter is used only if the target is an Batch job.</p>
        */
    export interface BatchArrayProperties {
            /**
                * <p>The size of the array, if this is an array batch job. Valid values are integers between 2
                *       and 10,000.</p>
                */
            Size?: number;
    }
    export namespace BatchArrayProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchArrayProperties) => any;
    }
    /**
        * <p>The retry strategy to use for failed jobs, if the target is an Batch job. If you
        *       specify a retry strategy here, it overrides the retry strategy defined in the job
        *       definition.</p>
        */
    export interface BatchRetryStrategy {
            /**
                * <p>The number of times to attempt to retry, if the job fails. Valid values are 1–10.</p>
                */
            Attempts?: number;
    }
    export namespace BatchRetryStrategy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchRetryStrategy) => any;
    }
    /**
        * <p>The custom parameters to be used when the target is an Batch job.</p>
        */
    export interface BatchParameters {
            /**
                * <p>The ARN or name of the job definition to use if the event target is an Batch job. This
                *       job definition must already exist.</p>
                */
            JobDefinition: string | undefined;
            /**
                * <p>The name to use for this execution of the job, if the target is an Batch job.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The array properties for the submitted job, such as the size of the array. The array size
                *       can be between 2 and 10,000. If you specify array properties for a job, it becomes an array
                *       job. This parameter is used only if the target is an Batch job.</p>
                */
            ArrayProperties?: BatchArrayProperties;
            /**
                * <p>The retry strategy to use for failed jobs, if the target is an Batch job. The retry
                *       strategy is the number of times to retry the failed job execution. Valid values are 1–10. When
                *       you specify a retry strategy here, it overrides the retry strategy defined in the job
                *       definition.</p>
                */
            RetryStrategy?: BatchRetryStrategy;
    }
    export namespace BatchParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchParameters) => any;
    }
    /**
        * <p>A <code>DeadLetterConfig</code> object that contains information about a dead-letter queue
        *       configuration.</p>
        */
    export interface DeadLetterConfig {
            /**
                * <p>The ARN of the SQS queue specified as the target for the dead-letter queue.</p>
                */
            Arn?: string;
    }
    export namespace DeadLetterConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeadLetterConfig) => any;
    }
    /**
        * <p>The details of a capacity provider strategy. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html">CapacityProviderStrategyItem</a> in the Amazon ECS API Reference.</p>
        */
    export interface CapacityProviderStrategyItem {
            /**
                * <p>The short name of the capacity provider.</p>
                */
            capacityProvider: string | undefined;
            /**
                * <p>The weight value designates the relative percentage of the total number of tasks launched
                *       that should use the specified capacity provider. The weight value is taken into consideration
                *       after the base value, if defined, is satisfied.</p>
                */
            weight?: number;
            /**
                * <p>The base value designates how many tasks, at a minimum, to run on the specified capacity
                *       provider. Only one capacity provider in a capacity provider strategy can have a base defined.
                *       If no value is specified, the default value of 0 is used. </p>
                */
            base?: number;
    }
    export namespace CapacityProviderStrategyItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CapacityProviderStrategyItem) => any;
    }
    export enum LaunchType {
            EC2 = "EC2",
            EXTERNAL = "EXTERNAL",
            FARGATE = "FARGATE"
    }
    /**
        * <p>This structure specifies the VPC subnets and security groups for the task, and whether a
        *       public IP address is to be used. This structure is relevant only for ECS tasks that use the
        *         <code>awsvpc</code> network mode.</p>
        */
    export interface AwsVpcConfiguration {
            /**
                * <p>Specifies the subnets associated with the task. These subnets must all be in the same VPC.
                *       You can specify as many as 16 subnets.</p>
                */
            Subnets: string[] | undefined;
            /**
                * <p>Specifies the security groups associated with the task. These security groups must all be
                *       in the same VPC. You can specify as many as five security groups. If you do not specify a
                *       security group, the default security group for the VPC is used.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>Specifies whether the task's elastic network interface receives a public IP address. You
                *       can specify <code>ENABLED</code> only when <code>LaunchType</code> in
                *         <code>EcsParameters</code> is set to <code>FARGATE</code>.</p>
                */
            AssignPublicIp?: AssignPublicIp | string;
    }
    export namespace AwsVpcConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsVpcConfiguration) => any;
    }
    /**
        * <p>This structure specifies the network configuration for an ECS task.</p>
        */
    export interface NetworkConfiguration {
            /**
                * <p>Use this structure to specify the VPC subnets and security groups for the task, and
                *       whether a public IP address is to be used. This structure is relevant only for ECS tasks that
                *       use the <code>awsvpc</code> network mode.</p>
                */
            awsvpcConfiguration?: AwsVpcConfiguration;
    }
    export namespace NetworkConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkConfiguration) => any;
    }
    export enum PlacementConstraintType {
            DISTINCT_INSTANCE = "distinctInstance",
            MEMBER_OF = "memberOf"
    }
    /**
        * <p>An object representing a constraint on task placement. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html">Task Placement Constraints</a> in the Amazon Elastic Container Service Developer
        *       Guide.</p>
        */
    export interface PlacementConstraint {
            /**
                * <p>The type of constraint. Use distinctInstance to ensure that each task in a particular
                *       group is running on a different container instance. Use memberOf to restrict the selection to
                *       a group of valid candidates. </p>
                */
            type?: PlacementConstraintType | string;
            /**
                * <p>A cluster query language expression to apply to the constraint. You cannot specify an
                *       expression if the constraint type is <code>distinctInstance</code>. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html">Cluster Query Language</a> in the Amazon Elastic Container Service Developer Guide.
                *     </p>
                */
            expression?: string;
    }
    export namespace PlacementConstraint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlacementConstraint) => any;
    }
    export enum PlacementStrategyType {
            BINPACK = "binpack",
            RANDOM = "random",
            SPREAD = "spread"
    }
    /**
        * <p>The task placement strategy for a task or service. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html">Task Placement Strategies</a> in the Amazon Elastic Container Service Service Developer
        *       Guide.</p>
        */
    export interface PlacementStrategy {
            /**
                * <p>The type of placement strategy. The random placement strategy randomly places tasks on
                *       available candidates. The spread placement strategy spreads placement across available
                *       candidates evenly based on the field parameter. The binpack strategy places tasks on available
                *       candidates that have the least available amount of the resource that is specified with the
                *       field parameter. For example, if you binpack on memory, a task is placed on the instance with
                *       the least amount of remaining memory (but still enough to run the task). </p>
                */
            type?: PlacementStrategyType | string;
            /**
                * <p>The field to apply the placement strategy against. For the spread placement strategy,
                *       valid values are instanceId (or host, which has the same effect), or any platform or custom
                *       attribute that is applied to a container instance, such as attribute:ecs.availability-zone.
                *       For the binpack placement strategy, valid values are cpu and memory. For the random placement
                *       strategy, this field is not used. </p>
                */
            field?: string;
    }
    export namespace PlacementStrategy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlacementStrategy) => any;
    }
    export enum PropagateTags {
            TASK_DEFINITION = "TASK_DEFINITION"
    }
    /**
        * <p>The custom parameters to be used when the target is an Amazon ECS task.</p>
        */
    export interface EcsParameters {
            /**
                * <p>The ARN of the task definition to use if the event target is an Amazon ECS task. </p>
                */
            TaskDefinitionArn: string | undefined;
            /**
                * <p>The number of tasks to create based on <code>TaskDefinition</code>. The default is
                *       1.</p>
                */
            TaskCount?: number;
            /**
                * <p>Specifies the launch type on which your task is running. The launch type that you specify
                *       here must match one of the launch type (compatibilities) of the target task. The
                *       <code>FARGATE</code> value is supported only in the Regions where Fargate witt Amazon ECS
                *      is supported. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html">Fargate on Amazon ECS</a> in
                *       the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
                */
            LaunchType?: LaunchType | string;
            /**
                * <p>Use this structure if the Amazon ECS task uses the <code>awsvpc</code> network mode. This
                *       structure specifies the VPC subnets and security groups associated with the task, and whether
                *       a public IP address is to be used. This structure is required if <code>LaunchType</code> is
                *         <code>FARGATE</code> because the <code>awsvpc</code> mode is required for Fargate
                *       tasks.</p>
                *          <p>If you specify <code>NetworkConfiguration</code> when the target ECS task does not use the
                *         <code>awsvpc</code> network mode, the task fails.</p>
                */
            NetworkConfiguration?: NetworkConfiguration;
            /**
                * <p>Specifies the platform version for the task. Specify only the numeric portion of the
                *       platform version, such as <code>1.1.0</code>.</p>
                *          <p>This structure is used only if <code>LaunchType</code> is <code>FARGATE</code>. For more
                *       information about valid platform versions, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate Platform
                *         Versions</a> in the <i>Amazon Elastic Container Service Developer
                *         Guide</i>.</p>
                */
            PlatformVersion?: string;
            /**
                * <p>Specifies an ECS task group for the task. The maximum length is 255 characters.</p>
                */
            Group?: string;
            /**
                * <p>The capacity provider strategy to use for the task.</p>
                *          <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
                *       parameter must be omitted. If no <code>capacityProviderStrategy</code> or launchType is
                *       specified, the <code>defaultCapacityProviderStrategy</code> for the cluster is used. </p>
                */
            CapacityProviderStrategy?: CapacityProviderStrategyItem[];
            /**
                * <p>Specifies whether to enable Amazon ECS managed tags for the task. For more information,
                *       see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS Resources</a> in the Amazon Elastic Container Service Developer
                *       Guide. </p>
                */
            EnableECSManagedTags?: boolean;
            /**
                * <p>Whether or not to enable the execute command functionality for the containers in this
                *       task. If true, this enables execute command functionality on all containers in the
                *       task.</p>
                */
            EnableExecuteCommand?: boolean;
            /**
                * <p>An array of placement constraint objects to use for the task. You can specify up to 10
                *       constraints per task (including constraints in the task definition and those specified at
                *       runtime).</p>
                */
            PlacementConstraints?: PlacementConstraint[];
            /**
                * <p>The placement strategy objects to use for the task. You can specify a maximum of five
                *       strategy rules per task. </p>
                */
            PlacementStrategy?: PlacementStrategy[];
            /**
                * <p>Specifies whether to propagate the tags from the task definition to the task. If no value
                *       is specified, the tags are not propagated. Tags can only be propagated to the task during task
                *       creation. To add tags to a task after task creation, use the TagResource API action. </p>
                */
            PropagateTags?: PropagateTags | string;
            /**
                * <p>The reference ID to use for the task.</p>
                */
            ReferenceId?: string;
            /**
                * <p>The metadata that you apply to the task to help you categorize and organize them. Each tag
                *       consists of a key and an optional value, both of which you define. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags">RunTask</a> in the Amazon ECS API Reference.</p>
                */
            Tags?: Tag[];
    }
    export namespace EcsParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EcsParameters) => any;
    }
    /**
        * <p>These are custom parameter to be used when the target is an API Gateway REST APIs or
        *       EventBridge ApiDestinations. In the latter case, these are merged with any
        *       InvocationParameters specified on the Connection, with any values from the Connection taking
        *       precedence.</p>
        */
    export interface HttpParameters {
            /**
                * <p>The path parameter values to be used to populate API Gateway REST API or EventBridge
                *       ApiDestination path wildcards ("*").</p>
                */
            PathParameterValues?: string[];
            /**
                * <p>The headers that need to be sent as part of request invoking the API Gateway REST API or
                *       EventBridge ApiDestination.</p>
                */
            HeaderParameters?: Record<string, string>;
            /**
                * <p>The query string keys/values that need to be sent as part of request invoking the API Gateway
                *       REST API or EventBridge ApiDestination.</p>
                */
            QueryStringParameters?: Record<string, string>;
    }
    export namespace HttpParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpParameters) => any;
    }
    /**
        * <p>Contains the parameters needed for you to provide custom input to a target based on one or
        *       more pieces of data extracted from the event.</p>
        */
    export interface InputTransformer {
            /**
                * <p>Map of JSON paths to be extracted from the event. You can then insert these in the
                *       template in <code>InputTemplate</code> to produce the output you want to be sent to the
                *       target.</p>
                *          <p>
                *             <code>InputPathsMap</code> is an array key-value pairs, where each value is a valid JSON
                *       path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket
                *       notation.</p>
                *          <p>The keys cannot start with "Amazon Web Services." </p>
                */
            InputPathsMap?: Record<string, string>;
            /**
                * <p>Input template where you specify placeholders that will be filled with the values of the
                *       keys from <code>InputPathsMap</code> to customize the data sent to the target. Enclose each
                *         <code>InputPathsMaps</code> value in brackets: <<i>value</i>> The
                *       InputTemplate must be valid JSON.</p>
                *
                *          <p>If <code>InputTemplate</code> is a JSON object (surrounded by curly braces), the following
                *       restrictions apply:</p>
                *          <ul>
                *             <li>
                *                <p>The placeholder cannot be used as an object key.</p>
                *             </li>
                *          </ul>
                *          <p>The following example shows the syntax for using <code>InputPathsMap</code> and
                *         <code>InputTemplate</code>.</p>
                *          <p>
                *             <code> "InputTransformer":</code>
                *          </p>
                *          <p>
                *             <code>{</code>
                *          </p>
                *          <p>
                *             <code>"InputPathsMap": {"instance": "$.detail.instance","status":
                *         "$.detail.status"},</code>
                *          </p>
                *          <p>
                *             <code>"InputTemplate": "<instance> is in state <status>"</code>
                *          </p>
                *          <p>
                *             <code>}</code>
                *          </p>
                *          <p>To have the <code>InputTemplate</code> include quote marks within a JSON string, escape
                *       each quote marks with a slash, as in the following example:</p>
                *          <p>
                *             <code> "InputTransformer":</code>
                *          </p>
                *          <p>
                *             <code>{</code>
                *          </p>
                *          <p>
                *             <code>"InputPathsMap": {"instance": "$.detail.instance","status":
                *         "$.detail.status"},</code>
                *          </p>
                *          <p>
                *             <code>"InputTemplate": "<instance> is in state \"<status>\""</code>
                *          </p>
                *          <p>
                *             <code>}</code>
                *          </p>
                *          <p>The <code>InputTemplate</code> can also be valid JSON with varibles in quotes or out, as
                *       in the following example:</p>
                *          <p>
                *             <code> "InputTransformer":</code>
                *          </p>
                *          <p>
                *             <code>{</code>
                *          </p>
                *          <p>
                *             <code>"InputPathsMap": {"instance": "$.detail.instance","status":
                *         "$.detail.status"},</code>
                *          </p>
                *          <p>
                *             <code>"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is
                *         in state \"<status>\""}'</code>
                *          </p>
                *          <p>
                *             <code>}</code>
                *          </p>
                */
            InputTemplate: string | undefined;
    }
    export namespace InputTransformer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputTransformer) => any;
    }
    /**
        * <p>This object enables you to specify a JSON path to extract from the event and use as the
        *       partition key for the Amazon Kinesis data stream, so that you can control the shard to which
        *       the event goes. If you do not include this parameter, the default is to use the
        *         <code>eventId</code> as the partition key.</p>
        */
    export interface KinesisParameters {
            /**
                * <p>The JSON path to be extracted from the event and used as the partition key. For more
                *       information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key">Amazon Kinesis Streams Key
                *         Concepts</a> in the <i>Amazon Kinesis Streams Developer Guide</i>.</p>
                */
            PartitionKeyPath: string | undefined;
    }
    export namespace KinesisParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KinesisParameters) => any;
    }
    /**
        * <p>These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the
        *       Amazon Redshift Data API ExecuteStatement based on EventBridge events.</p>
        */
    export interface RedshiftDataParameters {
            /**
                * <p>The name or ARN of the secret that enables access to the database. Required when
                *       authenticating using Amazon Web Services Secrets Manager.</p>
                */
            SecretManagerArn?: string;
            /**
                * <p>The name of the database. Required when authenticating using temporary credentials.</p>
                */
            Database: string | undefined;
            /**
                * <p>The database user name. Required when authenticating using temporary credentials.</p>
                */
            DbUser?: string;
            /**
                * <p>The SQL statement text to run.</p>
                */
            Sql: string | undefined;
            /**
                * <p>The name of the SQL statement. You can name the SQL statement when you create it to
                *       identify the query.</p>
                */
            StatementName?: string;
            /**
                * <p>Indicates whether to send an event back to EventBridge after the SQL statement
                *       runs.</p>
                */
            WithEvent?: boolean;
    }
    export namespace RedshiftDataParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftDataParameters) => any;
    }
    /**
        * <p>A <code>RetryPolicy</code> object that includes information about the retry policy
        *       settings.</p>
        */
    export interface RetryPolicy {
            /**
                * <p>The maximum number of retry attempts to make before the request fails. Retry attempts
                *       continue until either the maximum number of attempts is made or until the duration of the
                *         <code>MaximumEventAgeInSeconds</code> is met.</p>
                */
            MaximumRetryAttempts?: number;
            /**
                * <p>The maximum amount of time, in seconds, to continue to make retry attempts.</p>
                */
            MaximumEventAgeInSeconds?: number;
    }
    export namespace RetryPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetryPolicy) => any;
    }
    /**
        * <p>Information about the EC2 instances that are to be sent the command, specified as
        *       key-value pairs. Each <code>RunCommandTarget</code> block can include only one key, but this
        *       key may specify multiple values.</p>
        */
    export interface RunCommandTarget {
            /**
                * <p>Can be either <code>tag:</code>
                *             <i>tag-key</i> or
                *       <code>InstanceIds</code>.</p>
                */
            Key: string | undefined;
            /**
                * <p>If <code>Key</code> is <code>tag:</code>
                *             <i>tag-key</i>, <code>Values</code>
                *       is a list of tag values. If <code>Key</code> is <code>InstanceIds</code>, <code>Values</code>
                *       is a list of Amazon EC2 instance IDs.</p>
                */
            Values: string[] | undefined;
    }
    export namespace RunCommandTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunCommandTarget) => any;
    }
    /**
        * <p>This parameter contains the criteria (either InstanceIds or a tag) used to specify which
        *       EC2 instances are to be sent the command. </p>
        */
    export interface RunCommandParameters {
            /**
                * <p>Currently, we support including only one RunCommandTarget block, which specifies either an
                *       array of InstanceIds or a tag.</p>
                */
            RunCommandTargets: RunCommandTarget[] | undefined;
    }
    export namespace RunCommandParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunCommandParameters) => any;
    }
    /**
        * <p>Name/Value pair of a parameter to start execution of a SageMaker Model Building
        *       Pipeline.</p>
        */
    export interface SageMakerPipelineParameter {
            /**
                * <p>Name of parameter to start execution of a SageMaker Model Building Pipeline.</p>
                */
            Name: string | undefined;
            /**
                * <p>Value of parameter to start execution of a SageMaker Model Building Pipeline.</p>
                */
            Value: string | undefined;
    }
    export namespace SageMakerPipelineParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SageMakerPipelineParameter) => any;
    }
    /**
        * <p>These are custom parameters to use when the target is a SageMaker Model Building Pipeline
        *       that starts based on EventBridge events.</p>
        */
    export interface SageMakerPipelineParameters {
            /**
                * <p>List of Parameter names and values for SageMaker Model Building Pipeline execution.</p>
                */
            PipelineParameterList?: SageMakerPipelineParameter[];
    }
    export namespace SageMakerPipelineParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SageMakerPipelineParameters) => any;
    }
    /**
        * <p>This structure includes the custom parameter to be used when the target is an SQS FIFO
        *       queue.</p>
        */
    export interface SqsParameters {
            /**
                * <p>The FIFO message group ID to use as the target.</p>
                */
            MessageGroupId?: string;
    }
    export namespace SqsParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqsParameters) => any;
    }
    /**
        * <p>Targets are the resources to be invoked when a rule is triggered. For a complete list of
        *       services and resources that can be set as a target, see <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html">PutTargets</a>.</p>
        *
        *          <p>If you are setting the event bus of another account as the target, and that account
        *       granted permission to your account through an organization instead of directly by the account
        *       ID, then you must specify a <code>RoleArn</code> with proper permissions in the
        *         <code>Target</code> structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending and
        *           Receiving Events Between Amazon Web Services Accounts</a> in the <i>Amazon EventBridge User
        *         Guide</i>.</p>
        */
    export interface Target {
            /**
                * <p>The ID of the target. We recommend using a memorable and unique string.</p>
                */
            Id: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the target.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is
                *       triggered. If one rule triggers multiple targets, you can use a different IAM role for each
                *       target.</p>
                */
            RoleArn?: string;
            /**
                * <p>Valid JSON text passed to the target. In this case, nothing from the event itself is
                *       passed to the target. For more information, see <a href="http://www.rfc-editor.org/rfc/rfc7159.txt">The JavaScript Object Notation (JSON) Data
                *         Interchange Format</a>.</p>
                */
            Input?: string;
            /**
                * <p>The value of the JSONPath that is used for extracting part of the matched event when
                *       passing it to the target. You must use JSON dot notation, not bracket notation. For more
                *       information about JSON paths, see <a href="http://goessner.net/articles/JsonPath/">JSONPath</a>.</p>
                */
            InputPath?: string;
            /**
                * <p>Settings to enable you to provide custom input to a target based on certain event data.
                *       You can extract one or more key-value pairs from the event and then use that data to send
                *       customized input to the target.</p>
                */
            InputTransformer?: InputTransformer;
            /**
                * <p>The custom parameter you can use to control the shard assignment, when the target is a
                *       Kinesis data stream. If you do not include this parameter, the default is to use the
                *         <code>eventId</code> as the partition key.</p>
                */
            KinesisParameters?: KinesisParameters;
            /**
                * <p>Parameters used when you are using the rule to invoke Amazon EC2 Run Command.</p>
                */
            RunCommandParameters?: RunCommandParameters;
            /**
                * <p>Contains the Amazon ECS task definition and task count to be used, if the event target is
                *       an Amazon ECS task. For more information about Amazon ECS tasks, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html">Task
                *         Definitions </a> in the <i>Amazon EC2 Container Service Developer
                *         Guide</i>.</p>
                */
            EcsParameters?: EcsParameters;
            /**
                * <p>If the event target is an Batch job, this contains the job definition, job name, and
                *       other parameters. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/jobs.html">Jobs</a> in the <i>Batch User
                *         Guide</i>.</p>
                */
            BatchParameters?: BatchParameters;
            /**
                * <p>Contains the message group ID to use when the target is a FIFO queue.</p>
                *          <p>If you specify an SQS FIFO queue as a target, the queue must have content-based
                *       deduplication enabled.</p>
                */
            SqsParameters?: SqsParameters;
            /**
                * <p>Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or
                *       EventBridge ApiDestination.</p>
                *          <p>If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can
                *       use this parameter to specify headers, path parameters, and query string keys/values as part
                *       of your target invoking request. If you're using ApiDestinations, the corresponding Connection
                *       can also have these values configured. In case of any conflicting keys, values from the
                *       Connection take precedence.</p>
                */
            HttpParameters?: HttpParameters;
            /**
                * <p>Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift
                *       cluster.</p>
                *          <p>If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to
                *       invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.</p>
                */
            RedshiftDataParameters?: RedshiftDataParameters;
            /**
                * <p>Contains the SageMaker Model Building Pipeline parameters to start execution of a
                *       SageMaker Model Building Pipeline.</p>
                *          <p>If you specify a SageMaker Model Building Pipeline as a target, you can use this to
                *       specify parameters to start a pipeline execution based on EventBridge events.</p>
                */
            SageMakerPipelineParameters?: SageMakerPipelineParameters;
            /**
                * <p>The <code>DeadLetterConfig</code> that defines the target queue to send dead-letter queue
                *       events to.</p>
                */
            DeadLetterConfig?: DeadLetterConfig;
            /**
                * <p>The <code>RetryPolicy</code> object that contains the retry policy configuration to use
                *       for the dead-letter queue.</p>
                */
            RetryPolicy?: RetryPolicy;
    }
    export namespace Target {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Target) => any;
    }
    export interface ListTargetsByRuleResponse {
            /**
                * <p>The targets assigned to the rule.</p>
                */
            Targets?: Target[];
            /**
                * <p>Indicates whether there are additional results to retrieve. If there are no more results,
                *       the value is null.</p>
                */
            NextToken?: string;
    }
    export namespace ListTargetsByRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetsByRuleResponse) => any;
    }
    /**
        * <p>Represents an event to be submitted.</p>
        */
    export interface PutEventsRequestEntry {
            /**
                * <p>The time stamp of the event, per <a href="https://www.rfc-editor.org/rfc/rfc3339.txt">RFC3339</a>. If no time stamp is provided, the time stamp of the <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html">PutEvents</a> call is used.</p>
                */
            Time?: Date;
            /**
                * <p>The source of the event.</p>
                */
            Source?: string;
            /**
                * <p>Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily
                *       concerns. Any number, including zero, may be present.</p>
                */
            Resources?: string[];
            /**
                * <p>Free-form string used to decide what fields to expect in the event detail.</p>
                */
            DetailType?: string;
            /**
                * <p>A valid JSON string. There is no other schema imposed. The JSON string may contain fields
                *       and nested subobjects.</p>
                */
            Detail?: string;
            /**
                * <p>The name or ARN of the event bus to receive the event. Only the rules that are associated
                *       with this event bus are used to match the event. If you omit this, the default event bus is
                *       used.</p>
                */
            EventBusName?: string;
            /**
                * <p>An X-Ray trade header, which is an http header (X-Amzn-Trace-Id) that contains the
                *       trace-id associated with the event.</p>
                *          <p>To learn more about X-Ray trace headers, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader">Tracing header</a> in the X-Ray Developer Guide.</p>
                */
            TraceHeader?: string;
    }
    export namespace PutEventsRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventsRequestEntry) => any;
    }
    export interface PutEventsRequest {
            /**
                * <p>The entry that defines an event in your system. You can specify several parameters for the
                *       entry such as the source and type of the event, resources associated with the event, and so
                *       on.</p>
                */
            Entries: PutEventsRequestEntry[] | undefined;
    }
    export namespace PutEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventsRequest) => any;
    }
    /**
        * <p>Represents an event that failed to be submitted.</p>
        */
    export interface PutEventsResultEntry {
            /**
                * <p>The ID of the event.</p>
                */
            EventId?: string;
            /**
                * <p>The error code that indicates why the event submission failed.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message that explains why the event submission failed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace PutEventsResultEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventsResultEntry) => any;
    }
    export interface PutEventsResponse {
            /**
                * <p>The number of failed entries.</p>
                */
            FailedEntryCount?: number;
            /**
                * <p>The successfully and unsuccessfully ingested events results. If the ingestion was
                *       successful, the entry has the event ID in it. Otherwise, you can use the error code and error
                *       message to identify the problem with the entry.</p>
                */
            Entries?: PutEventsResultEntry[];
    }
    export namespace PutEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventsResponse) => any;
    }
    /**
        * <p>The details about an event generated by an SaaS partner.</p>
        */
    export interface PutPartnerEventsRequestEntry {
            /**
                * <p>The date and time of the event.</p>
                */
            Time?: Date;
            /**
                * <p>The event source that is generating the entry.</p>
                */
            Source?: string;
            /**
                * <p>Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily
                *       concerns. Any number, including zero, may be present.</p>
                */
            Resources?: string[];
            /**
                * <p>A free-form string used to decide what fields to expect in the event detail.</p>
                */
            DetailType?: string;
            /**
                * <p>A valid JSON string. There is no other schema imposed. The JSON string may contain fields
                *       and nested subobjects.</p>
                */
            Detail?: string;
    }
    export namespace PutPartnerEventsRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPartnerEventsRequestEntry) => any;
    }
    export interface PutPartnerEventsRequest {
            /**
                * <p>The list of events to write to the event bus.</p>
                */
            Entries: PutPartnerEventsRequestEntry[] | undefined;
    }
    export namespace PutPartnerEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPartnerEventsRequest) => any;
    }
    /**
        * <p>Represents an event that a partner tried to generate, but failed.</p>
        */
    export interface PutPartnerEventsResultEntry {
            /**
                * <p>The ID of the event.</p>
                */
            EventId?: string;
            /**
                * <p>The error code that indicates why the event submission failed.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message that explains why the event submission failed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace PutPartnerEventsResultEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPartnerEventsResultEntry) => any;
    }
    export interface PutPartnerEventsResponse {
            /**
                * <p>The number of events from this operation that could not be written to the partner event
                *       bus.</p>
                */
            FailedEntryCount?: number;
            /**
                * <p>The list of events from this operation that were successfully written to the partner event
                *       bus.</p>
                */
            Entries?: PutPartnerEventsResultEntry[];
    }
    export namespace PutPartnerEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPartnerEventsResponse) => any;
    }
    /**
        * <p>The event bus policy is too long. For more information, see the limits.</p>
        */
    export class PolicyLengthExceededException extends __BaseException {
            readonly name: "PolicyLengthExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyLengthExceededException, __BaseException>);
    }
    /**
        * <p>A JSON string which you can use to limit the event bus permissions you are granting to
        *       only accounts that fulfill the condition. Currently, the only supported condition is
        *       membership in a certain Amazon Web Services organization. The string must contain <code>Type</code>,
        *         <code>Key</code>, and <code>Value</code> fields. The <code>Value</code> field specifies the
        *       ID of the Amazon Web Services organization. Following is an example value for <code>Condition</code>:</p>
        *          <p>
        *             <code>'{"Type" : "StringEquals", "Key": "aws:PrincipalOrgID", "Value":
        *         "o-1234567890"}'</code>
        *          </p>
        */
    export interface Condition {
            /**
                * <p>Specifies the type of condition. Currently the only supported value is
                *         <code>StringEquals</code>.</p>
                */
            Type: string | undefined;
            /**
                * <p>Specifies the key for the condition. Currently the only supported key is
                *         <code>aws:PrincipalOrgID</code>.</p>
                */
            Key: string | undefined;
            /**
                * <p>Specifies the value for the key. Currently, this must be the ID of the
                *       organization.</p>
                */
            Value: string | undefined;
    }
    export namespace Condition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Condition) => any;
    }
    export interface PutPermissionRequest {
            /**
                * <p>The name of the event bus associated with the rule. If you omit this, the default event
                *       bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>The action that you are enabling the other account to perform.</p>
                */
            Action?: string;
            /**
                * <p>The 12-digit Amazon Web Services account ID that you are permitting to put events to your default event
                *       bus. Specify "*" to permit any account to put events to your default event bus.</p>
                *
                *          <p>If you specify "*" without specifying <code>Condition</code>, avoid creating rules that
                *       may match undesirable events. To create more secure rules, make sure that the event pattern
                *       for each rule contains an <code>account</code> field with a specific account ID from which to
                *       receive events. Rules with an account field do not match any events sent from other
                *       accounts.</p>
                */
            Principal?: string;
            /**
                * <p>An identifier string for the external account that you are granting permissions to. If you
                *       later want to revoke the permission for this external account, specify this
                *       <code>StatementId</code> when you run <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_RemovePermission.html">RemovePermission</a>.</p>
                */
            StatementId?: string;
            /**
                * <p>This parameter enables you to limit the permission to accounts that fulfill a certain
                *       condition, such as being a member of a certain Amazon Web Services organization. For more information about
                *       Amazon Web Services Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html">What Is Amazon Web Services
                *         Organizations</a> in the <i>Amazon Web Services Organizations User Guide</i>.</p>
                *          <p>If you specify <code>Condition</code> with an Amazon Web Services organization ID, and specify "*" as the
                *       value for <code>Principal</code>, you grant permission to all the accounts in the named
                *       organization.</p>
                *
                *          <p>The <code>Condition</code> is a JSON string which must contain <code>Type</code>,
                *         <code>Key</code>, and <code>Value</code> fields.</p>
                */
            Condition?: Condition;
            /**
                * <p>A JSON string that describes the permission policy statement. You can include a
                *         <code>Policy</code> parameter in the request instead of using the <code>StatementId</code>,
                *         <code>Action</code>, <code>Principal</code>, or <code>Condition</code> parameters.</p>
                */
            Policy?: string;
    }
    export namespace PutPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPermissionRequest) => any;
    }
    export interface PutRuleRequest {
            /**
                * <p>The name of the rule that you are creating or updating.</p>
                */
            Name: string | undefined;
            /**
                * <p>The scheduling expression. For example, "cron(0 20 * * ? *)" or "rate(5 minutes)".</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>The event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event
                *         Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
                */
            EventPattern?: string;
            /**
                * <p>Indicates whether the rule is enabled or disabled.</p>
                */
            State?: RuleState | string;
            /**
                * <p>A description of the rule.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role associated with the rule.</p>
                *          <p>If you're setting an event bus in another account as the target and that account granted
                *       permission to your account through an organization instead of directly by the account ID, you
                *       must specify a <code>RoleArn</code> with proper permissions in the <code>Target</code>
                *       structure, instead of here in this parameter.</p>
                */
            RoleArn?: string;
            /**
                * <p>The list of key-value pairs to associate with the rule.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The name or ARN of the event bus to associate with this rule. If you omit this, the
                *       default event bus is used.</p>
                */
            EventBusName?: string;
    }
    export namespace PutRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRuleRequest) => any;
    }
    export interface PutRuleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule.</p>
                */
            RuleArn?: string;
    }
    export namespace PutRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRuleResponse) => any;
    }
    export interface PutTargetsRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Rule: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>The targets to update or add to the rule.</p>
                */
            Targets: Target[] | undefined;
    }
    export namespace PutTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutTargetsRequest) => any;
    }
    /**
        * <p>Represents a target that failed to be added to a rule.</p>
        */
    export interface PutTargetsResultEntry {
            /**
                * <p>The ID of the target.</p>
                */
            TargetId?: string;
            /**
                * <p>The error code that indicates why the target addition failed. If the value is
                *         <code>ConcurrentModificationException</code>, too many requests were made at the same
                *       time.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message that explains why the target addition failed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace PutTargetsResultEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutTargetsResultEntry) => any;
    }
    export interface PutTargetsResponse {
            /**
                * <p>The number of failed entries.</p>
                */
            FailedEntryCount?: number;
            /**
                * <p>The failed target entries.</p>
                */
            FailedEntries?: PutTargetsResultEntry[];
    }
    export namespace PutTargetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutTargetsResponse) => any;
    }
    export interface RemovePermissionRequest {
            /**
                * <p>The statement ID corresponding to the account that is no longer allowed to put events to
                *       the default event bus.</p>
                */
            StatementId?: string;
            /**
                * <p>Specifies whether to remove all permissions.</p>
                */
            RemoveAllPermissions?: boolean;
            /**
                * <p>The name of the event bus to revoke permissions for. If you omit this, the default event
                *       bus is used.</p>
                */
            EventBusName?: string;
    }
    export namespace RemovePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemovePermissionRequest) => any;
    }
    export interface RemoveTargetsRequest {
            /**
                * <p>The name of the rule.</p>
                */
            Rule: string | undefined;
            /**
                * <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
                *       event bus is used.</p>
                */
            EventBusName?: string;
            /**
                * <p>The IDs of the targets to remove from the rule.</p>
                */
            Ids: string[] | undefined;
            /**
                * <p>If this is a managed rule, created by an Amazon Web Services service on your behalf, you must specify
                *         <code>Force</code> as <code>True</code> to remove targets. This parameter is ignored for
                *       rules that are not managed rules. You can check whether a rule is a managed rule by using
                *         <code>DescribeRule</code> or <code>ListRules</code> and checking the <code>ManagedBy</code>
                *       field of the response.</p>
                */
            Force?: boolean;
    }
    export namespace RemoveTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTargetsRequest) => any;
    }
    /**
        * <p>Represents a target that failed to be removed from a rule.</p>
        */
    export interface RemoveTargetsResultEntry {
            /**
                * <p>The ID of the target.</p>
                */
            TargetId?: string;
            /**
                * <p>The error code that indicates why the target removal failed. If the value is
                *         <code>ConcurrentModificationException</code>, too many requests were made at the same
                *       time.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message that explains why the target removal failed.</p>
                */
            ErrorMessage?: string;
    }
    export namespace RemoveTargetsResultEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTargetsResultEntry) => any;
    }
    export interface RemoveTargetsResponse {
            /**
                * <p>The number of failed entries.</p>
                */
            FailedEntryCount?: number;
            /**
                * <p>The failed target entries.</p>
                */
            FailedEntries?: RemoveTargetsResultEntry[];
    }
    export namespace RemoveTargetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTargetsResponse) => any;
    }
    export interface StartReplayRequest {
            /**
                * <p>The name of the replay to start.</p>
                */
            ReplayName: string | undefined;
            /**
                * <p>A description for the replay to start.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the archive to replay events from.</p>
                */
            EventSourceArn: string | undefined;
            /**
                * <p>A time stamp for the time to start replaying events. Only events that occurred between the
                *         <code>EventStartTime</code> and <code>EventEndTime</code> are replayed.</p>
                */
            EventStartTime: Date | undefined;
            /**
                * <p>A time stamp for the time to stop replaying events. Only events that occurred between the
                *         <code>EventStartTime</code> and <code>EventEndTime</code> are replayed.</p>
                */
            EventEndTime: Date | undefined;
            /**
                * <p>A <code>ReplayDestination</code> object that includes details about the destination for
                *       the replay.</p>
                */
            Destination: ReplayDestination | undefined;
    }
    export namespace StartReplayRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplayRequest) => any;
    }
    export interface StartReplayResponse {
            /**
                * <p>The ARN of the replay.</p>
                */
            ReplayArn?: string;
            /**
                * <p>The state of the replay.</p>
                */
            State?: ReplayState | string;
            /**
                * <p>The reason that the replay is in the state.</p>
                */
            StateReason?: string;
            /**
                * <p>The time at which the replay started.</p>
                */
            ReplayStartTime?: Date;
    }
    export namespace StartReplayResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplayResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the EventBridge resource that you're adding tags to.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The list of key-value pairs to associate with the resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface TestEventPatternRequest {
            /**
                * <p>The event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event
                *         Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
                */
            EventPattern: string | undefined;
            /**
                * <p>The event, in JSON format, to test against the event pattern. The JSON must follow the
                *       format specified in <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/aws-events.html">Amazon Web Services Events</a>, and the following
                *       fields are mandatory:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>id</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>account</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>source</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>time</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>region</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>resources</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>detail-type</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Event: string | undefined;
    }
    export namespace TestEventPatternRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestEventPatternRequest) => any;
    }
    export interface TestEventPatternResponse {
            /**
                * <p>Indicates whether the event matches the event pattern.</p>
                */
            Result?: boolean;
    }
    export namespace TestEventPatternResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestEventPatternResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the EventBridge resource from which you are removing tags.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The list of tag keys to remove from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateApiDestinationRequest {
            /**
                * <p>The name of the API destination to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the API destination to update.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the connection to use for the API destination.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The URL to the endpoint to use for the API destination.</p>
                */
            InvocationEndpoint?: string;
            /**
                * <p>The method to use for the API destination.</p>
                */
            HttpMethod?: ApiDestinationHttpMethod | string;
            /**
                * <p>The maximum number of invocations per second to send to the API destination.</p>
                */
            InvocationRateLimitPerSecond?: number;
    }
    export namespace UpdateApiDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiDestinationRequest) => any;
    }
    export interface UpdateApiDestinationResponse {
            /**
                * <p>The ARN of the API destination that was updated.</p>
                */
            ApiDestinationArn?: string;
            /**
                * <p>The state of the API destination that was updated.</p>
                */
            ApiDestinationState?: ApiDestinationState | string;
            /**
                * <p>A time stamp for the time that the API destination was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the API destination was last modified.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace UpdateApiDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiDestinationResponse) => any;
    }
    export interface UpdateArchiveRequest {
            /**
                * <p>The name of the archive to update.</p>
                */
            ArchiveName: string | undefined;
            /**
                * <p>The description for the archive.</p>
                */
            Description?: string;
            /**
                * <p>The event pattern to use to filter events sent to the archive.</p>
                */
            EventPattern?: string;
            /**
                * <p>The number of days to retain events in the archive.</p>
                */
            RetentionDays?: number;
    }
    export namespace UpdateArchiveRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateArchiveRequest) => any;
    }
    export interface UpdateArchiveResponse {
            /**
                * <p>The ARN of the archive.</p>
                */
            ArchiveArn?: string;
            /**
                * <p>The state of the archive.</p>
                */
            State?: ArchiveState | string;
            /**
                * <p>The reason that the archive is in the current state.</p>
                */
            StateReason?: string;
            /**
                * <p>The time at which the archive was updated.</p>
                */
            CreationTime?: Date;
    }
    export namespace UpdateArchiveResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateArchiveResponse) => any;
    }
    /**
        * <p>Contains the API key authorization parameters to use to update the connection.</p>
        */
    export interface UpdateConnectionApiKeyAuthRequestParameters {
            /**
                * <p>The name of the API key to use for authorization.</p>
                */
            ApiKeyName?: string;
            /**
                * <p>The value associated with teh API key to use for authorization.</p>
                */
            ApiKeyValue?: string;
    }
    export namespace UpdateConnectionApiKeyAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionApiKeyAuthRequestParameters) => any;
    }
    /**
        * <p>Contains the Basic authorization parameters for the connection.</p>
        */
    export interface UpdateConnectionBasicAuthRequestParameters {
            /**
                * <p>The user name to use for Basic authorization.</p>
                */
            Username?: string;
            /**
                * <p>The password associated with the user name to use for Basic authorization.</p>
                */
            Password?: string;
    }
    export namespace UpdateConnectionBasicAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionBasicAuthRequestParameters) => any;
    }
    /**
        * <p>Contains the OAuth authorization parameters to use for the connection.</p>
        */
    export interface UpdateConnectionOAuthClientRequestParameters {
            /**
                * <p>The client ID to use for OAuth authorization.</p>
                */
            ClientID?: string;
            /**
                * <p>The client secret assciated with the client ID to use for OAuth authorization.</p>
                */
            ClientSecret?: string;
    }
    export namespace UpdateConnectionOAuthClientRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionOAuthClientRequestParameters) => any;
    }
    /**
        * <p>Contains the OAuth request parameters to use for the connection.</p>
        */
    export interface UpdateConnectionOAuthRequestParameters {
            /**
                * <p>A <code>UpdateConnectionOAuthClientRequestParameters</code> object that contains the
                *       client parameters to use for the connection when OAuth is specified as the authorization
                *       type.</p>
                */
            ClientParameters?: UpdateConnectionOAuthClientRequestParameters;
            /**
                * <p>The URL to the authorization endpoint when OAuth is specified as the authorization
                *       type.</p>
                */
            AuthorizationEndpoint?: string;
            /**
                * <p>The method used to connect to the HTTP endpoint.</p>
                */
            HttpMethod?: ConnectionOAuthHttpMethod | string;
            /**
                * <p>The additional HTTP parameters used for the OAuth authorization request.</p>
                */
            OAuthHttpParameters?: ConnectionHttpParameters;
    }
    export namespace UpdateConnectionOAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionOAuthRequestParameters) => any;
    }
    /**
        * <p>Contains the additional parameters to use for the connection.</p>
        */
    export interface UpdateConnectionAuthRequestParameters {
            /**
                * <p>A <code>UpdateConnectionBasicAuthRequestParameters</code> object that contains the
                *       authorization parameters for Basic authorization.</p>
                */
            BasicAuthParameters?: UpdateConnectionBasicAuthRequestParameters;
            /**
                * <p>A <code>UpdateConnectionOAuthRequestParameters</code> object that contains the
                *       authorization parameters for OAuth authorization.</p>
                */
            OAuthParameters?: UpdateConnectionOAuthRequestParameters;
            /**
                * <p>A <code>UpdateConnectionApiKeyAuthRequestParameters</code> object that contains the
                *       authorization parameters for API key authorization.</p>
                */
            ApiKeyAuthParameters?: UpdateConnectionApiKeyAuthRequestParameters;
            /**
                * <p>A <code>ConnectionHttpParameters</code> object that contains the additional parameters to
                *       use for the connection.</p>
                */
            InvocationHttpParameters?: ConnectionHttpParameters;
    }
    export namespace UpdateConnectionAuthRequestParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionAuthRequestParameters) => any;
    }
    export interface UpdateConnectionRequest {
            /**
                * <p>The name of the connection to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the connection.</p>
                */
            Description?: string;
            /**
                * <p>The type of authorization to use for the connection.</p>
                */
            AuthorizationType?: ConnectionAuthorizationType | string;
            /**
                * <p>The authorization parameters to use for the connection.</p>
                */
            AuthParameters?: UpdateConnectionAuthRequestParameters;
    }
    export namespace UpdateConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionRequest) => any;
    }
    export interface UpdateConnectionResponse {
            /**
                * <p>The ARN of the connection that was updated.</p>
                */
            ConnectionArn?: string;
            /**
                * <p>The state of the connection that was updated.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>A time stamp for the time that the connection was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A time stamp for the time that the connection was last authorized.</p>
                */
            LastAuthorizedTime?: Date;
    }
    export namespace UpdateConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionResponse) => any;
    }
}

declare module '@aws-sdk/client-cloudwatch-events/node_modules/@aws-sdk/client-cloudwatch-events/dist-types/models/CloudWatchEventsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CloudWatchEvents service.
        */
    export class CloudWatchEventsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

