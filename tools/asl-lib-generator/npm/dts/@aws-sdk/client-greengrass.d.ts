// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-greengrass' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateRoleToGroupCommandInput, AssociateRoleToGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/AssociateRoleToGroupCommand";
    import { AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/AssociateServiceRoleToAccountCommand";
    import { CreateConnectorDefinitionCommandInput, CreateConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateConnectorDefinitionCommand";
    import { CreateConnectorDefinitionVersionCommandInput, CreateConnectorDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateConnectorDefinitionVersionCommand";
    import { CreateCoreDefinitionCommandInput, CreateCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateCoreDefinitionCommand";
    import { CreateCoreDefinitionVersionCommandInput, CreateCoreDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateCoreDefinitionVersionCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeploymentCommand";
    import { CreateDeviceDefinitionCommandInput, CreateDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeviceDefinitionCommand";
    import { CreateDeviceDefinitionVersionCommandInput, CreateDeviceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeviceDefinitionVersionCommand";
    import { CreateFunctionDefinitionCommandInput, CreateFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateFunctionDefinitionCommand";
    import { CreateFunctionDefinitionVersionCommandInput, CreateFunctionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateFunctionDefinitionVersionCommand";
    import { CreateGroupCertificateAuthorityCommandInput, CreateGroupCertificateAuthorityCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupCertificateAuthorityCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupCommand";
    import { CreateGroupVersionCommandInput, CreateGroupVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupVersionCommand";
    import { CreateLoggerDefinitionCommandInput, CreateLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateLoggerDefinitionCommand";
    import { CreateLoggerDefinitionVersionCommandInput, CreateLoggerDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateLoggerDefinitionVersionCommand";
    import { CreateResourceDefinitionCommandInput, CreateResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateResourceDefinitionCommand";
    import { CreateResourceDefinitionVersionCommandInput, CreateResourceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateResourceDefinitionVersionCommand";
    import { CreateSoftwareUpdateJobCommandInput, CreateSoftwareUpdateJobCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSoftwareUpdateJobCommand";
    import { CreateSubscriptionDefinitionCommandInput, CreateSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSubscriptionDefinitionCommand";
    import { CreateSubscriptionDefinitionVersionCommandInput, CreateSubscriptionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSubscriptionDefinitionVersionCommand";
    import { DeleteConnectorDefinitionCommandInput, DeleteConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteConnectorDefinitionCommand";
    import { DeleteCoreDefinitionCommandInput, DeleteCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteCoreDefinitionCommand";
    import { DeleteDeviceDefinitionCommandInput, DeleteDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteDeviceDefinitionCommand";
    import { DeleteFunctionDefinitionCommandInput, DeleteFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteFunctionDefinitionCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteGroupCommand";
    import { DeleteLoggerDefinitionCommandInput, DeleteLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteLoggerDefinitionCommand";
    import { DeleteResourceDefinitionCommandInput, DeleteResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteResourceDefinitionCommand";
    import { DeleteSubscriptionDefinitionCommandInput, DeleteSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteSubscriptionDefinitionCommand";
    import { DisassociateRoleFromGroupCommandInput, DisassociateRoleFromGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DisassociateRoleFromGroupCommand";
    import { DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DisassociateServiceRoleFromAccountCommand";
    import { GetAssociatedRoleCommandInput, GetAssociatedRoleCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetAssociatedRoleCommand";
    import { GetBulkDeploymentStatusCommandInput, GetBulkDeploymentStatusCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetBulkDeploymentStatusCommand";
    import { GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectivityInfoCommand";
    import { GetConnectorDefinitionCommandInput, GetConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectorDefinitionCommand";
    import { GetConnectorDefinitionVersionCommandInput, GetConnectorDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectorDefinitionVersionCommand";
    import { GetCoreDefinitionCommandInput, GetCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetCoreDefinitionCommand";
    import { GetCoreDefinitionVersionCommandInput, GetCoreDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetCoreDefinitionVersionCommand";
    import { GetDeploymentStatusCommandInput, GetDeploymentStatusCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeploymentStatusCommand";
    import { GetDeviceDefinitionCommandInput, GetDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeviceDefinitionCommand";
    import { GetDeviceDefinitionVersionCommandInput, GetDeviceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeviceDefinitionVersionCommand";
    import { GetFunctionDefinitionCommandInput, GetFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetFunctionDefinitionCommand";
    import { GetFunctionDefinitionVersionCommandInput, GetFunctionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetFunctionDefinitionVersionCommand";
    import { GetGroupCertificateAuthorityCommandInput, GetGroupCertificateAuthorityCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCertificateAuthorityCommand";
    import { GetGroupCertificateConfigurationCommandInput, GetGroupCertificateConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCertificateConfigurationCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCommand";
    import { GetGroupVersionCommandInput, GetGroupVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupVersionCommand";
    import { GetLoggerDefinitionCommandInput, GetLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetLoggerDefinitionCommand";
    import { GetLoggerDefinitionVersionCommandInput, GetLoggerDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetLoggerDefinitionVersionCommand";
    import { GetResourceDefinitionCommandInput, GetResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetResourceDefinitionCommand";
    import { GetResourceDefinitionVersionCommandInput, GetResourceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetResourceDefinitionVersionCommand";
    import { GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetServiceRoleForAccountCommand";
    import { GetSubscriptionDefinitionCommandInput, GetSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetSubscriptionDefinitionCommand";
    import { GetSubscriptionDefinitionVersionCommandInput, GetSubscriptionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetSubscriptionDefinitionVersionCommand";
    import { GetThingRuntimeConfigurationCommandInput, GetThingRuntimeConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetThingRuntimeConfigurationCommand";
    import { ListBulkDeploymentDetailedReportsCommandInput, ListBulkDeploymentDetailedReportsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListBulkDeploymentDetailedReportsCommand";
    import { ListBulkDeploymentsCommandInput, ListBulkDeploymentsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListBulkDeploymentsCommand";
    import { ListConnectorDefinitionsCommandInput, ListConnectorDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListConnectorDefinitionsCommand";
    import { ListConnectorDefinitionVersionsCommandInput, ListConnectorDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListConnectorDefinitionVersionsCommand";
    import { ListCoreDefinitionsCommandInput, ListCoreDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListCoreDefinitionsCommand";
    import { ListCoreDefinitionVersionsCommandInput, ListCoreDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListCoreDefinitionVersionsCommand";
    import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeploymentsCommand";
    import { ListDeviceDefinitionsCommandInput, ListDeviceDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeviceDefinitionsCommand";
    import { ListDeviceDefinitionVersionsCommandInput, ListDeviceDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeviceDefinitionVersionsCommand";
    import { ListFunctionDefinitionsCommandInput, ListFunctionDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListFunctionDefinitionsCommand";
    import { ListFunctionDefinitionVersionsCommandInput, ListFunctionDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListFunctionDefinitionVersionsCommand";
    import { ListGroupCertificateAuthoritiesCommandInput, ListGroupCertificateAuthoritiesCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupCertificateAuthoritiesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupsCommand";
    import { ListGroupVersionsCommandInput, ListGroupVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupVersionsCommand";
    import { ListLoggerDefinitionsCommandInput, ListLoggerDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListLoggerDefinitionsCommand";
    import { ListLoggerDefinitionVersionsCommandInput, ListLoggerDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListLoggerDefinitionVersionsCommand";
    import { ListResourceDefinitionsCommandInput, ListResourceDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListResourceDefinitionsCommand";
    import { ListResourceDefinitionVersionsCommandInput, ListResourceDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListResourceDefinitionVersionsCommand";
    import { ListSubscriptionDefinitionsCommandInput, ListSubscriptionDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListSubscriptionDefinitionsCommand";
    import { ListSubscriptionDefinitionVersionsCommandInput, ListSubscriptionDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListSubscriptionDefinitionVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListTagsForResourceCommand";
    import { ResetDeploymentsCommandInput, ResetDeploymentsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ResetDeploymentsCommand";
    import { StartBulkDeploymentCommandInput, StartBulkDeploymentCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/StartBulkDeploymentCommand";
    import { StopBulkDeploymentCommandInput, StopBulkDeploymentCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/StopBulkDeploymentCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UntagResourceCommand";
    import { UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateConnectivityInfoCommand";
    import { UpdateConnectorDefinitionCommandInput, UpdateConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateConnectorDefinitionCommand";
    import { UpdateCoreDefinitionCommandInput, UpdateCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateCoreDefinitionCommand";
    import { UpdateDeviceDefinitionCommandInput, UpdateDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateDeviceDefinitionCommand";
    import { UpdateFunctionDefinitionCommandInput, UpdateFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateFunctionDefinitionCommand";
    import { UpdateGroupCertificateConfigurationCommandInput, UpdateGroupCertificateConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateGroupCertificateConfigurationCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateGroupCommand";
    import { UpdateLoggerDefinitionCommandInput, UpdateLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateLoggerDefinitionCommand";
    import { UpdateResourceDefinitionCommandInput, UpdateResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateResourceDefinitionCommand";
    import { UpdateSubscriptionDefinitionCommandInput, UpdateSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateSubscriptionDefinitionCommand";
    import { UpdateThingRuntimeConfigurationCommandInput, UpdateThingRuntimeConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateThingRuntimeConfigurationCommand";
    import { GreengrassClient } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    /**
        * AWS IoT Greengrass seamlessly extends AWS onto physical devices so they can act locally on the data they generate, while still using the cloud for management, analytics, and durable storage. AWS IoT Greengrass ensures your devices can respond quickly to local events and operate with intermittent connectivity. AWS IoT Greengrass minimizes the cost of transmitting data to the cloud by allowing you to author AWS Lambda functions that execute locally.
        */
    export class Greengrass extends GreengrassClient {
            /**
                * Associates a role with a group. Your Greengrass core will use the role to access AWS cloud services. The role's permissions should allow Greengrass core Lambda functions to perform actions against the cloud.
                */
            associateRoleToGroup(args: AssociateRoleToGroupCommandInput, options?: __HttpHandlerOptions): Promise<AssociateRoleToGroupCommandOutput>;
            associateRoleToGroup(args: AssociateRoleToGroupCommandInput, cb: (err: any, data?: AssociateRoleToGroupCommandOutput) => void): void;
            associateRoleToGroup(args: AssociateRoleToGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateRoleToGroupCommandOutput) => void): void;
            /**
                * Associates a role with your account. AWS IoT Greengrass will use the role to access your Lambda functions and AWS IoT resources. This is necessary for deployments to succeed. The role must have at least minimum permissions in the policy ''AWSGreengrassResourceAccessRolePolicy''.
                */
            associateServiceRoleToAccount(args: AssociateServiceRoleToAccountCommandInput, options?: __HttpHandlerOptions): Promise<AssociateServiceRoleToAccountCommandOutput>;
            associateServiceRoleToAccount(args: AssociateServiceRoleToAccountCommandInput, cb: (err: any, data?: AssociateServiceRoleToAccountCommandOutput) => void): void;
            associateServiceRoleToAccount(args: AssociateServiceRoleToAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateServiceRoleToAccountCommandOutput) => void): void;
            /**
                * Creates a connector definition. You may provide the initial version of the connector definition now or use ''CreateConnectorDefinitionVersion'' at a later time.
                */
            createConnectorDefinition(args: CreateConnectorDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectorDefinitionCommandOutput>;
            createConnectorDefinition(args: CreateConnectorDefinitionCommandInput, cb: (err: any, data?: CreateConnectorDefinitionCommandOutput) => void): void;
            createConnectorDefinition(args: CreateConnectorDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectorDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a connector definition which has already been defined.
                */
            createConnectorDefinitionVersion(args: CreateConnectorDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectorDefinitionVersionCommandOutput>;
            createConnectorDefinitionVersion(args: CreateConnectorDefinitionVersionCommandInput, cb: (err: any, data?: CreateConnectorDefinitionVersionCommandOutput) => void): void;
            createConnectorDefinitionVersion(args: CreateConnectorDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectorDefinitionVersionCommandOutput) => void): void;
            /**
                * Creates a core definition. You may provide the initial version of the core definition now or use ''CreateCoreDefinitionVersion'' at a later time. Greengrass groups must each contain exactly one Greengrass core.
                */
            createCoreDefinition(args: CreateCoreDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateCoreDefinitionCommandOutput>;
            createCoreDefinition(args: CreateCoreDefinitionCommandInput, cb: (err: any, data?: CreateCoreDefinitionCommandOutput) => void): void;
            createCoreDefinition(args: CreateCoreDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCoreDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a core definition that has already been defined. Greengrass groups must each contain exactly one Greengrass core.
                */
            createCoreDefinitionVersion(args: CreateCoreDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateCoreDefinitionVersionCommandOutput>;
            createCoreDefinitionVersion(args: CreateCoreDefinitionVersionCommandInput, cb: (err: any, data?: CreateCoreDefinitionVersionCommandOutput) => void): void;
            createCoreDefinitionVersion(args: CreateCoreDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCoreDefinitionVersionCommandOutput) => void): void;
            /**
                * Creates a deployment. ''CreateDeployment'' requests are idempotent with respect to the ''X-Amzn-Client-Token'' token and the request parameters.
                */
            createDeployment(args: CreateDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentCommandOutput>;
            createDeployment(args: CreateDeploymentCommandInput, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            createDeployment(args: CreateDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            /**
                * Creates a device definition. You may provide the initial version of the device definition now or use ''CreateDeviceDefinitionVersion'' at a later time.
                */
            createDeviceDefinition(args: CreateDeviceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeviceDefinitionCommandOutput>;
            createDeviceDefinition(args: CreateDeviceDefinitionCommandInput, cb: (err: any, data?: CreateDeviceDefinitionCommandOutput) => void): void;
            createDeviceDefinition(args: CreateDeviceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeviceDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a device definition that has already been defined.
                */
            createDeviceDefinitionVersion(args: CreateDeviceDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeviceDefinitionVersionCommandOutput>;
            createDeviceDefinitionVersion(args: CreateDeviceDefinitionVersionCommandInput, cb: (err: any, data?: CreateDeviceDefinitionVersionCommandOutput) => void): void;
            createDeviceDefinitionVersion(args: CreateDeviceDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeviceDefinitionVersionCommandOutput) => void): void;
            /**
                * Creates a Lambda function definition which contains a list of Lambda functions and their configurations to be used in a group. You can create an initial version of the definition by providing a list of Lambda functions and their configurations now, or use ''CreateFunctionDefinitionVersion'' later.
                */
            createFunctionDefinition(args: CreateFunctionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateFunctionDefinitionCommandOutput>;
            createFunctionDefinition(args: CreateFunctionDefinitionCommandInput, cb: (err: any, data?: CreateFunctionDefinitionCommandOutput) => void): void;
            createFunctionDefinition(args: CreateFunctionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFunctionDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a Lambda function definition that has already been defined.
                */
            createFunctionDefinitionVersion(args: CreateFunctionDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateFunctionDefinitionVersionCommandOutput>;
            createFunctionDefinitionVersion(args: CreateFunctionDefinitionVersionCommandInput, cb: (err: any, data?: CreateFunctionDefinitionVersionCommandOutput) => void): void;
            createFunctionDefinitionVersion(args: CreateFunctionDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFunctionDefinitionVersionCommandOutput) => void): void;
            /**
                * Creates a group. You may provide the initial version of the group or use ''CreateGroupVersion'' at a later time. Tip: You can use the ''gg_group_setup'' package (https://github.com/awslabs/aws-greengrass-group-setup) as a library or command-line application to create and deploy Greengrass groups.
                */
            createGroup(args: CreateGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCommandOutput>;
            createGroup(args: CreateGroupCommandInput, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            createGroup(args: CreateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            /**
                * Creates a CA for the group. If a CA already exists, it will rotate the existing CA.
                */
            createGroupCertificateAuthority(args: CreateGroupCertificateAuthorityCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCertificateAuthorityCommandOutput>;
            createGroupCertificateAuthority(args: CreateGroupCertificateAuthorityCommandInput, cb: (err: any, data?: CreateGroupCertificateAuthorityCommandOutput) => void): void;
            createGroupCertificateAuthority(args: CreateGroupCertificateAuthorityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCertificateAuthorityCommandOutput) => void): void;
            /**
                * Creates a version of a group which has already been defined.
                */
            createGroupVersion(args: CreateGroupVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupVersionCommandOutput>;
            createGroupVersion(args: CreateGroupVersionCommandInput, cb: (err: any, data?: CreateGroupVersionCommandOutput) => void): void;
            createGroupVersion(args: CreateGroupVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupVersionCommandOutput) => void): void;
            /**
                * Creates a logger definition. You may provide the initial version of the logger definition now or use ''CreateLoggerDefinitionVersion'' at a later time.
                */
            createLoggerDefinition(args: CreateLoggerDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoggerDefinitionCommandOutput>;
            createLoggerDefinition(args: CreateLoggerDefinitionCommandInput, cb: (err: any, data?: CreateLoggerDefinitionCommandOutput) => void): void;
            createLoggerDefinition(args: CreateLoggerDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoggerDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a logger definition that has already been defined.
                */
            createLoggerDefinitionVersion(args: CreateLoggerDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoggerDefinitionVersionCommandOutput>;
            createLoggerDefinitionVersion(args: CreateLoggerDefinitionVersionCommandInput, cb: (err: any, data?: CreateLoggerDefinitionVersionCommandOutput) => void): void;
            createLoggerDefinitionVersion(args: CreateLoggerDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoggerDefinitionVersionCommandOutput) => void): void;
            /**
                * Creates a resource definition which contains a list of resources to be used in a group. You can create an initial version of the definition by providing a list of resources now, or use ''CreateResourceDefinitionVersion'' later.
                */
            createResourceDefinition(args: CreateResourceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateResourceDefinitionCommandOutput>;
            createResourceDefinition(args: CreateResourceDefinitionCommandInput, cb: (err: any, data?: CreateResourceDefinitionCommandOutput) => void): void;
            createResourceDefinition(args: CreateResourceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateResourceDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a resource definition that has already been defined.
                */
            createResourceDefinitionVersion(args: CreateResourceDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateResourceDefinitionVersionCommandOutput>;
            createResourceDefinitionVersion(args: CreateResourceDefinitionVersionCommandInput, cb: (err: any, data?: CreateResourceDefinitionVersionCommandOutput) => void): void;
            createResourceDefinitionVersion(args: CreateResourceDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateResourceDefinitionVersionCommandOutput) => void): void;
            /**
                * Creates a software update for a core or group of cores (specified as an IoT thing group.) Use this to update the OTA Agent as well as the Greengrass core software. It makes use of the IoT Jobs feature which provides additional commands to manage a Greengrass core software update job.
                */
            createSoftwareUpdateJob(args: CreateSoftwareUpdateJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateSoftwareUpdateJobCommandOutput>;
            createSoftwareUpdateJob(args: CreateSoftwareUpdateJobCommandInput, cb: (err: any, data?: CreateSoftwareUpdateJobCommandOutput) => void): void;
            createSoftwareUpdateJob(args: CreateSoftwareUpdateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSoftwareUpdateJobCommandOutput) => void): void;
            /**
                * Creates a subscription definition. You may provide the initial version of the subscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a later time.
                */
            createSubscriptionDefinition(args: CreateSubscriptionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateSubscriptionDefinitionCommandOutput>;
            createSubscriptionDefinition(args: CreateSubscriptionDefinitionCommandInput, cb: (err: any, data?: CreateSubscriptionDefinitionCommandOutput) => void): void;
            createSubscriptionDefinition(args: CreateSubscriptionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSubscriptionDefinitionCommandOutput) => void): void;
            /**
                * Creates a version of a subscription definition which has already been defined.
                */
            createSubscriptionDefinitionVersion(args: CreateSubscriptionDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateSubscriptionDefinitionVersionCommandOutput>;
            createSubscriptionDefinitionVersion(args: CreateSubscriptionDefinitionVersionCommandInput, cb: (err: any, data?: CreateSubscriptionDefinitionVersionCommandOutput) => void): void;
            createSubscriptionDefinitionVersion(args: CreateSubscriptionDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSubscriptionDefinitionVersionCommandOutput) => void): void;
            /**
                * Deletes a connector definition.
                */
            deleteConnectorDefinition(args: DeleteConnectorDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectorDefinitionCommandOutput>;
            deleteConnectorDefinition(args: DeleteConnectorDefinitionCommandInput, cb: (err: any, data?: DeleteConnectorDefinitionCommandOutput) => void): void;
            deleteConnectorDefinition(args: DeleteConnectorDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectorDefinitionCommandOutput) => void): void;
            /**
                * Deletes a core definition.
                */
            deleteCoreDefinition(args: DeleteCoreDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCoreDefinitionCommandOutput>;
            deleteCoreDefinition(args: DeleteCoreDefinitionCommandInput, cb: (err: any, data?: DeleteCoreDefinitionCommandOutput) => void): void;
            deleteCoreDefinition(args: DeleteCoreDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCoreDefinitionCommandOutput) => void): void;
            /**
                * Deletes a device definition.
                */
            deleteDeviceDefinition(args: DeleteDeviceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeviceDefinitionCommandOutput>;
            deleteDeviceDefinition(args: DeleteDeviceDefinitionCommandInput, cb: (err: any, data?: DeleteDeviceDefinitionCommandOutput) => void): void;
            deleteDeviceDefinition(args: DeleteDeviceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeviceDefinitionCommandOutput) => void): void;
            /**
                * Deletes a Lambda function definition.
                */
            deleteFunctionDefinition(args: DeleteFunctionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionDefinitionCommandOutput>;
            deleteFunctionDefinition(args: DeleteFunctionDefinitionCommandInput, cb: (err: any, data?: DeleteFunctionDefinitionCommandOutput) => void): void;
            deleteFunctionDefinition(args: DeleteFunctionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionDefinitionCommandOutput) => void): void;
            /**
                * Deletes a group.
                */
            deleteGroup(args: DeleteGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupCommandOutput>;
            deleteGroup(args: DeleteGroupCommandInput, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            deleteGroup(args: DeleteGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            /**
                * Deletes a logger definition.
                */
            deleteLoggerDefinition(args: DeleteLoggerDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoggerDefinitionCommandOutput>;
            deleteLoggerDefinition(args: DeleteLoggerDefinitionCommandInput, cb: (err: any, data?: DeleteLoggerDefinitionCommandOutput) => void): void;
            deleteLoggerDefinition(args: DeleteLoggerDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoggerDefinitionCommandOutput) => void): void;
            /**
                * Deletes a resource definition.
                */
            deleteResourceDefinition(args: DeleteResourceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourceDefinitionCommandOutput>;
            deleteResourceDefinition(args: DeleteResourceDefinitionCommandInput, cb: (err: any, data?: DeleteResourceDefinitionCommandOutput) => void): void;
            deleteResourceDefinition(args: DeleteResourceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourceDefinitionCommandOutput) => void): void;
            /**
                * Deletes a subscription definition.
                */
            deleteSubscriptionDefinition(args: DeleteSubscriptionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSubscriptionDefinitionCommandOutput>;
            deleteSubscriptionDefinition(args: DeleteSubscriptionDefinitionCommandInput, cb: (err: any, data?: DeleteSubscriptionDefinitionCommandOutput) => void): void;
            deleteSubscriptionDefinition(args: DeleteSubscriptionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSubscriptionDefinitionCommandOutput) => void): void;
            /**
                * Disassociates the role from a group.
                */
            disassociateRoleFromGroup(args: DisassociateRoleFromGroupCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateRoleFromGroupCommandOutput>;
            disassociateRoleFromGroup(args: DisassociateRoleFromGroupCommandInput, cb: (err: any, data?: DisassociateRoleFromGroupCommandOutput) => void): void;
            disassociateRoleFromGroup(args: DisassociateRoleFromGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateRoleFromGroupCommandOutput) => void): void;
            /**
                * Disassociates the service role from your account. Without a service role, deployments will not work.
                */
            disassociateServiceRoleFromAccount(args: DisassociateServiceRoleFromAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateServiceRoleFromAccountCommandOutput>;
            disassociateServiceRoleFromAccount(args: DisassociateServiceRoleFromAccountCommandInput, cb: (err: any, data?: DisassociateServiceRoleFromAccountCommandOutput) => void): void;
            disassociateServiceRoleFromAccount(args: DisassociateServiceRoleFromAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateServiceRoleFromAccountCommandOutput) => void): void;
            /**
                * Retrieves the role associated with a particular group.
                */
            getAssociatedRole(args: GetAssociatedRoleCommandInput, options?: __HttpHandlerOptions): Promise<GetAssociatedRoleCommandOutput>;
            getAssociatedRole(args: GetAssociatedRoleCommandInput, cb: (err: any, data?: GetAssociatedRoleCommandOutput) => void): void;
            getAssociatedRole(args: GetAssociatedRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssociatedRoleCommandOutput) => void): void;
            /**
                * Returns the status of a bulk deployment.
                */
            getBulkDeploymentStatus(args: GetBulkDeploymentStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetBulkDeploymentStatusCommandOutput>;
            getBulkDeploymentStatus(args: GetBulkDeploymentStatusCommandInput, cb: (err: any, data?: GetBulkDeploymentStatusCommandOutput) => void): void;
            getBulkDeploymentStatus(args: GetBulkDeploymentStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBulkDeploymentStatusCommandOutput) => void): void;
            /**
                * Retrieves the connectivity information for a core.
                */
            getConnectivityInfo(args: GetConnectivityInfoCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectivityInfoCommandOutput>;
            getConnectivityInfo(args: GetConnectivityInfoCommandInput, cb: (err: any, data?: GetConnectivityInfoCommandOutput) => void): void;
            getConnectivityInfo(args: GetConnectivityInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectivityInfoCommandOutput) => void): void;
            /**
                * Retrieves information about a connector definition.
                */
            getConnectorDefinition(args: GetConnectorDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectorDefinitionCommandOutput>;
            getConnectorDefinition(args: GetConnectorDefinitionCommandInput, cb: (err: any, data?: GetConnectorDefinitionCommandOutput) => void): void;
            getConnectorDefinition(args: GetConnectorDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectorDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a connector definition version, including the connectors that the version contains. Connectors are prebuilt modules that interact with local infrastructure, device protocols, AWS, and other cloud services.
                */
            getConnectorDefinitionVersion(args: GetConnectorDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectorDefinitionVersionCommandOutput>;
            getConnectorDefinitionVersion(args: GetConnectorDefinitionVersionCommandInput, cb: (err: any, data?: GetConnectorDefinitionVersionCommandOutput) => void): void;
            getConnectorDefinitionVersion(args: GetConnectorDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectorDefinitionVersionCommandOutput) => void): void;
            /**
                * Retrieves information about a core definition version.
                */
            getCoreDefinition(args: GetCoreDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreDefinitionCommandOutput>;
            getCoreDefinition(args: GetCoreDefinitionCommandInput, cb: (err: any, data?: GetCoreDefinitionCommandOutput) => void): void;
            getCoreDefinition(args: GetCoreDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a core definition version.
                */
            getCoreDefinitionVersion(args: GetCoreDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreDefinitionVersionCommandOutput>;
            getCoreDefinitionVersion(args: GetCoreDefinitionVersionCommandInput, cb: (err: any, data?: GetCoreDefinitionVersionCommandOutput) => void): void;
            getCoreDefinitionVersion(args: GetCoreDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreDefinitionVersionCommandOutput) => void): void;
            /**
                * Returns the status of a deployment.
                */
            getDeploymentStatus(args: GetDeploymentStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentStatusCommandOutput>;
            getDeploymentStatus(args: GetDeploymentStatusCommandInput, cb: (err: any, data?: GetDeploymentStatusCommandOutput) => void): void;
            getDeploymentStatus(args: GetDeploymentStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentStatusCommandOutput) => void): void;
            /**
                * Retrieves information about a device definition.
                */
            getDeviceDefinition(args: GetDeviceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceDefinitionCommandOutput>;
            getDeviceDefinition(args: GetDeviceDefinitionCommandInput, cb: (err: any, data?: GetDeviceDefinitionCommandOutput) => void): void;
            getDeviceDefinition(args: GetDeviceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a device definition version.
                */
            getDeviceDefinitionVersion(args: GetDeviceDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetDeviceDefinitionVersionCommandOutput>;
            getDeviceDefinitionVersion(args: GetDeviceDefinitionVersionCommandInput, cb: (err: any, data?: GetDeviceDefinitionVersionCommandOutput) => void): void;
            getDeviceDefinitionVersion(args: GetDeviceDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeviceDefinitionVersionCommandOutput) => void): void;
            /**
                * Retrieves information about a Lambda function definition, including its creation time and latest version.
                */
            getFunctionDefinition(args: GetFunctionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionDefinitionCommandOutput>;
            getFunctionDefinition(args: GetFunctionDefinitionCommandInput, cb: (err: any, data?: GetFunctionDefinitionCommandOutput) => void): void;
            getFunctionDefinition(args: GetFunctionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a Lambda function definition version, including which Lambda functions are included in the version and their configurations.
                */
            getFunctionDefinitionVersion(args: GetFunctionDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionDefinitionVersionCommandOutput>;
            getFunctionDefinitionVersion(args: GetFunctionDefinitionVersionCommandInput, cb: (err: any, data?: GetFunctionDefinitionVersionCommandOutput) => void): void;
            getFunctionDefinitionVersion(args: GetFunctionDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionDefinitionVersionCommandOutput) => void): void;
            /**
                * Retrieves information about a group.
                */
            getGroup(args: GetGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCommandOutput>;
            getGroup(args: GetGroupCommandInput, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            getGroup(args: GetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            /**
                * Retreives the CA associated with a group. Returns the public key of the CA.
                */
            getGroupCertificateAuthority(args: GetGroupCertificateAuthorityCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCertificateAuthorityCommandOutput>;
            getGroupCertificateAuthority(args: GetGroupCertificateAuthorityCommandInput, cb: (err: any, data?: GetGroupCertificateAuthorityCommandOutput) => void): void;
            getGroupCertificateAuthority(args: GetGroupCertificateAuthorityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCertificateAuthorityCommandOutput) => void): void;
            /**
                * Retrieves the current configuration for the CA used by the group.
                */
            getGroupCertificateConfiguration(args: GetGroupCertificateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCertificateConfigurationCommandOutput>;
            getGroupCertificateConfiguration(args: GetGroupCertificateConfigurationCommandInput, cb: (err: any, data?: GetGroupCertificateConfigurationCommandOutput) => void): void;
            getGroupCertificateConfiguration(args: GetGroupCertificateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCertificateConfigurationCommandOutput) => void): void;
            /**
                * Retrieves information about a group version.
                */
            getGroupVersion(args: GetGroupVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupVersionCommandOutput>;
            getGroupVersion(args: GetGroupVersionCommandInput, cb: (err: any, data?: GetGroupVersionCommandOutput) => void): void;
            getGroupVersion(args: GetGroupVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupVersionCommandOutput) => void): void;
            /**
                * Retrieves information about a logger definition.
                */
            getLoggerDefinition(args: GetLoggerDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetLoggerDefinitionCommandOutput>;
            getLoggerDefinition(args: GetLoggerDefinitionCommandInput, cb: (err: any, data?: GetLoggerDefinitionCommandOutput) => void): void;
            getLoggerDefinition(args: GetLoggerDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoggerDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a logger definition version.
                */
            getLoggerDefinitionVersion(args: GetLoggerDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetLoggerDefinitionVersionCommandOutput>;
            getLoggerDefinitionVersion(args: GetLoggerDefinitionVersionCommandInput, cb: (err: any, data?: GetLoggerDefinitionVersionCommandOutput) => void): void;
            getLoggerDefinitionVersion(args: GetLoggerDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoggerDefinitionVersionCommandOutput) => void): void;
            /**
                * Retrieves information about a resource definition, including its creation time and latest version.
                */
            getResourceDefinition(args: GetResourceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetResourceDefinitionCommandOutput>;
            getResourceDefinition(args: GetResourceDefinitionCommandInput, cb: (err: any, data?: GetResourceDefinitionCommandOutput) => void): void;
            getResourceDefinition(args: GetResourceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourceDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a resource definition version, including which resources are included in the version.
                */
            getResourceDefinitionVersion(args: GetResourceDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetResourceDefinitionVersionCommandOutput>;
            getResourceDefinitionVersion(args: GetResourceDefinitionVersionCommandInput, cb: (err: any, data?: GetResourceDefinitionVersionCommandOutput) => void): void;
            getResourceDefinitionVersion(args: GetResourceDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourceDefinitionVersionCommandOutput) => void): void;
            /**
                * Retrieves the service role that is attached to your account.
                */
            getServiceRoleForAccount(args: GetServiceRoleForAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetServiceRoleForAccountCommandOutput>;
            getServiceRoleForAccount(args: GetServiceRoleForAccountCommandInput, cb: (err: any, data?: GetServiceRoleForAccountCommandOutput) => void): void;
            getServiceRoleForAccount(args: GetServiceRoleForAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServiceRoleForAccountCommandOutput) => void): void;
            /**
                * Retrieves information about a subscription definition.
                */
            getSubscriptionDefinition(args: GetSubscriptionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetSubscriptionDefinitionCommandOutput>;
            getSubscriptionDefinition(args: GetSubscriptionDefinitionCommandInput, cb: (err: any, data?: GetSubscriptionDefinitionCommandOutput) => void): void;
            getSubscriptionDefinition(args: GetSubscriptionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSubscriptionDefinitionCommandOutput) => void): void;
            /**
                * Retrieves information about a subscription definition version.
                */
            getSubscriptionDefinitionVersion(args: GetSubscriptionDefinitionVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetSubscriptionDefinitionVersionCommandOutput>;
            getSubscriptionDefinitionVersion(args: GetSubscriptionDefinitionVersionCommandInput, cb: (err: any, data?: GetSubscriptionDefinitionVersionCommandOutput) => void): void;
            getSubscriptionDefinitionVersion(args: GetSubscriptionDefinitionVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSubscriptionDefinitionVersionCommandOutput) => void): void;
            /**
                * Get the runtime configuration of a thing.
                */
            getThingRuntimeConfiguration(args: GetThingRuntimeConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetThingRuntimeConfigurationCommandOutput>;
            getThingRuntimeConfiguration(args: GetThingRuntimeConfigurationCommandInput, cb: (err: any, data?: GetThingRuntimeConfigurationCommandOutput) => void): void;
            getThingRuntimeConfiguration(args: GetThingRuntimeConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetThingRuntimeConfigurationCommandOutput) => void): void;
            /**
                * Gets a paginated list of the deployments that have been started in a bulk deployment operation, and their current deployment status.
                */
            listBulkDeploymentDetailedReports(args: ListBulkDeploymentDetailedReportsCommandInput, options?: __HttpHandlerOptions): Promise<ListBulkDeploymentDetailedReportsCommandOutput>;
            listBulkDeploymentDetailedReports(args: ListBulkDeploymentDetailedReportsCommandInput, cb: (err: any, data?: ListBulkDeploymentDetailedReportsCommandOutput) => void): void;
            listBulkDeploymentDetailedReports(args: ListBulkDeploymentDetailedReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListBulkDeploymentDetailedReportsCommandOutput) => void): void;
            /**
                * Returns a list of bulk deployments.
                */
            listBulkDeployments(args: ListBulkDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListBulkDeploymentsCommandOutput>;
            listBulkDeployments(args: ListBulkDeploymentsCommandInput, cb: (err: any, data?: ListBulkDeploymentsCommandOutput) => void): void;
            listBulkDeployments(args: ListBulkDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListBulkDeploymentsCommandOutput) => void): void;
            /**
                * Retrieves a list of connector definitions.
                */
            listConnectorDefinitions(args: ListConnectorDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListConnectorDefinitionsCommandOutput>;
            listConnectorDefinitions(args: ListConnectorDefinitionsCommandInput, cb: (err: any, data?: ListConnectorDefinitionsCommandOutput) => void): void;
            listConnectorDefinitions(args: ListConnectorDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConnectorDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a connector definition, which are containers for connectors. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
                */
            listConnectorDefinitionVersions(args: ListConnectorDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListConnectorDefinitionVersionsCommandOutput>;
            listConnectorDefinitionVersions(args: ListConnectorDefinitionVersionsCommandInput, cb: (err: any, data?: ListConnectorDefinitionVersionsCommandOutput) => void): void;
            listConnectorDefinitionVersions(args: ListConnectorDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConnectorDefinitionVersionsCommandOutput) => void): void;
            /**
                * Retrieves a list of core definitions.
                */
            listCoreDefinitions(args: ListCoreDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListCoreDefinitionsCommandOutput>;
            listCoreDefinitions(args: ListCoreDefinitionsCommandInput, cb: (err: any, data?: ListCoreDefinitionsCommandOutput) => void): void;
            listCoreDefinitions(args: ListCoreDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoreDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a core definition.
                */
            listCoreDefinitionVersions(args: ListCoreDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListCoreDefinitionVersionsCommandOutput>;
            listCoreDefinitionVersions(args: ListCoreDefinitionVersionsCommandInput, cb: (err: any, data?: ListCoreDefinitionVersionsCommandOutput) => void): void;
            listCoreDefinitionVersions(args: ListCoreDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoreDefinitionVersionsCommandOutput) => void): void;
            /**
                * Returns a history of deployments for the group.
                */
            listDeployments(args: ListDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentsCommandOutput>;
            listDeployments(args: ListDeploymentsCommandInput, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
            listDeployments(args: ListDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
            /**
                * Retrieves a list of device definitions.
                */
            listDeviceDefinitions(args: ListDeviceDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeviceDefinitionsCommandOutput>;
            listDeviceDefinitions(args: ListDeviceDefinitionsCommandInput, cb: (err: any, data?: ListDeviceDefinitionsCommandOutput) => void): void;
            listDeviceDefinitions(args: ListDeviceDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeviceDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a device definition.
                */
            listDeviceDefinitionVersions(args: ListDeviceDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeviceDefinitionVersionsCommandOutput>;
            listDeviceDefinitionVersions(args: ListDeviceDefinitionVersionsCommandInput, cb: (err: any, data?: ListDeviceDefinitionVersionsCommandOutput) => void): void;
            listDeviceDefinitionVersions(args: ListDeviceDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeviceDefinitionVersionsCommandOutput) => void): void;
            /**
                * Retrieves a list of Lambda function definitions.
                */
            listFunctionDefinitions(args: ListFunctionDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionDefinitionsCommandOutput>;
            listFunctionDefinitions(args: ListFunctionDefinitionsCommandInput, cb: (err: any, data?: ListFunctionDefinitionsCommandOutput) => void): void;
            listFunctionDefinitions(args: ListFunctionDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a Lambda function definition.
                */
            listFunctionDefinitionVersions(args: ListFunctionDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionDefinitionVersionsCommandOutput>;
            listFunctionDefinitionVersions(args: ListFunctionDefinitionVersionsCommandInput, cb: (err: any, data?: ListFunctionDefinitionVersionsCommandOutput) => void): void;
            listFunctionDefinitionVersions(args: ListFunctionDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionDefinitionVersionsCommandOutput) => void): void;
            /**
                * Retrieves the current CAs for a group.
                */
            listGroupCertificateAuthorities(args: ListGroupCertificateAuthoritiesCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupCertificateAuthoritiesCommandOutput>;
            listGroupCertificateAuthorities(args: ListGroupCertificateAuthoritiesCommandInput, cb: (err: any, data?: ListGroupCertificateAuthoritiesCommandOutput) => void): void;
            listGroupCertificateAuthorities(args: ListGroupCertificateAuthoritiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupCertificateAuthoritiesCommandOutput) => void): void;
            /**
                * Retrieves a list of groups.
                */
            listGroups(args: ListGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsCommandOutput>;
            listGroups(args: ListGroupsCommandInput, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            listGroups(args: ListGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            /**
                * Lists the versions of a group.
                */
            listGroupVersions(args: ListGroupVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupVersionsCommandOutput>;
            listGroupVersions(args: ListGroupVersionsCommandInput, cb: (err: any, data?: ListGroupVersionsCommandOutput) => void): void;
            listGroupVersions(args: ListGroupVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupVersionsCommandOutput) => void): void;
            /**
                * Retrieves a list of logger definitions.
                */
            listLoggerDefinitions(args: ListLoggerDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListLoggerDefinitionsCommandOutput>;
            listLoggerDefinitions(args: ListLoggerDefinitionsCommandInput, cb: (err: any, data?: ListLoggerDefinitionsCommandOutput) => void): void;
            listLoggerDefinitions(args: ListLoggerDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLoggerDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a logger definition.
                */
            listLoggerDefinitionVersions(args: ListLoggerDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListLoggerDefinitionVersionsCommandOutput>;
            listLoggerDefinitionVersions(args: ListLoggerDefinitionVersionsCommandInput, cb: (err: any, data?: ListLoggerDefinitionVersionsCommandOutput) => void): void;
            listLoggerDefinitionVersions(args: ListLoggerDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLoggerDefinitionVersionsCommandOutput) => void): void;
            /**
                * Retrieves a list of resource definitions.
                */
            listResourceDefinitions(args: ListResourceDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListResourceDefinitionsCommandOutput>;
            listResourceDefinitions(args: ListResourceDefinitionsCommandInput, cb: (err: any, data?: ListResourceDefinitionsCommandOutput) => void): void;
            listResourceDefinitions(args: ListResourceDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourceDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a resource definition.
                */
            listResourceDefinitionVersions(args: ListResourceDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListResourceDefinitionVersionsCommandOutput>;
            listResourceDefinitionVersions(args: ListResourceDefinitionVersionsCommandInput, cb: (err: any, data?: ListResourceDefinitionVersionsCommandOutput) => void): void;
            listResourceDefinitionVersions(args: ListResourceDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourceDefinitionVersionsCommandOutput) => void): void;
            /**
                * Retrieves a list of subscription definitions.
                */
            listSubscriptionDefinitions(args: ListSubscriptionDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSubscriptionDefinitionsCommandOutput>;
            listSubscriptionDefinitions(args: ListSubscriptionDefinitionsCommandInput, cb: (err: any, data?: ListSubscriptionDefinitionsCommandOutput) => void): void;
            listSubscriptionDefinitions(args: ListSubscriptionDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSubscriptionDefinitionsCommandOutput) => void): void;
            /**
                * Lists the versions of a subscription definition.
                */
            listSubscriptionDefinitionVersions(args: ListSubscriptionDefinitionVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSubscriptionDefinitionVersionsCommandOutput>;
            listSubscriptionDefinitionVersions(args: ListSubscriptionDefinitionVersionsCommandInput, cb: (err: any, data?: ListSubscriptionDefinitionVersionsCommandOutput) => void): void;
            listSubscriptionDefinitionVersions(args: ListSubscriptionDefinitionVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSubscriptionDefinitionVersionsCommandOutput) => void): void;
            /**
                * Retrieves a list of resource tags for a resource arn.
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * Resets a group's deployments.
                */
            resetDeployments(args: ResetDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ResetDeploymentsCommandOutput>;
            resetDeployments(args: ResetDeploymentsCommandInput, cb: (err: any, data?: ResetDeploymentsCommandOutput) => void): void;
            resetDeployments(args: ResetDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetDeploymentsCommandOutput) => void): void;
            /**
                * Deploys multiple groups in one operation. This action starts the bulk deployment of a specified set of group versions. Each group version deployment will be triggered with an adaptive rate that has a fixed upper limit. We recommend that you include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment'' request. These requests are idempotent with respect to the token and the request parameters.
                */
            startBulkDeployment(args: StartBulkDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<StartBulkDeploymentCommandOutput>;
            startBulkDeployment(args: StartBulkDeploymentCommandInput, cb: (err: any, data?: StartBulkDeploymentCommandOutput) => void): void;
            startBulkDeployment(args: StartBulkDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartBulkDeploymentCommandOutput) => void): void;
            /**
                * Stops the execution of a bulk deployment. This action returns a status of ''Stopping'' until the deployment is stopped. You cannot start a new bulk deployment while a previous deployment is in the ''Stopping'' state. This action doesn't rollback completed deployments or cancel pending deployments.
                */
            stopBulkDeployment(args: StopBulkDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<StopBulkDeploymentCommandOutput>;
            stopBulkDeployment(args: StopBulkDeploymentCommandInput, cb: (err: any, data?: StopBulkDeploymentCommandOutput) => void): void;
            stopBulkDeployment(args: StopBulkDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopBulkDeploymentCommandOutput) => void): void;
            /**
                * Adds tags to a Greengrass resource. Valid resources are 'Group', 'ConnectorDefinition', 'CoreDefinition', 'DeviceDefinition', 'FunctionDefinition', 'LoggerDefinition', 'SubscriptionDefinition', 'ResourceDefinition', and 'BulkDeployment'.
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * Remove resource tags from a Greengrass Resource.
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
                */
            updateConnectivityInfo(args: UpdateConnectivityInfoCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectivityInfoCommandOutput>;
            updateConnectivityInfo(args: UpdateConnectivityInfoCommandInput, cb: (err: any, data?: UpdateConnectivityInfoCommandOutput) => void): void;
            updateConnectivityInfo(args: UpdateConnectivityInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectivityInfoCommandOutput) => void): void;
            /**
                * Updates a connector definition.
                */
            updateConnectorDefinition(args: UpdateConnectorDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectorDefinitionCommandOutput>;
            updateConnectorDefinition(args: UpdateConnectorDefinitionCommandInput, cb: (err: any, data?: UpdateConnectorDefinitionCommandOutput) => void): void;
            updateConnectorDefinition(args: UpdateConnectorDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectorDefinitionCommandOutput) => void): void;
            /**
                * Updates a core definition.
                */
            updateCoreDefinition(args: UpdateCoreDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCoreDefinitionCommandOutput>;
            updateCoreDefinition(args: UpdateCoreDefinitionCommandInput, cb: (err: any, data?: UpdateCoreDefinitionCommandOutput) => void): void;
            updateCoreDefinition(args: UpdateCoreDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCoreDefinitionCommandOutput) => void): void;
            /**
                * Updates a device definition.
                */
            updateDeviceDefinition(args: UpdateDeviceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeviceDefinitionCommandOutput>;
            updateDeviceDefinition(args: UpdateDeviceDefinitionCommandInput, cb: (err: any, data?: UpdateDeviceDefinitionCommandOutput) => void): void;
            updateDeviceDefinition(args: UpdateDeviceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeviceDefinitionCommandOutput) => void): void;
            /**
                * Updates a Lambda function definition.
                */
            updateFunctionDefinition(args: UpdateFunctionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFunctionDefinitionCommandOutput>;
            updateFunctionDefinition(args: UpdateFunctionDefinitionCommandInput, cb: (err: any, data?: UpdateFunctionDefinitionCommandOutput) => void): void;
            updateFunctionDefinition(args: UpdateFunctionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFunctionDefinitionCommandOutput) => void): void;
            /**
                * Updates a group.
                */
            updateGroup(args: UpdateGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupCommandOutput>;
            updateGroup(args: UpdateGroupCommandInput, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            updateGroup(args: UpdateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            /**
                * Updates the Certificate expiry time for a group.
                */
            updateGroupCertificateConfiguration(args: UpdateGroupCertificateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupCertificateConfigurationCommandOutput>;
            updateGroupCertificateConfiguration(args: UpdateGroupCertificateConfigurationCommandInput, cb: (err: any, data?: UpdateGroupCertificateConfigurationCommandOutput) => void): void;
            updateGroupCertificateConfiguration(args: UpdateGroupCertificateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupCertificateConfigurationCommandOutput) => void): void;
            /**
                * Updates a logger definition.
                */
            updateLoggerDefinition(args: UpdateLoggerDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLoggerDefinitionCommandOutput>;
            updateLoggerDefinition(args: UpdateLoggerDefinitionCommandInput, cb: (err: any, data?: UpdateLoggerDefinitionCommandOutput) => void): void;
            updateLoggerDefinition(args: UpdateLoggerDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLoggerDefinitionCommandOutput) => void): void;
            /**
                * Updates a resource definition.
                */
            updateResourceDefinition(args: UpdateResourceDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateResourceDefinitionCommandOutput>;
            updateResourceDefinition(args: UpdateResourceDefinitionCommandInput, cb: (err: any, data?: UpdateResourceDefinitionCommandOutput) => void): void;
            updateResourceDefinition(args: UpdateResourceDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateResourceDefinitionCommandOutput) => void): void;
            /**
                * Updates a subscription definition.
                */
            updateSubscriptionDefinition(args: UpdateSubscriptionDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSubscriptionDefinitionCommandOutput>;
            updateSubscriptionDefinition(args: UpdateSubscriptionDefinitionCommandInput, cb: (err: any, data?: UpdateSubscriptionDefinitionCommandOutput) => void): void;
            updateSubscriptionDefinition(args: UpdateSubscriptionDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSubscriptionDefinitionCommandOutput) => void): void;
            /**
                * Updates the runtime configuration of a thing.
                */
            updateThingRuntimeConfiguration(args: UpdateThingRuntimeConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateThingRuntimeConfigurationCommandOutput>;
            updateThingRuntimeConfiguration(args: UpdateThingRuntimeConfigurationCommandInput, cb: (err: any, data?: UpdateThingRuntimeConfigurationCommandOutput) => void): void;
            updateThingRuntimeConfiguration(args: UpdateThingRuntimeConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateThingRuntimeConfigurationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/AssociateRoleToGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { AssociateRoleToGroupRequest, AssociateRoleToGroupResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface AssociateRoleToGroupCommandInput extends AssociateRoleToGroupRequest {
    }
    export interface AssociateRoleToGroupCommandOutput extends AssociateRoleToGroupResponse, __MetadataBearer {
    }
    /**
        * Associates a role with a group. Your Greengrass core will use the role to access AWS cloud services. The role's permissions should allow Greengrass core Lambda functions to perform actions against the cloud.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, AssociateRoleToGroupCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, AssociateRoleToGroupCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new AssociateRoleToGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateRoleToGroupCommandInput} for command's `input` shape.
        * @see {@link AssociateRoleToGroupCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class AssociateRoleToGroupCommand extends $Command<AssociateRoleToGroupCommandInput, AssociateRoleToGroupCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: AssociateRoleToGroupCommandInput;
            constructor(input: AssociateRoleToGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateRoleToGroupCommandInput, AssociateRoleToGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/AssociateServiceRoleToAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { AssociateServiceRoleToAccountRequest, AssociateServiceRoleToAccountResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface AssociateServiceRoleToAccountCommandInput extends AssociateServiceRoleToAccountRequest {
    }
    export interface AssociateServiceRoleToAccountCommandOutput extends AssociateServiceRoleToAccountResponse, __MetadataBearer {
    }
    /**
        * Associates a role with your account. AWS IoT Greengrass will use the role to access your Lambda functions and AWS IoT resources. This is necessary for deployments to succeed. The role must have at least minimum permissions in the policy ''AWSGreengrassResourceAccessRolePolicy''.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, AssociateServiceRoleToAccountCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, AssociateServiceRoleToAccountCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new AssociateServiceRoleToAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateServiceRoleToAccountCommandInput} for command's `input` shape.
        * @see {@link AssociateServiceRoleToAccountCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class AssociateServiceRoleToAccountCommand extends $Command<AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: AssociateServiceRoleToAccountCommandInput;
            constructor(input: AssociateServiceRoleToAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateConnectorDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateConnectorDefinitionRequest, CreateConnectorDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateConnectorDefinitionCommandInput extends CreateConnectorDefinitionRequest {
    }
    export interface CreateConnectorDefinitionCommandOutput extends CreateConnectorDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a connector definition. You may provide the initial version of the connector definition now or use ''CreateConnectorDefinitionVersion'' at a later time.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateConnectorDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateConnectorDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateConnectorDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectorDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateConnectorDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateConnectorDefinitionCommand extends $Command<CreateConnectorDefinitionCommandInput, CreateConnectorDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateConnectorDefinitionCommandInput;
            constructor(input: CreateConnectorDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectorDefinitionCommandInput, CreateConnectorDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateConnectorDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateConnectorDefinitionVersionRequest, CreateConnectorDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateConnectorDefinitionVersionCommandInput extends CreateConnectorDefinitionVersionRequest {
    }
    export interface CreateConnectorDefinitionVersionCommandOutput extends CreateConnectorDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a connector definition which has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateConnectorDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateConnectorDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateConnectorDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectorDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateConnectorDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateConnectorDefinitionVersionCommand extends $Command<CreateConnectorDefinitionVersionCommandInput, CreateConnectorDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateConnectorDefinitionVersionCommandInput;
            constructor(input: CreateConnectorDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectorDefinitionVersionCommandInput, CreateConnectorDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateCoreDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateCoreDefinitionRequest, CreateCoreDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateCoreDefinitionCommandInput extends CreateCoreDefinitionRequest {
    }
    export interface CreateCoreDefinitionCommandOutput extends CreateCoreDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a core definition. You may provide the initial version of the core definition now or use ''CreateCoreDefinitionVersion'' at a later time. Greengrass groups must each contain exactly one Greengrass core.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateCoreDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateCoreDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateCoreDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCoreDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateCoreDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateCoreDefinitionCommand extends $Command<CreateCoreDefinitionCommandInput, CreateCoreDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateCoreDefinitionCommandInput;
            constructor(input: CreateCoreDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCoreDefinitionCommandInput, CreateCoreDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateCoreDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateCoreDefinitionVersionRequest, CreateCoreDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateCoreDefinitionVersionCommandInput extends CreateCoreDefinitionVersionRequest {
    }
    export interface CreateCoreDefinitionVersionCommandOutput extends CreateCoreDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a core definition that has already been defined. Greengrass groups must each contain exactly one Greengrass core.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateCoreDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateCoreDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateCoreDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCoreDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateCoreDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateCoreDefinitionVersionCommand extends $Command<CreateCoreDefinitionVersionCommandInput, CreateCoreDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateCoreDefinitionVersionCommandInput;
            constructor(input: CreateCoreDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCoreDefinitionVersionCommandInput, CreateCoreDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateDeploymentRequest, CreateDeploymentResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateDeploymentCommandInput extends CreateDeploymentRequest {
    }
    export interface CreateDeploymentCommandOutput extends CreateDeploymentResponse, __MetadataBearer {
    }
    /**
        * Creates a deployment. ''CreateDeployment'' requests are idempotent with respect to the ''X-Amzn-Client-Token'' token and the request parameters.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateDeploymentCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateDeploymentCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeploymentCommandInput} for command's `input` shape.
        * @see {@link CreateDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateDeploymentCommand extends $Command<CreateDeploymentCommandInput, CreateDeploymentCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateDeploymentCommandInput;
            constructor(input: CreateDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeploymentCommandInput, CreateDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeviceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateDeviceDefinitionRequest, CreateDeviceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateDeviceDefinitionCommandInput extends CreateDeviceDefinitionRequest {
    }
    export interface CreateDeviceDefinitionCommandOutput extends CreateDeviceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a device definition. You may provide the initial version of the device definition now or use ''CreateDeviceDefinitionVersion'' at a later time.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateDeviceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateDeviceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateDeviceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeviceDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateDeviceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateDeviceDefinitionCommand extends $Command<CreateDeviceDefinitionCommandInput, CreateDeviceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateDeviceDefinitionCommandInput;
            constructor(input: CreateDeviceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeviceDefinitionCommandInput, CreateDeviceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeviceDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateDeviceDefinitionVersionRequest, CreateDeviceDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateDeviceDefinitionVersionCommandInput extends CreateDeviceDefinitionVersionRequest {
    }
    export interface CreateDeviceDefinitionVersionCommandOutput extends CreateDeviceDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a device definition that has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateDeviceDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateDeviceDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateDeviceDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeviceDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateDeviceDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateDeviceDefinitionVersionCommand extends $Command<CreateDeviceDefinitionVersionCommandInput, CreateDeviceDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateDeviceDefinitionVersionCommandInput;
            constructor(input: CreateDeviceDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeviceDefinitionVersionCommandInput, CreateDeviceDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateFunctionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateFunctionDefinitionRequest, CreateFunctionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateFunctionDefinitionCommandInput extends CreateFunctionDefinitionRequest {
    }
    export interface CreateFunctionDefinitionCommandOutput extends CreateFunctionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a Lambda function definition which contains a list of Lambda functions and their configurations to be used in a group. You can create an initial version of the definition by providing a list of Lambda functions and their configurations now, or use ''CreateFunctionDefinitionVersion'' later.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateFunctionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateFunctionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateFunctionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFunctionDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateFunctionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateFunctionDefinitionCommand extends $Command<CreateFunctionDefinitionCommandInput, CreateFunctionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateFunctionDefinitionCommandInput;
            constructor(input: CreateFunctionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFunctionDefinitionCommandInput, CreateFunctionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateFunctionDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateFunctionDefinitionVersionRequest, CreateFunctionDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateFunctionDefinitionVersionCommandInput extends CreateFunctionDefinitionVersionRequest {
    }
    export interface CreateFunctionDefinitionVersionCommandOutput extends CreateFunctionDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a Lambda function definition that has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateFunctionDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateFunctionDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateFunctionDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFunctionDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateFunctionDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateFunctionDefinitionVersionCommand extends $Command<CreateFunctionDefinitionVersionCommandInput, CreateFunctionDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateFunctionDefinitionVersionCommandInput;
            constructor(input: CreateFunctionDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFunctionDefinitionVersionCommandInput, CreateFunctionDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupCertificateAuthorityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateGroupCertificateAuthorityRequest, CreateGroupCertificateAuthorityResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateGroupCertificateAuthorityCommandInput extends CreateGroupCertificateAuthorityRequest {
    }
    export interface CreateGroupCertificateAuthorityCommandOutput extends CreateGroupCertificateAuthorityResponse, __MetadataBearer {
    }
    /**
        * Creates a CA for the group. If a CA already exists, it will rotate the existing CA.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateGroupCertificateAuthorityCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateGroupCertificateAuthorityCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateGroupCertificateAuthorityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCertificateAuthorityCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCertificateAuthorityCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateGroupCertificateAuthorityCommand extends $Command<CreateGroupCertificateAuthorityCommandInput, CreateGroupCertificateAuthorityCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateGroupCertificateAuthorityCommandInput;
            constructor(input: CreateGroupCertificateAuthorityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCertificateAuthorityCommandInput, CreateGroupCertificateAuthorityCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateGroupRequest, CreateGroupResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateGroupCommandInput extends CreateGroupRequest {
    }
    export interface CreateGroupCommandOutput extends CreateGroupResponse, __MetadataBearer {
    }
    /**
        * Creates a group. You may provide the initial version of the group or use ''CreateGroupVersion'' at a later time. Tip: You can use the ''gg_group_setup'' package (https://github.com/awslabs/aws-greengrass-group-setup) as a library or command-line application to create and deploy Greengrass groups.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateGroupCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateGroupCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateGroupCommand extends $Command<CreateGroupCommandInput, CreateGroupCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateGroupCommandInput;
            constructor(input: CreateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCommandInput, CreateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateGroupVersionRequest, CreateGroupVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateGroupVersionCommandInput extends CreateGroupVersionRequest {
    }
    export interface CreateGroupVersionCommandOutput extends CreateGroupVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a group which has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateGroupVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateGroupVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateGroupVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupVersionCommandInput} for command's `input` shape.
        * @see {@link CreateGroupVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateGroupVersionCommand extends $Command<CreateGroupVersionCommandInput, CreateGroupVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateGroupVersionCommandInput;
            constructor(input: CreateGroupVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupVersionCommandInput, CreateGroupVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateLoggerDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateLoggerDefinitionRequest, CreateLoggerDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateLoggerDefinitionCommandInput extends CreateLoggerDefinitionRequest {
    }
    export interface CreateLoggerDefinitionCommandOutput extends CreateLoggerDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a logger definition. You may provide the initial version of the logger definition now or use ''CreateLoggerDefinitionVersion'' at a later time.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateLoggerDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateLoggerDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateLoggerDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoggerDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateLoggerDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateLoggerDefinitionCommand extends $Command<CreateLoggerDefinitionCommandInput, CreateLoggerDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateLoggerDefinitionCommandInput;
            constructor(input: CreateLoggerDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoggerDefinitionCommandInput, CreateLoggerDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateLoggerDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateLoggerDefinitionVersionRequest, CreateLoggerDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateLoggerDefinitionVersionCommandInput extends CreateLoggerDefinitionVersionRequest {
    }
    export interface CreateLoggerDefinitionVersionCommandOutput extends CreateLoggerDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a logger definition that has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateLoggerDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateLoggerDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateLoggerDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoggerDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateLoggerDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateLoggerDefinitionVersionCommand extends $Command<CreateLoggerDefinitionVersionCommandInput, CreateLoggerDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateLoggerDefinitionVersionCommandInput;
            constructor(input: CreateLoggerDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoggerDefinitionVersionCommandInput, CreateLoggerDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateResourceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateResourceDefinitionRequest, CreateResourceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateResourceDefinitionCommandInput extends CreateResourceDefinitionRequest {
    }
    export interface CreateResourceDefinitionCommandOutput extends CreateResourceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a resource definition which contains a list of resources to be used in a group. You can create an initial version of the definition by providing a list of resources now, or use ''CreateResourceDefinitionVersion'' later.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateResourceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateResourceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateResourceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateResourceDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateResourceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateResourceDefinitionCommand extends $Command<CreateResourceDefinitionCommandInput, CreateResourceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateResourceDefinitionCommandInput;
            constructor(input: CreateResourceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateResourceDefinitionCommandInput, CreateResourceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateResourceDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateResourceDefinitionVersionRequest, CreateResourceDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateResourceDefinitionVersionCommandInput extends CreateResourceDefinitionVersionRequest {
    }
    export interface CreateResourceDefinitionVersionCommandOutput extends CreateResourceDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a resource definition that has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateResourceDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateResourceDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateResourceDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateResourceDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateResourceDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateResourceDefinitionVersionCommand extends $Command<CreateResourceDefinitionVersionCommandInput, CreateResourceDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateResourceDefinitionVersionCommandInput;
            constructor(input: CreateResourceDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateResourceDefinitionVersionCommandInput, CreateResourceDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSoftwareUpdateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateSoftwareUpdateJobRequest, CreateSoftwareUpdateJobResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateSoftwareUpdateJobCommandInput extends CreateSoftwareUpdateJobRequest {
    }
    export interface CreateSoftwareUpdateJobCommandOutput extends CreateSoftwareUpdateJobResponse, __MetadataBearer {
    }
    /**
        * Creates a software update for a core or group of cores (specified as an IoT thing group.) Use this to update the OTA Agent as well as the Greengrass core software. It makes use of the IoT Jobs feature which provides additional commands to manage a Greengrass core software update job.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateSoftwareUpdateJobCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateSoftwareUpdateJobCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateSoftwareUpdateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSoftwareUpdateJobCommandInput} for command's `input` shape.
        * @see {@link CreateSoftwareUpdateJobCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateSoftwareUpdateJobCommand extends $Command<CreateSoftwareUpdateJobCommandInput, CreateSoftwareUpdateJobCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateSoftwareUpdateJobCommandInput;
            constructor(input: CreateSoftwareUpdateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSoftwareUpdateJobCommandInput, CreateSoftwareUpdateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSubscriptionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateSubscriptionDefinitionRequest, CreateSubscriptionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateSubscriptionDefinitionCommandInput extends CreateSubscriptionDefinitionRequest {
    }
    export interface CreateSubscriptionDefinitionCommandOutput extends CreateSubscriptionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Creates a subscription definition. You may provide the initial version of the subscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a later time.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateSubscriptionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateSubscriptionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateSubscriptionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSubscriptionDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateSubscriptionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateSubscriptionDefinitionCommand extends $Command<CreateSubscriptionDefinitionCommandInput, CreateSubscriptionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateSubscriptionDefinitionCommandInput;
            constructor(input: CreateSubscriptionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSubscriptionDefinitionCommandInput, CreateSubscriptionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSubscriptionDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { CreateSubscriptionDefinitionVersionRequest, CreateSubscriptionDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface CreateSubscriptionDefinitionVersionCommandInput extends CreateSubscriptionDefinitionVersionRequest {
    }
    export interface CreateSubscriptionDefinitionVersionCommandOutput extends CreateSubscriptionDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Creates a version of a subscription definition which has already been defined.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, CreateSubscriptionDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, CreateSubscriptionDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new CreateSubscriptionDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSubscriptionDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link CreateSubscriptionDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class CreateSubscriptionDefinitionVersionCommand extends $Command<CreateSubscriptionDefinitionVersionCommandInput, CreateSubscriptionDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: CreateSubscriptionDefinitionVersionCommandInput;
            constructor(input: CreateSubscriptionDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSubscriptionDefinitionVersionCommandInput, CreateSubscriptionDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteConnectorDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteConnectorDefinitionRequest, DeleteConnectorDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteConnectorDefinitionCommandInput extends DeleteConnectorDefinitionRequest {
    }
    export interface DeleteConnectorDefinitionCommandOutput extends DeleteConnectorDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a connector definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteConnectorDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteConnectorDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteConnectorDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectorDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectorDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteConnectorDefinitionCommand extends $Command<DeleteConnectorDefinitionCommandInput, DeleteConnectorDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteConnectorDefinitionCommandInput;
            constructor(input: DeleteConnectorDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectorDefinitionCommandInput, DeleteConnectorDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteCoreDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteCoreDefinitionRequest, DeleteCoreDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteCoreDefinitionCommandInput extends DeleteCoreDefinitionRequest {
    }
    export interface DeleteCoreDefinitionCommandOutput extends DeleteCoreDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a core definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteCoreDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteCoreDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteCoreDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCoreDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteCoreDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteCoreDefinitionCommand extends $Command<DeleteCoreDefinitionCommandInput, DeleteCoreDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteCoreDefinitionCommandInput;
            constructor(input: DeleteCoreDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCoreDefinitionCommandInput, DeleteCoreDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteDeviceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteDeviceDefinitionRequest, DeleteDeviceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteDeviceDefinitionCommandInput extends DeleteDeviceDefinitionRequest {
    }
    export interface DeleteDeviceDefinitionCommandOutput extends DeleteDeviceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a device definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteDeviceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteDeviceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteDeviceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeviceDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteDeviceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteDeviceDefinitionCommand extends $Command<DeleteDeviceDefinitionCommandInput, DeleteDeviceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteDeviceDefinitionCommandInput;
            constructor(input: DeleteDeviceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeviceDefinitionCommandInput, DeleteDeviceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteFunctionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteFunctionDefinitionRequest, DeleteFunctionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteFunctionDefinitionCommandInput extends DeleteFunctionDefinitionRequest {
    }
    export interface DeleteFunctionDefinitionCommandOutput extends DeleteFunctionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a Lambda function definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteFunctionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteFunctionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteFunctionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteFunctionDefinitionCommand extends $Command<DeleteFunctionDefinitionCommandInput, DeleteFunctionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteFunctionDefinitionCommandInput;
            constructor(input: DeleteFunctionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionDefinitionCommandInput, DeleteFunctionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteGroupRequest, DeleteGroupResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteGroupCommandInput extends DeleteGroupRequest {
    }
    export interface DeleteGroupCommandOutput extends DeleteGroupResponse, __MetadataBearer {
    }
    /**
        * Deletes a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteGroupCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteGroupCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteGroupCommand extends $Command<DeleteGroupCommandInput, DeleteGroupCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteGroupCommandInput;
            constructor(input: DeleteGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupCommandInput, DeleteGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteLoggerDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteLoggerDefinitionRequest, DeleteLoggerDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteLoggerDefinitionCommandInput extends DeleteLoggerDefinitionRequest {
    }
    export interface DeleteLoggerDefinitionCommandOutput extends DeleteLoggerDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a logger definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteLoggerDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteLoggerDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteLoggerDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoggerDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteLoggerDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteLoggerDefinitionCommand extends $Command<DeleteLoggerDefinitionCommandInput, DeleteLoggerDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteLoggerDefinitionCommandInput;
            constructor(input: DeleteLoggerDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoggerDefinitionCommandInput, DeleteLoggerDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteResourceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteResourceDefinitionRequest, DeleteResourceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteResourceDefinitionCommandInput extends DeleteResourceDefinitionRequest {
    }
    export interface DeleteResourceDefinitionCommandOutput extends DeleteResourceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a resource definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteResourceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteResourceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteResourceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourceDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteResourceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteResourceDefinitionCommand extends $Command<DeleteResourceDefinitionCommandInput, DeleteResourceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteResourceDefinitionCommandInput;
            constructor(input: DeleteResourceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourceDefinitionCommandInput, DeleteResourceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteSubscriptionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DeleteSubscriptionDefinitionRequest, DeleteSubscriptionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DeleteSubscriptionDefinitionCommandInput extends DeleteSubscriptionDefinitionRequest {
    }
    export interface DeleteSubscriptionDefinitionCommandOutput extends DeleteSubscriptionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Deletes a subscription definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DeleteSubscriptionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DeleteSubscriptionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DeleteSubscriptionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSubscriptionDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteSubscriptionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DeleteSubscriptionDefinitionCommand extends $Command<DeleteSubscriptionDefinitionCommandInput, DeleteSubscriptionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DeleteSubscriptionDefinitionCommandInput;
            constructor(input: DeleteSubscriptionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSubscriptionDefinitionCommandInput, DeleteSubscriptionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DisassociateRoleFromGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DisassociateRoleFromGroupRequest, DisassociateRoleFromGroupResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DisassociateRoleFromGroupCommandInput extends DisassociateRoleFromGroupRequest {
    }
    export interface DisassociateRoleFromGroupCommandOutput extends DisassociateRoleFromGroupResponse, __MetadataBearer {
    }
    /**
        * Disassociates the role from a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DisassociateRoleFromGroupCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DisassociateRoleFromGroupCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DisassociateRoleFromGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateRoleFromGroupCommandInput} for command's `input` shape.
        * @see {@link DisassociateRoleFromGroupCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DisassociateRoleFromGroupCommand extends $Command<DisassociateRoleFromGroupCommandInput, DisassociateRoleFromGroupCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DisassociateRoleFromGroupCommandInput;
            constructor(input: DisassociateRoleFromGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateRoleFromGroupCommandInput, DisassociateRoleFromGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DisassociateServiceRoleFromAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { DisassociateServiceRoleFromAccountRequest, DisassociateServiceRoleFromAccountResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface DisassociateServiceRoleFromAccountCommandInput extends DisassociateServiceRoleFromAccountRequest {
    }
    export interface DisassociateServiceRoleFromAccountCommandOutput extends DisassociateServiceRoleFromAccountResponse, __MetadataBearer {
    }
    /**
        * Disassociates the service role from your account. Without a service role, deployments will not work.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, DisassociateServiceRoleFromAccountCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, DisassociateServiceRoleFromAccountCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new DisassociateServiceRoleFromAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateServiceRoleFromAccountCommandInput} for command's `input` shape.
        * @see {@link DisassociateServiceRoleFromAccountCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class DisassociateServiceRoleFromAccountCommand extends $Command<DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: DisassociateServiceRoleFromAccountCommandInput;
            constructor(input: DisassociateServiceRoleFromAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetAssociatedRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetAssociatedRoleRequest, GetAssociatedRoleResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetAssociatedRoleCommandInput extends GetAssociatedRoleRequest {
    }
    export interface GetAssociatedRoleCommandOutput extends GetAssociatedRoleResponse, __MetadataBearer {
    }
    /**
        * Retrieves the role associated with a particular group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetAssociatedRoleCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetAssociatedRoleCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetAssociatedRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssociatedRoleCommandInput} for command's `input` shape.
        * @see {@link GetAssociatedRoleCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetAssociatedRoleCommand extends $Command<GetAssociatedRoleCommandInput, GetAssociatedRoleCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetAssociatedRoleCommandInput;
            constructor(input: GetAssociatedRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssociatedRoleCommandInput, GetAssociatedRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetBulkDeploymentStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetBulkDeploymentStatusRequest, GetBulkDeploymentStatusResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetBulkDeploymentStatusCommandInput extends GetBulkDeploymentStatusRequest {
    }
    export interface GetBulkDeploymentStatusCommandOutput extends GetBulkDeploymentStatusResponse, __MetadataBearer {
    }
    /**
        * Returns the status of a bulk deployment.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetBulkDeploymentStatusCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetBulkDeploymentStatusCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetBulkDeploymentStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBulkDeploymentStatusCommandInput} for command's `input` shape.
        * @see {@link GetBulkDeploymentStatusCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetBulkDeploymentStatusCommand extends $Command<GetBulkDeploymentStatusCommandInput, GetBulkDeploymentStatusCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetBulkDeploymentStatusCommandInput;
            constructor(input: GetBulkDeploymentStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBulkDeploymentStatusCommandInput, GetBulkDeploymentStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectivityInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetConnectivityInfoRequest, GetConnectivityInfoResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetConnectivityInfoCommandInput extends GetConnectivityInfoRequest {
    }
    export interface GetConnectivityInfoCommandOutput extends GetConnectivityInfoResponse, __MetadataBearer {
    }
    /**
        * Retrieves the connectivity information for a core.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetConnectivityInfoCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetConnectivityInfoCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetConnectivityInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectivityInfoCommandInput} for command's `input` shape.
        * @see {@link GetConnectivityInfoCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetConnectivityInfoCommand extends $Command<GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetConnectivityInfoCommandInput;
            constructor(input: GetConnectivityInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectorDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetConnectorDefinitionRequest, GetConnectorDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetConnectorDefinitionCommandInput extends GetConnectorDefinitionRequest {
    }
    export interface GetConnectorDefinitionCommandOutput extends GetConnectorDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a connector definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetConnectorDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetConnectorDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetConnectorDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectorDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetConnectorDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetConnectorDefinitionCommand extends $Command<GetConnectorDefinitionCommandInput, GetConnectorDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetConnectorDefinitionCommandInput;
            constructor(input: GetConnectorDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectorDefinitionCommandInput, GetConnectorDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectorDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetConnectorDefinitionVersionRequest, GetConnectorDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetConnectorDefinitionVersionCommandInput extends GetConnectorDefinitionVersionRequest {
    }
    export interface GetConnectorDefinitionVersionCommandOutput extends GetConnectorDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a connector definition version, including the connectors that the version contains. Connectors are prebuilt modules that interact with local infrastructure, device protocols, AWS, and other cloud services.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetConnectorDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetConnectorDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetConnectorDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectorDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetConnectorDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetConnectorDefinitionVersionCommand extends $Command<GetConnectorDefinitionVersionCommandInput, GetConnectorDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetConnectorDefinitionVersionCommandInput;
            constructor(input: GetConnectorDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectorDefinitionVersionCommandInput, GetConnectorDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetCoreDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetCoreDefinitionRequest, GetCoreDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetCoreDefinitionCommandInput extends GetCoreDefinitionRequest {
    }
    export interface GetCoreDefinitionCommandOutput extends GetCoreDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a core definition version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetCoreDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetCoreDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetCoreDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetCoreDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetCoreDefinitionCommand extends $Command<GetCoreDefinitionCommandInput, GetCoreDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetCoreDefinitionCommandInput;
            constructor(input: GetCoreDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreDefinitionCommandInput, GetCoreDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetCoreDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetCoreDefinitionVersionRequest, GetCoreDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetCoreDefinitionVersionCommandInput extends GetCoreDefinitionVersionRequest {
    }
    export interface GetCoreDefinitionVersionCommandOutput extends GetCoreDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a core definition version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetCoreDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetCoreDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetCoreDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetCoreDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetCoreDefinitionVersionCommand extends $Command<GetCoreDefinitionVersionCommandInput, GetCoreDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetCoreDefinitionVersionCommandInput;
            constructor(input: GetCoreDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreDefinitionVersionCommandInput, GetCoreDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeploymentStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetDeploymentStatusRequest, GetDeploymentStatusResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetDeploymentStatusCommandInput extends GetDeploymentStatusRequest {
    }
    export interface GetDeploymentStatusCommandOutput extends GetDeploymentStatusResponse, __MetadataBearer {
    }
    /**
        * Returns the status of a deployment.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetDeploymentStatusCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetDeploymentStatusCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetDeploymentStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentStatusCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentStatusCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetDeploymentStatusCommand extends $Command<GetDeploymentStatusCommandInput, GetDeploymentStatusCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetDeploymentStatusCommandInput;
            constructor(input: GetDeploymentStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentStatusCommandInput, GetDeploymentStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeviceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetDeviceDefinitionRequest, GetDeviceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetDeviceDefinitionCommandInput extends GetDeviceDefinitionRequest {
    }
    export interface GetDeviceDefinitionCommandOutput extends GetDeviceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a device definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetDeviceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetDeviceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetDeviceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetDeviceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetDeviceDefinitionCommand extends $Command<GetDeviceDefinitionCommandInput, GetDeviceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetDeviceDefinitionCommandInput;
            constructor(input: GetDeviceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceDefinitionCommandInput, GetDeviceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeviceDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetDeviceDefinitionVersionRequest, GetDeviceDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetDeviceDefinitionVersionCommandInput extends GetDeviceDefinitionVersionRequest {
    }
    export interface GetDeviceDefinitionVersionCommandOutput extends GetDeviceDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a device definition version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetDeviceDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetDeviceDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetDeviceDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeviceDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetDeviceDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetDeviceDefinitionVersionCommand extends $Command<GetDeviceDefinitionVersionCommandInput, GetDeviceDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetDeviceDefinitionVersionCommandInput;
            constructor(input: GetDeviceDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeviceDefinitionVersionCommandInput, GetDeviceDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetFunctionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetFunctionDefinitionRequest, GetFunctionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetFunctionDefinitionCommandInput extends GetFunctionDefinitionRequest {
    }
    export interface GetFunctionDefinitionCommandOutput extends GetFunctionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a Lambda function definition, including its creation time and latest version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetFunctionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetFunctionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetFunctionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetFunctionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetFunctionDefinitionCommand extends $Command<GetFunctionDefinitionCommandInput, GetFunctionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetFunctionDefinitionCommandInput;
            constructor(input: GetFunctionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionDefinitionCommandInput, GetFunctionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetFunctionDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetFunctionDefinitionVersionRequest, GetFunctionDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetFunctionDefinitionVersionCommandInput extends GetFunctionDefinitionVersionRequest {
    }
    export interface GetFunctionDefinitionVersionCommandOutput extends GetFunctionDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a Lambda function definition version, including which Lambda functions are included in the version and their configurations.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetFunctionDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetFunctionDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetFunctionDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetFunctionDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetFunctionDefinitionVersionCommand extends $Command<GetFunctionDefinitionVersionCommandInput, GetFunctionDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetFunctionDefinitionVersionCommandInput;
            constructor(input: GetFunctionDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionDefinitionVersionCommandInput, GetFunctionDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCertificateAuthorityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetGroupCertificateAuthorityRequest, GetGroupCertificateAuthorityResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetGroupCertificateAuthorityCommandInput extends GetGroupCertificateAuthorityRequest {
    }
    export interface GetGroupCertificateAuthorityCommandOutput extends GetGroupCertificateAuthorityResponse, __MetadataBearer {
    }
    /**
        * Retreives the CA associated with a group. Returns the public key of the CA.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetGroupCertificateAuthorityCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetGroupCertificateAuthorityCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetGroupCertificateAuthorityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCertificateAuthorityCommandInput} for command's `input` shape.
        * @see {@link GetGroupCertificateAuthorityCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetGroupCertificateAuthorityCommand extends $Command<GetGroupCertificateAuthorityCommandInput, GetGroupCertificateAuthorityCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetGroupCertificateAuthorityCommandInput;
            constructor(input: GetGroupCertificateAuthorityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCertificateAuthorityCommandInput, GetGroupCertificateAuthorityCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCertificateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetGroupCertificateConfigurationRequest, GetGroupCertificateConfigurationResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetGroupCertificateConfigurationCommandInput extends GetGroupCertificateConfigurationRequest {
    }
    export interface GetGroupCertificateConfigurationCommandOutput extends GetGroupCertificateConfigurationResponse, __MetadataBearer {
    }
    /**
        * Retrieves the current configuration for the CA used by the group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetGroupCertificateConfigurationCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetGroupCertificateConfigurationCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetGroupCertificateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCertificateConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetGroupCertificateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetGroupCertificateConfigurationCommand extends $Command<GetGroupCertificateConfigurationCommandInput, GetGroupCertificateConfigurationCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetGroupCertificateConfigurationCommandInput;
            constructor(input: GetGroupCertificateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCertificateConfigurationCommandInput, GetGroupCertificateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetGroupRequest, GetGroupResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetGroupCommandInput extends GetGroupRequest {
    }
    export interface GetGroupCommandOutput extends GetGroupResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetGroupCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetGroupCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCommandInput} for command's `input` shape.
        * @see {@link GetGroupCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetGroupCommand extends $Command<GetGroupCommandInput, GetGroupCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetGroupCommandInput;
            constructor(input: GetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCommandInput, GetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetGroupVersionRequest, GetGroupVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetGroupVersionCommandInput extends GetGroupVersionRequest {
    }
    export interface GetGroupVersionCommandOutput extends GetGroupVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a group version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetGroupVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetGroupVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetGroupVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupVersionCommandInput} for command's `input` shape.
        * @see {@link GetGroupVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetGroupVersionCommand extends $Command<GetGroupVersionCommandInput, GetGroupVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetGroupVersionCommandInput;
            constructor(input: GetGroupVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupVersionCommandInput, GetGroupVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetLoggerDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetLoggerDefinitionRequest, GetLoggerDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetLoggerDefinitionCommandInput extends GetLoggerDefinitionRequest {
    }
    export interface GetLoggerDefinitionCommandOutput extends GetLoggerDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a logger definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetLoggerDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetLoggerDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetLoggerDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoggerDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetLoggerDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetLoggerDefinitionCommand extends $Command<GetLoggerDefinitionCommandInput, GetLoggerDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetLoggerDefinitionCommandInput;
            constructor(input: GetLoggerDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoggerDefinitionCommandInput, GetLoggerDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetLoggerDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetLoggerDefinitionVersionRequest, GetLoggerDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetLoggerDefinitionVersionCommandInput extends GetLoggerDefinitionVersionRequest {
    }
    export interface GetLoggerDefinitionVersionCommandOutput extends GetLoggerDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a logger definition version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetLoggerDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetLoggerDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetLoggerDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoggerDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetLoggerDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetLoggerDefinitionVersionCommand extends $Command<GetLoggerDefinitionVersionCommandInput, GetLoggerDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetLoggerDefinitionVersionCommandInput;
            constructor(input: GetLoggerDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoggerDefinitionVersionCommandInput, GetLoggerDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetResourceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetResourceDefinitionRequest, GetResourceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetResourceDefinitionCommandInput extends GetResourceDefinitionRequest {
    }
    export interface GetResourceDefinitionCommandOutput extends GetResourceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a resource definition, including its creation time and latest version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetResourceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetResourceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetResourceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourceDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetResourceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetResourceDefinitionCommand extends $Command<GetResourceDefinitionCommandInput, GetResourceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetResourceDefinitionCommandInput;
            constructor(input: GetResourceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourceDefinitionCommandInput, GetResourceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetResourceDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetResourceDefinitionVersionRequest, GetResourceDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetResourceDefinitionVersionCommandInput extends GetResourceDefinitionVersionRequest {
    }
    export interface GetResourceDefinitionVersionCommandOutput extends GetResourceDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a resource definition version, including which resources are included in the version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetResourceDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetResourceDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetResourceDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourceDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetResourceDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetResourceDefinitionVersionCommand extends $Command<GetResourceDefinitionVersionCommandInput, GetResourceDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetResourceDefinitionVersionCommandInput;
            constructor(input: GetResourceDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourceDefinitionVersionCommandInput, GetResourceDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetServiceRoleForAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetServiceRoleForAccountRequest, GetServiceRoleForAccountResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetServiceRoleForAccountCommandInput extends GetServiceRoleForAccountRequest {
    }
    export interface GetServiceRoleForAccountCommandOutput extends GetServiceRoleForAccountResponse, __MetadataBearer {
    }
    /**
        * Retrieves the service role that is attached to your account.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetServiceRoleForAccountCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetServiceRoleForAccountCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetServiceRoleForAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServiceRoleForAccountCommandInput} for command's `input` shape.
        * @see {@link GetServiceRoleForAccountCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetServiceRoleForAccountCommand extends $Command<GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetServiceRoleForAccountCommandInput;
            constructor(input: GetServiceRoleForAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetSubscriptionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetSubscriptionDefinitionRequest, GetSubscriptionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetSubscriptionDefinitionCommandInput extends GetSubscriptionDefinitionRequest {
    }
    export interface GetSubscriptionDefinitionCommandOutput extends GetSubscriptionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a subscription definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetSubscriptionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetSubscriptionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetSubscriptionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSubscriptionDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetSubscriptionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetSubscriptionDefinitionCommand extends $Command<GetSubscriptionDefinitionCommandInput, GetSubscriptionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetSubscriptionDefinitionCommandInput;
            constructor(input: GetSubscriptionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSubscriptionDefinitionCommandInput, GetSubscriptionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetSubscriptionDefinitionVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetSubscriptionDefinitionVersionRequest, GetSubscriptionDefinitionVersionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetSubscriptionDefinitionVersionCommandInput extends GetSubscriptionDefinitionVersionRequest {
    }
    export interface GetSubscriptionDefinitionVersionCommandOutput extends GetSubscriptionDefinitionVersionResponse, __MetadataBearer {
    }
    /**
        * Retrieves information about a subscription definition version.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetSubscriptionDefinitionVersionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetSubscriptionDefinitionVersionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetSubscriptionDefinitionVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSubscriptionDefinitionVersionCommandInput} for command's `input` shape.
        * @see {@link GetSubscriptionDefinitionVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetSubscriptionDefinitionVersionCommand extends $Command<GetSubscriptionDefinitionVersionCommandInput, GetSubscriptionDefinitionVersionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetSubscriptionDefinitionVersionCommandInput;
            constructor(input: GetSubscriptionDefinitionVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSubscriptionDefinitionVersionCommandInput, GetSubscriptionDefinitionVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetThingRuntimeConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { GetThingRuntimeConfigurationRequest, GetThingRuntimeConfigurationResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface GetThingRuntimeConfigurationCommandInput extends GetThingRuntimeConfigurationRequest {
    }
    export interface GetThingRuntimeConfigurationCommandOutput extends GetThingRuntimeConfigurationResponse, __MetadataBearer {
    }
    /**
        * Get the runtime configuration of a thing.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, GetThingRuntimeConfigurationCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, GetThingRuntimeConfigurationCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new GetThingRuntimeConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetThingRuntimeConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetThingRuntimeConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class GetThingRuntimeConfigurationCommand extends $Command<GetThingRuntimeConfigurationCommandInput, GetThingRuntimeConfigurationCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: GetThingRuntimeConfigurationCommandInput;
            constructor(input: GetThingRuntimeConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetThingRuntimeConfigurationCommandInput, GetThingRuntimeConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListBulkDeploymentDetailedReportsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListBulkDeploymentDetailedReportsRequest, ListBulkDeploymentDetailedReportsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListBulkDeploymentDetailedReportsCommandInput extends ListBulkDeploymentDetailedReportsRequest {
    }
    export interface ListBulkDeploymentDetailedReportsCommandOutput extends ListBulkDeploymentDetailedReportsResponse, __MetadataBearer {
    }
    /**
        * Gets a paginated list of the deployments that have been started in a bulk deployment operation, and their current deployment status.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListBulkDeploymentDetailedReportsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListBulkDeploymentDetailedReportsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListBulkDeploymentDetailedReportsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListBulkDeploymentDetailedReportsCommandInput} for command's `input` shape.
        * @see {@link ListBulkDeploymentDetailedReportsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListBulkDeploymentDetailedReportsCommand extends $Command<ListBulkDeploymentDetailedReportsCommandInput, ListBulkDeploymentDetailedReportsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListBulkDeploymentDetailedReportsCommandInput;
            constructor(input: ListBulkDeploymentDetailedReportsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListBulkDeploymentDetailedReportsCommandInput, ListBulkDeploymentDetailedReportsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListBulkDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListBulkDeploymentsRequest, ListBulkDeploymentsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListBulkDeploymentsCommandInput extends ListBulkDeploymentsRequest {
    }
    export interface ListBulkDeploymentsCommandOutput extends ListBulkDeploymentsResponse, __MetadataBearer {
    }
    /**
        * Returns a list of bulk deployments.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListBulkDeploymentsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListBulkDeploymentsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListBulkDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListBulkDeploymentsCommandInput} for command's `input` shape.
        * @see {@link ListBulkDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListBulkDeploymentsCommand extends $Command<ListBulkDeploymentsCommandInput, ListBulkDeploymentsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListBulkDeploymentsCommandInput;
            constructor(input: ListBulkDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListBulkDeploymentsCommandInput, ListBulkDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListConnectorDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListConnectorDefinitionsRequest, ListConnectorDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListConnectorDefinitionsCommandInput extends ListConnectorDefinitionsRequest {
    }
    export interface ListConnectorDefinitionsCommandOutput extends ListConnectorDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of connector definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListConnectorDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListConnectorDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListConnectorDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConnectorDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListConnectorDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListConnectorDefinitionsCommand extends $Command<ListConnectorDefinitionsCommandInput, ListConnectorDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListConnectorDefinitionsCommandInput;
            constructor(input: ListConnectorDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConnectorDefinitionsCommandInput, ListConnectorDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListConnectorDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListConnectorDefinitionVersionsRequest, ListConnectorDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListConnectorDefinitionVersionsCommandInput extends ListConnectorDefinitionVersionsRequest {
    }
    export interface ListConnectorDefinitionVersionsCommandOutput extends ListConnectorDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a connector definition, which are containers for connectors. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListConnectorDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListConnectorDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListConnectorDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConnectorDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListConnectorDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListConnectorDefinitionVersionsCommand extends $Command<ListConnectorDefinitionVersionsCommandInput, ListConnectorDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListConnectorDefinitionVersionsCommandInput;
            constructor(input: ListConnectorDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConnectorDefinitionVersionsCommandInput, ListConnectorDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListCoreDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListCoreDefinitionsRequest, ListCoreDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListCoreDefinitionsCommandInput extends ListCoreDefinitionsRequest {
    }
    export interface ListCoreDefinitionsCommandOutput extends ListCoreDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of core definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListCoreDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListCoreDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListCoreDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoreDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListCoreDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListCoreDefinitionsCommand extends $Command<ListCoreDefinitionsCommandInput, ListCoreDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListCoreDefinitionsCommandInput;
            constructor(input: ListCoreDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoreDefinitionsCommandInput, ListCoreDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListCoreDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListCoreDefinitionVersionsRequest, ListCoreDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListCoreDefinitionVersionsCommandInput extends ListCoreDefinitionVersionsRequest {
    }
    export interface ListCoreDefinitionVersionsCommandOutput extends ListCoreDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a core definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListCoreDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListCoreDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListCoreDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoreDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListCoreDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListCoreDefinitionVersionsCommand extends $Command<ListCoreDefinitionVersionsCommandInput, ListCoreDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListCoreDefinitionVersionsCommandInput;
            constructor(input: ListCoreDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoreDefinitionVersionsCommandInput, ListCoreDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListDeploymentsRequest, ListDeploymentsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListDeploymentsCommandInput extends ListDeploymentsRequest {
    }
    export interface ListDeploymentsCommandOutput extends ListDeploymentsResponse, __MetadataBearer {
    }
    /**
        * Returns a history of deployments for the group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListDeploymentsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListDeploymentsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeploymentsCommandInput} for command's `input` shape.
        * @see {@link ListDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListDeploymentsCommand extends $Command<ListDeploymentsCommandInput, ListDeploymentsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListDeploymentsCommandInput;
            constructor(input: ListDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeploymentsCommandInput, ListDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeviceDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListDeviceDefinitionsRequest, ListDeviceDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListDeviceDefinitionsCommandInput extends ListDeviceDefinitionsRequest {
    }
    export interface ListDeviceDefinitionsCommandOutput extends ListDeviceDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of device definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListDeviceDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListDeviceDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListDeviceDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeviceDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListDeviceDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListDeviceDefinitionsCommand extends $Command<ListDeviceDefinitionsCommandInput, ListDeviceDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListDeviceDefinitionsCommandInput;
            constructor(input: ListDeviceDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeviceDefinitionsCommandInput, ListDeviceDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeviceDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListDeviceDefinitionVersionsRequest, ListDeviceDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListDeviceDefinitionVersionsCommandInput extends ListDeviceDefinitionVersionsRequest {
    }
    export interface ListDeviceDefinitionVersionsCommandOutput extends ListDeviceDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a device definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListDeviceDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListDeviceDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListDeviceDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeviceDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListDeviceDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListDeviceDefinitionVersionsCommand extends $Command<ListDeviceDefinitionVersionsCommandInput, ListDeviceDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListDeviceDefinitionVersionsCommandInput;
            constructor(input: ListDeviceDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeviceDefinitionVersionsCommandInput, ListDeviceDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListFunctionDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListFunctionDefinitionsRequest, ListFunctionDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListFunctionDefinitionsCommandInput extends ListFunctionDefinitionsRequest {
    }
    export interface ListFunctionDefinitionsCommandOutput extends ListFunctionDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of Lambda function definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListFunctionDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListFunctionDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListFunctionDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListFunctionDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListFunctionDefinitionsCommand extends $Command<ListFunctionDefinitionsCommandInput, ListFunctionDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListFunctionDefinitionsCommandInput;
            constructor(input: ListFunctionDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionDefinitionsCommandInput, ListFunctionDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListFunctionDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListFunctionDefinitionVersionsRequest, ListFunctionDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListFunctionDefinitionVersionsCommandInput extends ListFunctionDefinitionVersionsRequest {
    }
    export interface ListFunctionDefinitionVersionsCommandOutput extends ListFunctionDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a Lambda function definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListFunctionDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListFunctionDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListFunctionDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListFunctionDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListFunctionDefinitionVersionsCommand extends $Command<ListFunctionDefinitionVersionsCommandInput, ListFunctionDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListFunctionDefinitionVersionsCommandInput;
            constructor(input: ListFunctionDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionDefinitionVersionsCommandInput, ListFunctionDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupCertificateAuthoritiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListGroupCertificateAuthoritiesRequest, ListGroupCertificateAuthoritiesResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListGroupCertificateAuthoritiesCommandInput extends ListGroupCertificateAuthoritiesRequest {
    }
    export interface ListGroupCertificateAuthoritiesCommandOutput extends ListGroupCertificateAuthoritiesResponse, __MetadataBearer {
    }
    /**
        * Retrieves the current CAs for a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListGroupCertificateAuthoritiesCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListGroupCertificateAuthoritiesCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListGroupCertificateAuthoritiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupCertificateAuthoritiesCommandInput} for command's `input` shape.
        * @see {@link ListGroupCertificateAuthoritiesCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListGroupCertificateAuthoritiesCommand extends $Command<ListGroupCertificateAuthoritiesCommandInput, ListGroupCertificateAuthoritiesCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListGroupCertificateAuthoritiesCommandInput;
            constructor(input: ListGroupCertificateAuthoritiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupCertificateAuthoritiesCommandInput, ListGroupCertificateAuthoritiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListGroupsRequest, ListGroupsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListGroupsCommandInput extends ListGroupsRequest {
    }
    export interface ListGroupsCommandOutput extends ListGroupsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of groups.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListGroupsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListGroupsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsCommandInput} for command's `input` shape.
        * @see {@link ListGroupsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListGroupsCommand extends $Command<ListGroupsCommandInput, ListGroupsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListGroupsCommandInput;
            constructor(input: ListGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsCommandInput, ListGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListGroupVersionsRequest, ListGroupVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListGroupVersionsCommandInput extends ListGroupVersionsRequest {
    }
    export interface ListGroupVersionsCommandOutput extends ListGroupVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListGroupVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListGroupVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListGroupVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupVersionsCommandInput} for command's `input` shape.
        * @see {@link ListGroupVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListGroupVersionsCommand extends $Command<ListGroupVersionsCommandInput, ListGroupVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListGroupVersionsCommandInput;
            constructor(input: ListGroupVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupVersionsCommandInput, ListGroupVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListLoggerDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListLoggerDefinitionsRequest, ListLoggerDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListLoggerDefinitionsCommandInput extends ListLoggerDefinitionsRequest {
    }
    export interface ListLoggerDefinitionsCommandOutput extends ListLoggerDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of logger definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListLoggerDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListLoggerDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListLoggerDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLoggerDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListLoggerDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListLoggerDefinitionsCommand extends $Command<ListLoggerDefinitionsCommandInput, ListLoggerDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListLoggerDefinitionsCommandInput;
            constructor(input: ListLoggerDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLoggerDefinitionsCommandInput, ListLoggerDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListLoggerDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListLoggerDefinitionVersionsRequest, ListLoggerDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListLoggerDefinitionVersionsCommandInput extends ListLoggerDefinitionVersionsRequest {
    }
    export interface ListLoggerDefinitionVersionsCommandOutput extends ListLoggerDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a logger definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListLoggerDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListLoggerDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListLoggerDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLoggerDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListLoggerDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListLoggerDefinitionVersionsCommand extends $Command<ListLoggerDefinitionVersionsCommandInput, ListLoggerDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListLoggerDefinitionVersionsCommandInput;
            constructor(input: ListLoggerDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLoggerDefinitionVersionsCommandInput, ListLoggerDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListResourceDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListResourceDefinitionsRequest, ListResourceDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListResourceDefinitionsCommandInput extends ListResourceDefinitionsRequest {
    }
    export interface ListResourceDefinitionsCommandOutput extends ListResourceDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of resource definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListResourceDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListResourceDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListResourceDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourceDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListResourceDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListResourceDefinitionsCommand extends $Command<ListResourceDefinitionsCommandInput, ListResourceDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListResourceDefinitionsCommandInput;
            constructor(input: ListResourceDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourceDefinitionsCommandInput, ListResourceDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListResourceDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListResourceDefinitionVersionsRequest, ListResourceDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListResourceDefinitionVersionsCommandInput extends ListResourceDefinitionVersionsRequest {
    }
    export interface ListResourceDefinitionVersionsCommandOutput extends ListResourceDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a resource definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListResourceDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListResourceDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListResourceDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourceDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListResourceDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListResourceDefinitionVersionsCommand extends $Command<ListResourceDefinitionVersionsCommandInput, ListResourceDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListResourceDefinitionVersionsCommandInput;
            constructor(input: ListResourceDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourceDefinitionVersionsCommandInput, ListResourceDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListSubscriptionDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListSubscriptionDefinitionsRequest, ListSubscriptionDefinitionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListSubscriptionDefinitionsCommandInput extends ListSubscriptionDefinitionsRequest {
    }
    export interface ListSubscriptionDefinitionsCommandOutput extends ListSubscriptionDefinitionsResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of subscription definitions.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListSubscriptionDefinitionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListSubscriptionDefinitionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListSubscriptionDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSubscriptionDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListSubscriptionDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListSubscriptionDefinitionsCommand extends $Command<ListSubscriptionDefinitionsCommandInput, ListSubscriptionDefinitionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListSubscriptionDefinitionsCommandInput;
            constructor(input: ListSubscriptionDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSubscriptionDefinitionsCommandInput, ListSubscriptionDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListSubscriptionDefinitionVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListSubscriptionDefinitionVersionsRequest, ListSubscriptionDefinitionVersionsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListSubscriptionDefinitionVersionsCommandInput extends ListSubscriptionDefinitionVersionsRequest {
    }
    export interface ListSubscriptionDefinitionVersionsCommandOutput extends ListSubscriptionDefinitionVersionsResponse, __MetadataBearer {
    }
    /**
        * Lists the versions of a subscription definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListSubscriptionDefinitionVersionsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListSubscriptionDefinitionVersionsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListSubscriptionDefinitionVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSubscriptionDefinitionVersionsCommandInput} for command's `input` shape.
        * @see {@link ListSubscriptionDefinitionVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListSubscriptionDefinitionVersionsCommand extends $Command<ListSubscriptionDefinitionVersionsCommandInput, ListSubscriptionDefinitionVersionsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListSubscriptionDefinitionVersionsCommandInput;
            constructor(input: ListSubscriptionDefinitionVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSubscriptionDefinitionVersionsCommandInput, ListSubscriptionDefinitionVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * Retrieves a list of resource tags for a resource arn.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ListTagsForResourceCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ListTagsForResourceCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ResetDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { ResetDeploymentsRequest, ResetDeploymentsResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface ResetDeploymentsCommandInput extends ResetDeploymentsRequest {
    }
    export interface ResetDeploymentsCommandOutput extends ResetDeploymentsResponse, __MetadataBearer {
    }
    /**
        * Resets a group's deployments.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, ResetDeploymentsCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, ResetDeploymentsCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new ResetDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetDeploymentsCommandInput} for command's `input` shape.
        * @see {@link ResetDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class ResetDeploymentsCommand extends $Command<ResetDeploymentsCommandInput, ResetDeploymentsCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: ResetDeploymentsCommandInput;
            constructor(input: ResetDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetDeploymentsCommandInput, ResetDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/StartBulkDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { StartBulkDeploymentRequest, StartBulkDeploymentResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface StartBulkDeploymentCommandInput extends StartBulkDeploymentRequest {
    }
    export interface StartBulkDeploymentCommandOutput extends StartBulkDeploymentResponse, __MetadataBearer {
    }
    /**
        * Deploys multiple groups in one operation. This action starts the bulk deployment of a specified set of group versions. Each group version deployment will be triggered with an adaptive rate that has a fixed upper limit. We recommend that you include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment'' request. These requests are idempotent with respect to the token and the request parameters.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, StartBulkDeploymentCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, StartBulkDeploymentCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new StartBulkDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartBulkDeploymentCommandInput} for command's `input` shape.
        * @see {@link StartBulkDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class StartBulkDeploymentCommand extends $Command<StartBulkDeploymentCommandInput, StartBulkDeploymentCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: StartBulkDeploymentCommandInput;
            constructor(input: StartBulkDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartBulkDeploymentCommandInput, StartBulkDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/StopBulkDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { StopBulkDeploymentRequest, StopBulkDeploymentResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface StopBulkDeploymentCommandInput extends StopBulkDeploymentRequest {
    }
    export interface StopBulkDeploymentCommandOutput extends StopBulkDeploymentResponse, __MetadataBearer {
    }
    /**
        * Stops the execution of a bulk deployment. This action returns a status of ''Stopping'' until the deployment is stopped. You cannot start a new bulk deployment while a previous deployment is in the ''Stopping'' state. This action doesn't rollback completed deployments or cancel pending deployments.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, StopBulkDeploymentCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, StopBulkDeploymentCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new StopBulkDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopBulkDeploymentCommandInput} for command's `input` shape.
        * @see {@link StopBulkDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class StopBulkDeploymentCommand extends $Command<StopBulkDeploymentCommandInput, StopBulkDeploymentCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: StopBulkDeploymentCommandInput;
            constructor(input: StopBulkDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopBulkDeploymentCommandInput, StopBulkDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { TagResourceRequest } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * Adds tags to a Greengrass resource. Valid resources are 'Group', 'ConnectorDefinition', 'CoreDefinition', 'DeviceDefinition', 'FunctionDefinition', 'LoggerDefinition', 'SubscriptionDefinition', 'ResourceDefinition', and 'BulkDeployment'.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, TagResourceCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, TagResourceCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UntagResourceRequest } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * Remove resource tags from a Greengrass Resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UntagResourceCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UntagResourceCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateConnectivityInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateConnectivityInfoRequest, UpdateConnectivityInfoResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateConnectivityInfoCommandInput extends UpdateConnectivityInfoRequest {
    }
    export interface UpdateConnectivityInfoCommandOutput extends UpdateConnectivityInfoResponse, __MetadataBearer {
    }
    /**
        * Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateConnectivityInfoCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateConnectivityInfoCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateConnectivityInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectivityInfoCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectivityInfoCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateConnectivityInfoCommand extends $Command<UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateConnectivityInfoCommandInput;
            constructor(input: UpdateConnectivityInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateConnectorDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateConnectorDefinitionRequest, UpdateConnectorDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateConnectorDefinitionCommandInput extends UpdateConnectorDefinitionRequest {
    }
    export interface UpdateConnectorDefinitionCommandOutput extends UpdateConnectorDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a connector definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateConnectorDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateConnectorDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateConnectorDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectorDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectorDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateConnectorDefinitionCommand extends $Command<UpdateConnectorDefinitionCommandInput, UpdateConnectorDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateConnectorDefinitionCommandInput;
            constructor(input: UpdateConnectorDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectorDefinitionCommandInput, UpdateConnectorDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateCoreDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateCoreDefinitionRequest, UpdateCoreDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateCoreDefinitionCommandInput extends UpdateCoreDefinitionRequest {
    }
    export interface UpdateCoreDefinitionCommandOutput extends UpdateCoreDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a core definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateCoreDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateCoreDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateCoreDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCoreDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateCoreDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateCoreDefinitionCommand extends $Command<UpdateCoreDefinitionCommandInput, UpdateCoreDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateCoreDefinitionCommandInput;
            constructor(input: UpdateCoreDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCoreDefinitionCommandInput, UpdateCoreDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateDeviceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateDeviceDefinitionRequest, UpdateDeviceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateDeviceDefinitionCommandInput extends UpdateDeviceDefinitionRequest {
    }
    export interface UpdateDeviceDefinitionCommandOutput extends UpdateDeviceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a device definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateDeviceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateDeviceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateDeviceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeviceDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateDeviceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateDeviceDefinitionCommand extends $Command<UpdateDeviceDefinitionCommandInput, UpdateDeviceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateDeviceDefinitionCommandInput;
            constructor(input: UpdateDeviceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeviceDefinitionCommandInput, UpdateDeviceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateFunctionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateFunctionDefinitionRequest, UpdateFunctionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateFunctionDefinitionCommandInput extends UpdateFunctionDefinitionRequest {
    }
    export interface UpdateFunctionDefinitionCommandOutput extends UpdateFunctionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a Lambda function definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateFunctionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateFunctionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateFunctionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFunctionDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateFunctionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateFunctionDefinitionCommand extends $Command<UpdateFunctionDefinitionCommandInput, UpdateFunctionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateFunctionDefinitionCommandInput;
            constructor(input: UpdateFunctionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFunctionDefinitionCommandInput, UpdateFunctionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateGroupCertificateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateGroupCertificateConfigurationRequest, UpdateGroupCertificateConfigurationResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateGroupCertificateConfigurationCommandInput extends UpdateGroupCertificateConfigurationRequest {
    }
    export interface UpdateGroupCertificateConfigurationCommandOutput extends UpdateGroupCertificateConfigurationResponse, __MetadataBearer {
    }
    /**
        * Updates the Certificate expiry time for a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateGroupCertificateConfigurationCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateGroupCertificateConfigurationCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateGroupCertificateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupCertificateConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupCertificateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateGroupCertificateConfigurationCommand extends $Command<UpdateGroupCertificateConfigurationCommandInput, UpdateGroupCertificateConfigurationCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateGroupCertificateConfigurationCommandInput;
            constructor(input: UpdateGroupCertificateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupCertificateConfigurationCommandInput, UpdateGroupCertificateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateGroupRequest, UpdateGroupResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateGroupCommandInput extends UpdateGroupRequest {
    }
    export interface UpdateGroupCommandOutput extends UpdateGroupResponse, __MetadataBearer {
    }
    /**
        * Updates a group.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateGroupCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateGroupCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateGroupCommand extends $Command<UpdateGroupCommandInput, UpdateGroupCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateGroupCommandInput;
            constructor(input: UpdateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupCommandInput, UpdateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateLoggerDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateLoggerDefinitionRequest, UpdateLoggerDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateLoggerDefinitionCommandInput extends UpdateLoggerDefinitionRequest {
    }
    export interface UpdateLoggerDefinitionCommandOutput extends UpdateLoggerDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a logger definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateLoggerDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateLoggerDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateLoggerDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLoggerDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateLoggerDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateLoggerDefinitionCommand extends $Command<UpdateLoggerDefinitionCommandInput, UpdateLoggerDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateLoggerDefinitionCommandInput;
            constructor(input: UpdateLoggerDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLoggerDefinitionCommandInput, UpdateLoggerDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateResourceDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateResourceDefinitionRequest, UpdateResourceDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateResourceDefinitionCommandInput extends UpdateResourceDefinitionRequest {
    }
    export interface UpdateResourceDefinitionCommandOutput extends UpdateResourceDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a resource definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateResourceDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateResourceDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateResourceDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateResourceDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateResourceDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateResourceDefinitionCommand extends $Command<UpdateResourceDefinitionCommandInput, UpdateResourceDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateResourceDefinitionCommandInput;
            constructor(input: UpdateResourceDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResourceDefinitionCommandInput, UpdateResourceDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateSubscriptionDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateSubscriptionDefinitionRequest, UpdateSubscriptionDefinitionResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateSubscriptionDefinitionCommandInput extends UpdateSubscriptionDefinitionRequest {
    }
    export interface UpdateSubscriptionDefinitionCommandOutput extends UpdateSubscriptionDefinitionResponse, __MetadataBearer {
    }
    /**
        * Updates a subscription definition.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateSubscriptionDefinitionCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateSubscriptionDefinitionCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateSubscriptionDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSubscriptionDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateSubscriptionDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateSubscriptionDefinitionCommand extends $Command<UpdateSubscriptionDefinitionCommandInput, UpdateSubscriptionDefinitionCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateSubscriptionDefinitionCommandInput;
            constructor(input: UpdateSubscriptionDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSubscriptionDefinitionCommandInput, UpdateSubscriptionDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateThingRuntimeConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient";
    import { UpdateThingRuntimeConfigurationRequest, UpdateThingRuntimeConfigurationResponse } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0";
    export interface UpdateThingRuntimeConfigurationCommandInput extends UpdateThingRuntimeConfigurationRequest {
    }
    export interface UpdateThingRuntimeConfigurationCommandOutput extends UpdateThingRuntimeConfigurationResponse, __MetadataBearer {
    }
    /**
        * Updates the runtime configuration of a thing.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassClient, UpdateThingRuntimeConfigurationCommand } from "@aws-sdk/client-greengrass"; // ES Modules import
        * // const { GreengrassClient, UpdateThingRuntimeConfigurationCommand } = require("@aws-sdk/client-greengrass"); // CommonJS import
        * const client = new GreengrassClient(config);
        * const command = new UpdateThingRuntimeConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateThingRuntimeConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateThingRuntimeConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GreengrassClientResolvedConfig | config} for GreengrassClient's `config` shape.
        *
        */
    export class UpdateThingRuntimeConfigurationCommand extends $Command<UpdateThingRuntimeConfigurationCommandInput, UpdateThingRuntimeConfigurationCommandOutput, GreengrassClientResolvedConfig> {
            readonly input: UpdateThingRuntimeConfigurationCommandInput;
            constructor(input: UpdateThingRuntimeConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateThingRuntimeConfigurationCommandInput, UpdateThingRuntimeConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/GreengrassClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateRoleToGroupCommandInput, AssociateRoleToGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/AssociateRoleToGroupCommand";
    import { AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/AssociateServiceRoleToAccountCommand";
    import { CreateConnectorDefinitionCommandInput, CreateConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateConnectorDefinitionCommand";
    import { CreateConnectorDefinitionVersionCommandInput, CreateConnectorDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateConnectorDefinitionVersionCommand";
    import { CreateCoreDefinitionCommandInput, CreateCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateCoreDefinitionCommand";
    import { CreateCoreDefinitionVersionCommandInput, CreateCoreDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateCoreDefinitionVersionCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeploymentCommand";
    import { CreateDeviceDefinitionCommandInput, CreateDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeviceDefinitionCommand";
    import { CreateDeviceDefinitionVersionCommandInput, CreateDeviceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateDeviceDefinitionVersionCommand";
    import { CreateFunctionDefinitionCommandInput, CreateFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateFunctionDefinitionCommand";
    import { CreateFunctionDefinitionVersionCommandInput, CreateFunctionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateFunctionDefinitionVersionCommand";
    import { CreateGroupCertificateAuthorityCommandInput, CreateGroupCertificateAuthorityCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupCertificateAuthorityCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupCommand";
    import { CreateGroupVersionCommandInput, CreateGroupVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateGroupVersionCommand";
    import { CreateLoggerDefinitionCommandInput, CreateLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateLoggerDefinitionCommand";
    import { CreateLoggerDefinitionVersionCommandInput, CreateLoggerDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateLoggerDefinitionVersionCommand";
    import { CreateResourceDefinitionCommandInput, CreateResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateResourceDefinitionCommand";
    import { CreateResourceDefinitionVersionCommandInput, CreateResourceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateResourceDefinitionVersionCommand";
    import { CreateSoftwareUpdateJobCommandInput, CreateSoftwareUpdateJobCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSoftwareUpdateJobCommand";
    import { CreateSubscriptionDefinitionCommandInput, CreateSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSubscriptionDefinitionCommand";
    import { CreateSubscriptionDefinitionVersionCommandInput, CreateSubscriptionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/CreateSubscriptionDefinitionVersionCommand";
    import { DeleteConnectorDefinitionCommandInput, DeleteConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteConnectorDefinitionCommand";
    import { DeleteCoreDefinitionCommandInput, DeleteCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteCoreDefinitionCommand";
    import { DeleteDeviceDefinitionCommandInput, DeleteDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteDeviceDefinitionCommand";
    import { DeleteFunctionDefinitionCommandInput, DeleteFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteFunctionDefinitionCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteGroupCommand";
    import { DeleteLoggerDefinitionCommandInput, DeleteLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteLoggerDefinitionCommand";
    import { DeleteResourceDefinitionCommandInput, DeleteResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteResourceDefinitionCommand";
    import { DeleteSubscriptionDefinitionCommandInput, DeleteSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DeleteSubscriptionDefinitionCommand";
    import { DisassociateRoleFromGroupCommandInput, DisassociateRoleFromGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DisassociateRoleFromGroupCommand";
    import { DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/DisassociateServiceRoleFromAccountCommand";
    import { GetAssociatedRoleCommandInput, GetAssociatedRoleCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetAssociatedRoleCommand";
    import { GetBulkDeploymentStatusCommandInput, GetBulkDeploymentStatusCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetBulkDeploymentStatusCommand";
    import { GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectivityInfoCommand";
    import { GetConnectorDefinitionCommandInput, GetConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectorDefinitionCommand";
    import { GetConnectorDefinitionVersionCommandInput, GetConnectorDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetConnectorDefinitionVersionCommand";
    import { GetCoreDefinitionCommandInput, GetCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetCoreDefinitionCommand";
    import { GetCoreDefinitionVersionCommandInput, GetCoreDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetCoreDefinitionVersionCommand";
    import { GetDeploymentStatusCommandInput, GetDeploymentStatusCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeploymentStatusCommand";
    import { GetDeviceDefinitionCommandInput, GetDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeviceDefinitionCommand";
    import { GetDeviceDefinitionVersionCommandInput, GetDeviceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetDeviceDefinitionVersionCommand";
    import { GetFunctionDefinitionCommandInput, GetFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetFunctionDefinitionCommand";
    import { GetFunctionDefinitionVersionCommandInput, GetFunctionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetFunctionDefinitionVersionCommand";
    import { GetGroupCertificateAuthorityCommandInput, GetGroupCertificateAuthorityCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCertificateAuthorityCommand";
    import { GetGroupCertificateConfigurationCommandInput, GetGroupCertificateConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCertificateConfigurationCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupCommand";
    import { GetGroupVersionCommandInput, GetGroupVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetGroupVersionCommand";
    import { GetLoggerDefinitionCommandInput, GetLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetLoggerDefinitionCommand";
    import { GetLoggerDefinitionVersionCommandInput, GetLoggerDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetLoggerDefinitionVersionCommand";
    import { GetResourceDefinitionCommandInput, GetResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetResourceDefinitionCommand";
    import { GetResourceDefinitionVersionCommandInput, GetResourceDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetResourceDefinitionVersionCommand";
    import { GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetServiceRoleForAccountCommand";
    import { GetSubscriptionDefinitionCommandInput, GetSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetSubscriptionDefinitionCommand";
    import { GetSubscriptionDefinitionVersionCommandInput, GetSubscriptionDefinitionVersionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetSubscriptionDefinitionVersionCommand";
    import { GetThingRuntimeConfigurationCommandInput, GetThingRuntimeConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/GetThingRuntimeConfigurationCommand";
    import { ListBulkDeploymentDetailedReportsCommandInput, ListBulkDeploymentDetailedReportsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListBulkDeploymentDetailedReportsCommand";
    import { ListBulkDeploymentsCommandInput, ListBulkDeploymentsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListBulkDeploymentsCommand";
    import { ListConnectorDefinitionsCommandInput, ListConnectorDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListConnectorDefinitionsCommand";
    import { ListConnectorDefinitionVersionsCommandInput, ListConnectorDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListConnectorDefinitionVersionsCommand";
    import { ListCoreDefinitionsCommandInput, ListCoreDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListCoreDefinitionsCommand";
    import { ListCoreDefinitionVersionsCommandInput, ListCoreDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListCoreDefinitionVersionsCommand";
    import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeploymentsCommand";
    import { ListDeviceDefinitionsCommandInput, ListDeviceDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeviceDefinitionsCommand";
    import { ListDeviceDefinitionVersionsCommandInput, ListDeviceDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListDeviceDefinitionVersionsCommand";
    import { ListFunctionDefinitionsCommandInput, ListFunctionDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListFunctionDefinitionsCommand";
    import { ListFunctionDefinitionVersionsCommandInput, ListFunctionDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListFunctionDefinitionVersionsCommand";
    import { ListGroupCertificateAuthoritiesCommandInput, ListGroupCertificateAuthoritiesCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupCertificateAuthoritiesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupsCommand";
    import { ListGroupVersionsCommandInput, ListGroupVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListGroupVersionsCommand";
    import { ListLoggerDefinitionsCommandInput, ListLoggerDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListLoggerDefinitionsCommand";
    import { ListLoggerDefinitionVersionsCommandInput, ListLoggerDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListLoggerDefinitionVersionsCommand";
    import { ListResourceDefinitionsCommandInput, ListResourceDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListResourceDefinitionsCommand";
    import { ListResourceDefinitionVersionsCommandInput, ListResourceDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListResourceDefinitionVersionsCommand";
    import { ListSubscriptionDefinitionsCommandInput, ListSubscriptionDefinitionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListSubscriptionDefinitionsCommand";
    import { ListSubscriptionDefinitionVersionsCommandInput, ListSubscriptionDefinitionVersionsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListSubscriptionDefinitionVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ListTagsForResourceCommand";
    import { ResetDeploymentsCommandInput, ResetDeploymentsCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/ResetDeploymentsCommand";
    import { StartBulkDeploymentCommandInput, StartBulkDeploymentCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/StartBulkDeploymentCommand";
    import { StopBulkDeploymentCommandInput, StopBulkDeploymentCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/StopBulkDeploymentCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UntagResourceCommand";
    import { UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateConnectivityInfoCommand";
    import { UpdateConnectorDefinitionCommandInput, UpdateConnectorDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateConnectorDefinitionCommand";
    import { UpdateCoreDefinitionCommandInput, UpdateCoreDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateCoreDefinitionCommand";
    import { UpdateDeviceDefinitionCommandInput, UpdateDeviceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateDeviceDefinitionCommand";
    import { UpdateFunctionDefinitionCommandInput, UpdateFunctionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateFunctionDefinitionCommand";
    import { UpdateGroupCertificateConfigurationCommandInput, UpdateGroupCertificateConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateGroupCertificateConfigurationCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateGroupCommand";
    import { UpdateLoggerDefinitionCommandInput, UpdateLoggerDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateLoggerDefinitionCommand";
    import { UpdateResourceDefinitionCommandInput, UpdateResourceDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateResourceDefinitionCommand";
    import { UpdateSubscriptionDefinitionCommandInput, UpdateSubscriptionDefinitionCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateSubscriptionDefinitionCommand";
    import { UpdateThingRuntimeConfigurationCommandInput, UpdateThingRuntimeConfigurationCommandOutput } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/commands/UpdateThingRuntimeConfigurationCommand";
    export type ServiceInputTypes = AssociateRoleToGroupCommandInput | AssociateServiceRoleToAccountCommandInput | CreateConnectorDefinitionCommandInput | CreateConnectorDefinitionVersionCommandInput | CreateCoreDefinitionCommandInput | CreateCoreDefinitionVersionCommandInput | CreateDeploymentCommandInput | CreateDeviceDefinitionCommandInput | CreateDeviceDefinitionVersionCommandInput | CreateFunctionDefinitionCommandInput | CreateFunctionDefinitionVersionCommandInput | CreateGroupCertificateAuthorityCommandInput | CreateGroupCommandInput | CreateGroupVersionCommandInput | CreateLoggerDefinitionCommandInput | CreateLoggerDefinitionVersionCommandInput | CreateResourceDefinitionCommandInput | CreateResourceDefinitionVersionCommandInput | CreateSoftwareUpdateJobCommandInput | CreateSubscriptionDefinitionCommandInput | CreateSubscriptionDefinitionVersionCommandInput | DeleteConnectorDefinitionCommandInput | DeleteCoreDefinitionCommandInput | DeleteDeviceDefinitionCommandInput | DeleteFunctionDefinitionCommandInput | DeleteGroupCommandInput | DeleteLoggerDefinitionCommandInput | DeleteResourceDefinitionCommandInput | DeleteSubscriptionDefinitionCommandInput | DisassociateRoleFromGroupCommandInput | DisassociateServiceRoleFromAccountCommandInput | GetAssociatedRoleCommandInput | GetBulkDeploymentStatusCommandInput | GetConnectivityInfoCommandInput | GetConnectorDefinitionCommandInput | GetConnectorDefinitionVersionCommandInput | GetCoreDefinitionCommandInput | GetCoreDefinitionVersionCommandInput | GetDeploymentStatusCommandInput | GetDeviceDefinitionCommandInput | GetDeviceDefinitionVersionCommandInput | GetFunctionDefinitionCommandInput | GetFunctionDefinitionVersionCommandInput | GetGroupCertificateAuthorityCommandInput | GetGroupCertificateConfigurationCommandInput | GetGroupCommandInput | GetGroupVersionCommandInput | GetLoggerDefinitionCommandInput | GetLoggerDefinitionVersionCommandInput | GetResourceDefinitionCommandInput | GetResourceDefinitionVersionCommandInput | GetServiceRoleForAccountCommandInput | GetSubscriptionDefinitionCommandInput | GetSubscriptionDefinitionVersionCommandInput | GetThingRuntimeConfigurationCommandInput | ListBulkDeploymentDetailedReportsCommandInput | ListBulkDeploymentsCommandInput | ListConnectorDefinitionVersionsCommandInput | ListConnectorDefinitionsCommandInput | ListCoreDefinitionVersionsCommandInput | ListCoreDefinitionsCommandInput | ListDeploymentsCommandInput | ListDeviceDefinitionVersionsCommandInput | ListDeviceDefinitionsCommandInput | ListFunctionDefinitionVersionsCommandInput | ListFunctionDefinitionsCommandInput | ListGroupCertificateAuthoritiesCommandInput | ListGroupVersionsCommandInput | ListGroupsCommandInput | ListLoggerDefinitionVersionsCommandInput | ListLoggerDefinitionsCommandInput | ListResourceDefinitionVersionsCommandInput | ListResourceDefinitionsCommandInput | ListSubscriptionDefinitionVersionsCommandInput | ListSubscriptionDefinitionsCommandInput | ListTagsForResourceCommandInput | ResetDeploymentsCommandInput | StartBulkDeploymentCommandInput | StopBulkDeploymentCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateConnectivityInfoCommandInput | UpdateConnectorDefinitionCommandInput | UpdateCoreDefinitionCommandInput | UpdateDeviceDefinitionCommandInput | UpdateFunctionDefinitionCommandInput | UpdateGroupCertificateConfigurationCommandInput | UpdateGroupCommandInput | UpdateLoggerDefinitionCommandInput | UpdateResourceDefinitionCommandInput | UpdateSubscriptionDefinitionCommandInput | UpdateThingRuntimeConfigurationCommandInput;
    export type ServiceOutputTypes = AssociateRoleToGroupCommandOutput | AssociateServiceRoleToAccountCommandOutput | CreateConnectorDefinitionCommandOutput | CreateConnectorDefinitionVersionCommandOutput | CreateCoreDefinitionCommandOutput | CreateCoreDefinitionVersionCommandOutput | CreateDeploymentCommandOutput | CreateDeviceDefinitionCommandOutput | CreateDeviceDefinitionVersionCommandOutput | CreateFunctionDefinitionCommandOutput | CreateFunctionDefinitionVersionCommandOutput | CreateGroupCertificateAuthorityCommandOutput | CreateGroupCommandOutput | CreateGroupVersionCommandOutput | CreateLoggerDefinitionCommandOutput | CreateLoggerDefinitionVersionCommandOutput | CreateResourceDefinitionCommandOutput | CreateResourceDefinitionVersionCommandOutput | CreateSoftwareUpdateJobCommandOutput | CreateSubscriptionDefinitionCommandOutput | CreateSubscriptionDefinitionVersionCommandOutput | DeleteConnectorDefinitionCommandOutput | DeleteCoreDefinitionCommandOutput | DeleteDeviceDefinitionCommandOutput | DeleteFunctionDefinitionCommandOutput | DeleteGroupCommandOutput | DeleteLoggerDefinitionCommandOutput | DeleteResourceDefinitionCommandOutput | DeleteSubscriptionDefinitionCommandOutput | DisassociateRoleFromGroupCommandOutput | DisassociateServiceRoleFromAccountCommandOutput | GetAssociatedRoleCommandOutput | GetBulkDeploymentStatusCommandOutput | GetConnectivityInfoCommandOutput | GetConnectorDefinitionCommandOutput | GetConnectorDefinitionVersionCommandOutput | GetCoreDefinitionCommandOutput | GetCoreDefinitionVersionCommandOutput | GetDeploymentStatusCommandOutput | GetDeviceDefinitionCommandOutput | GetDeviceDefinitionVersionCommandOutput | GetFunctionDefinitionCommandOutput | GetFunctionDefinitionVersionCommandOutput | GetGroupCertificateAuthorityCommandOutput | GetGroupCertificateConfigurationCommandOutput | GetGroupCommandOutput | GetGroupVersionCommandOutput | GetLoggerDefinitionCommandOutput | GetLoggerDefinitionVersionCommandOutput | GetResourceDefinitionCommandOutput | GetResourceDefinitionVersionCommandOutput | GetServiceRoleForAccountCommandOutput | GetSubscriptionDefinitionCommandOutput | GetSubscriptionDefinitionVersionCommandOutput | GetThingRuntimeConfigurationCommandOutput | ListBulkDeploymentDetailedReportsCommandOutput | ListBulkDeploymentsCommandOutput | ListConnectorDefinitionVersionsCommandOutput | ListConnectorDefinitionsCommandOutput | ListCoreDefinitionVersionsCommandOutput | ListCoreDefinitionsCommandOutput | ListDeploymentsCommandOutput | ListDeviceDefinitionVersionsCommandOutput | ListDeviceDefinitionsCommandOutput | ListFunctionDefinitionVersionsCommandOutput | ListFunctionDefinitionsCommandOutput | ListGroupCertificateAuthoritiesCommandOutput | ListGroupVersionsCommandOutput | ListGroupsCommandOutput | ListLoggerDefinitionVersionsCommandOutput | ListLoggerDefinitionsCommandOutput | ListResourceDefinitionVersionsCommandOutput | ListResourceDefinitionsCommandOutput | ListSubscriptionDefinitionVersionsCommandOutput | ListSubscriptionDefinitionsCommandOutput | ListTagsForResourceCommandOutput | ResetDeploymentsCommandOutput | StartBulkDeploymentCommandOutput | StopBulkDeploymentCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateConnectivityInfoCommandOutput | UpdateConnectorDefinitionCommandOutput | UpdateCoreDefinitionCommandOutput | UpdateDeviceDefinitionCommandOutput | UpdateFunctionDefinitionCommandOutput | UpdateGroupCertificateConfigurationCommandOutput | UpdateGroupCommandOutput | UpdateLoggerDefinitionCommandOutput | UpdateResourceDefinitionCommandOutput | UpdateSubscriptionDefinitionCommandOutput | UpdateThingRuntimeConfigurationCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type GreengrassClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of GreengrassClient class constructor that set the region, credentials and other options.
        */
    export interface GreengrassClientConfig extends GreengrassClientConfigType {
    }
    type GreengrassClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of GreengrassClient class. This is resolved and normalized from the {@link GreengrassClientConfig | constructor configuration interface}.
        */
    export interface GreengrassClientResolvedConfig extends GreengrassClientResolvedConfigType {
    }
    /**
        * AWS IoT Greengrass seamlessly extends AWS onto physical devices so they can act locally on the data they generate, while still using the cloud for management, analytics, and durable storage. AWS IoT Greengrass ensures your devices can respond quickly to local events and operate with intermittent connectivity. AWS IoT Greengrass minimizes the cost of transmitting data to the cloud by allowing you to author AWS Lambda functions that execute locally.
        */
    export class GreengrassClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, GreengrassClientResolvedConfig> {
            /**
                * The resolved configuration of GreengrassClient class. This is resolved and normalized from the {@link GreengrassClientConfig | constructor configuration interface}.
                */
            readonly config: GreengrassClientResolvedConfig;
            constructor(configuration: GreengrassClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GreengrassServiceException as __BaseException } from "@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/GreengrassServiceException";
    /**
        * Information about a Greengrass core's connectivity.
        */
    export interface ConnectivityInfo {
            /**
                * The endpoint for the Greengrass core. Can be an IP address or DNS.
                */
            HostAddress?: string;
            /**
                * The ID of the connectivity information.
                */
            Id?: string;
            /**
                * Metadata for this endpoint.
                */
            Metadata?: string;
            /**
                * The port of the Greengrass core. Usually 8883.
                */
            PortNumber?: number;
    }
    export namespace ConnectivityInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectivityInfo) => any;
    }
    /**
        * Information about a connector. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
        */
    export interface Connector {
            /**
                * The ARN of the connector.
                */
            ConnectorArn: string | undefined;
            /**
                * A descriptive or arbitrary ID for the connector. This value must be unique within the connector definition version. Max length is 128 characters with pattern [a-zA-Z0-9:_-]+.
                */
            Id: string | undefined;
            /**
                * The parameters or configuration that the connector uses.
                */
            Parameters?: Record<string, string>;
    }
    export namespace Connector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Connector) => any;
    }
    /**
        * Information about a core.
        */
    export interface Core {
            /**
                * The ARN of the certificate associated with the core.
                */
            CertificateArn: string | undefined;
            /**
                * A descriptive or arbitrary ID for the core. This value must be unique within the core definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
                */
            Id: string | undefined;
            /**
                * If true, the core's local shadow is automatically synced with the cloud.
                */
            SyncShadow?: boolean;
            /**
                * The ARN of the thing which is the core.
                */
            ThingArn: string | undefined;
    }
    export namespace Core {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Core) => any;
    }
    /**
        * Information about a definition.
        */
    export interface DefinitionInformation {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            Tags?: Record<string, string>;
    }
    export namespace DefinitionInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DefinitionInformation) => any;
    }
    /**
        * Information about a device.
        */
    export interface Device {
            /**
                * The ARN of the certificate associated with the device.
                */
            CertificateArn: string | undefined;
            /**
                * A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
                */
            Id: string | undefined;
            /**
                * If true, the device's local shadow will be automatically synced with the cloud.
                */
            SyncShadow?: boolean;
            /**
                * The thing ARN of the device.
                */
            ThingArn: string | undefined;
    }
    export namespace Device {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Device) => any;
    }
    export enum EncodingType {
            binary = "binary",
            json = "json"
    }
    export enum FunctionIsolationMode {
            GreengrassContainer = "GreengrassContainer",
            NoContainer = "NoContainer"
    }
    /**
        * Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
        */
    export interface FunctionRunAsConfig {
            /**
                * The group ID whose permissions are used to run a Lambda function.
                */
            Gid?: number;
            /**
                * The user ID whose permissions are used to run a Lambda function.
                */
            Uid?: number;
    }
    export namespace FunctionRunAsConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionRunAsConfig) => any;
    }
    /**
        * Configuration information that specifies how a Lambda function runs.
        */
    export interface FunctionExecutionConfig {
            /**
                * Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
                */
            IsolationMode?: FunctionIsolationMode | string;
            /**
                * Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
                */
            RunAs?: FunctionRunAsConfig;
    }
    export namespace FunctionExecutionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionExecutionConfig) => any;
    }
    export enum Permission {
            ro = "ro",
            rw = "rw"
    }
    /**
        * A policy used by the function to access a resource.
        */
    export interface ResourceAccessPolicy {
            /**
                * The permissions that the Lambda function has to the resource. Can be one of ''rw'' (read/write) or ''ro'' (read-only).
                */
            Permission?: Permission | string;
            /**
                * The ID of the resource. (This ID is assigned to the resource when you create the resource definiton.)
                */
            ResourceId: string | undefined;
    }
    export namespace ResourceAccessPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceAccessPolicy) => any;
    }
    /**
        * The environment configuration of the function.
        */
    export interface FunctionConfigurationEnvironment {
            /**
                * If true, the Lambda function is allowed to access the host's /sys folder. Use this when the Lambda function needs to read device information from /sys. This setting applies only when you run the Lambda function in a Greengrass container.
                */
            AccessSysfs?: boolean;
            /**
                * Configuration related to executing the Lambda function
                */
            Execution?: FunctionExecutionConfig;
            /**
                * A list of the resources, with their permissions, to which the Lambda function will be granted access. A Lambda function can have at most 10 resources. ResourceAccessPolicies apply only when you run the Lambda function in a Greengrass container.
                */
            ResourceAccessPolicies?: ResourceAccessPolicy[];
            /**
                * Environment variables for the Lambda function's configuration.
                */
            Variables?: Record<string, string>;
    }
    export namespace FunctionConfigurationEnvironment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionConfigurationEnvironment) => any;
    }
    /**
        * The configuration of the Lambda function.
        */
    export interface FunctionConfiguration {
            /**
                * The expected encoding type of the input payload for the function. The default is ''json''.
                */
            EncodingType?: EncodingType | string;
            /**
                * The environment configuration of the function.
                */
            Environment?: FunctionConfigurationEnvironment;
            /**
                * The execution arguments.
                */
            ExecArgs?: string;
            /**
                * The name of the function executable.
                */
            Executable?: string;
            /**
                * The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization.
                */
            MemorySize?: number;
            /**
                * True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
                */
            Pinned?: boolean;
            /**
                * The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request.
                */
            Timeout?: number;
    }
    export namespace FunctionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionConfiguration) => any;
    }
    /**
        * Information about a Lambda function.
        */
    export interface Function {
            /**
                * The ARN of the Lambda function.
                */
            FunctionArn?: string;
            /**
                * The configuration of the Lambda function.
                */
            FunctionConfiguration?: FunctionConfiguration;
            /**
                * A descriptive or arbitrary ID for the function. This value must be unique within the function definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
                */
            Id: string | undefined;
    }
    export namespace Function {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Function) => any;
    }
    /**
        * Information about a certificate authority for a group.
        */
    export interface GroupCertificateAuthorityProperties {
            /**
                * The ARN of the certificate authority for the group.
                */
            GroupCertificateAuthorityArn?: string;
            /**
                * The ID of the certificate authority for the group.
                */
            GroupCertificateAuthorityId?: string;
    }
    export namespace GroupCertificateAuthorityProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupCertificateAuthorityProperties) => any;
    }
    /**
        * Information about a group.
        */
    export interface GroupInformation {
            /**
                * The ARN of the group.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the group was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the group.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the group was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the group.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the group.
                */
            LatestVersionArn?: string;
            /**
                * The name of the group.
                */
            Name?: string;
    }
    export namespace GroupInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupInformation) => any;
    }
    export enum LoggerComponent {
            GreengrassSystem = "GreengrassSystem",
            Lambda = "Lambda"
    }
    export enum LoggerLevel {
            DEBUG = "DEBUG",
            ERROR = "ERROR",
            FATAL = "FATAL",
            INFO = "INFO",
            WARN = "WARN"
    }
    export enum LoggerType {
            AWSCloudWatch = "AWSCloudWatch",
            FileSystem = "FileSystem"
    }
    /**
        * Information about a logger
        */
    export interface Logger {
            /**
                * The component that will be subject to logging.
                */
            Component: LoggerComponent | string | undefined;
            /**
                * A descriptive or arbitrary ID for the logger. This value must be unique within the logger definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
                */
            Id: string | undefined;
            /**
                * The level of the logs.
                */
            Level: LoggerLevel | string | undefined;
            /**
                * The amount of file space, in KB, to use if the local file system is used for logging purposes.
                */
            Space?: number;
            /**
                * The type of log output which will be used.
                */
            Type: LoggerType | string | undefined;
    }
    export namespace Logger {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Logger) => any;
    }
    /**
        * Group owner related settings for local resources.
        */
    export interface GroupOwnerSetting {
            /**
                * If true, AWS IoT Greengrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
                */
            AutoAddGroupOwner?: boolean;
            /**
                * The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
                */
            GroupOwner?: string;
    }
    export namespace GroupOwnerSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupOwnerSetting) => any;
    }
    /**
        * Attributes that define a local device resource.
        */
    export interface LocalDeviceResourceData {
            /**
                * Group/owner related settings for local resources.
                */
            GroupOwnerSetting?: GroupOwnerSetting;
            /**
                * The local absolute path of the device resource. The source path for a device resource can refer only to a character device or block device under ''/dev''.
                */
            SourcePath?: string;
    }
    export namespace LocalDeviceResourceData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LocalDeviceResourceData) => any;
    }
    /**
        * Attributes that define a local volume resource.
        */
    export interface LocalVolumeResourceData {
            /**
                * The absolute local path of the resource inside the Lambda environment.
                */
            DestinationPath?: string;
            /**
                * Allows you to configure additional group privileges for the Lambda process. This field is optional.
                */
            GroupOwnerSetting?: GroupOwnerSetting;
            /**
                * The local absolute path of the volume resource on the host. The source path for a volume resource type cannot start with ''/sys''.
                */
            SourcePath?: string;
    }
    export namespace LocalVolumeResourceData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LocalVolumeResourceData) => any;
    }
    /**
        * The owner setting for downloaded machine learning resources.
        */
    export interface ResourceDownloadOwnerSetting {
            /**
                * The group owner of the resource. This is the name of an existing Linux OS group on the system or a GID. The group's permissions are added to the Lambda process.
                */
            GroupOwner: string | undefined;
            /**
                * The permissions that the group owner has to the resource. Valid values are ''rw'' (read/write) or ''ro'' (read-only).
                */
            GroupPermission: Permission | string | undefined;
    }
    export namespace ResourceDownloadOwnerSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDownloadOwnerSetting) => any;
    }
    /**
        * Attributes that define an Amazon S3 machine learning resource.
        */
    export interface S3MachineLearningModelResourceData {
            /**
                * The absolute local path of the resource inside the Lambda environment.
                */
            DestinationPath?: string;
            /**
                * The owner setting for downloaded machine learning resources.
                */
            OwnerSetting?: ResourceDownloadOwnerSetting;
            /**
                * The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
                */
            S3Uri?: string;
    }
    export namespace S3MachineLearningModelResourceData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3MachineLearningModelResourceData) => any;
    }
    /**
        * Attributes that define an Amazon SageMaker machine learning resource.
        */
    export interface SageMakerMachineLearningModelResourceData {
            /**
                * The absolute local path of the resource inside the Lambda environment.
                */
            DestinationPath?: string;
            /**
                * The owner setting for downloaded machine learning resources.
                */
            OwnerSetting?: ResourceDownloadOwnerSetting;
            /**
                * The ARN of the Amazon SageMaker training job that represents the source model.
                */
            SageMakerJobArn?: string;
    }
    export namespace SageMakerMachineLearningModelResourceData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SageMakerMachineLearningModelResourceData) => any;
    }
    /**
        * Attributes that define a secret resource, which references a secret from AWS Secrets Manager. AWS IoT Greengrass stores a local, encrypted copy of the secret on the Greengrass core, where it can be securely accessed by connectors and Lambda functions.
        */
    export interface SecretsManagerSecretResourceData {
            /**
                * The ARN of the Secrets Manager secret to make available on the core. The value of the secret's latest version (represented by the ''AWSCURRENT'' staging label) is included by default.
                */
            ARN?: string;
            /**
                * Optional. The staging labels whose values you want to make available on the core, in addition to ''AWSCURRENT''.
                */
            AdditionalStagingLabelsToDownload?: string[];
    }
    export namespace SecretsManagerSecretResourceData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecretsManagerSecretResourceData) => any;
    }
    /**
        * A container for resource data. The container takes only one of the following supported resource data types: ''LocalDeviceResourceData'', ''LocalVolumeResourceData'', ''SageMakerMachineLearningModelResourceData'', ''S3MachineLearningModelResourceData'', ''SecretsManagerSecretResourceData''.
        */
    export interface ResourceDataContainer {
            /**
                * Attributes that define the local device resource.
                */
            LocalDeviceResourceData?: LocalDeviceResourceData;
            /**
                * Attributes that define the local volume resource.
                */
            LocalVolumeResourceData?: LocalVolumeResourceData;
            /**
                * Attributes that define an Amazon S3 machine learning resource.
                */
            S3MachineLearningModelResourceData?: S3MachineLearningModelResourceData;
            /**
                * Attributes that define an Amazon SageMaker machine learning resource.
                */
            SageMakerMachineLearningModelResourceData?: SageMakerMachineLearningModelResourceData;
            /**
                * Attributes that define a secret resource, which references a secret from AWS Secrets Manager.
                */
            SecretsManagerSecretResourceData?: SecretsManagerSecretResourceData;
    }
    export namespace ResourceDataContainer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataContainer) => any;
    }
    /**
        * Information about a resource.
        */
    export interface Resource {
            /**
                * The resource ID, used to refer to a resource in the Lambda function configuration. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group.
                */
            Id: string | undefined;
            /**
                * The descriptive resource name, which is displayed on the AWS IoT Greengrass console. Max length 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group.
                */
            Name: string | undefined;
            /**
                * A container of data for all resource types.
                */
            ResourceDataContainer: ResourceDataContainer | undefined;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    /**
        * Information about a subscription.
        */
    export interface Subscription {
            /**
                * A descriptive or arbitrary ID for the subscription. This value must be unique within the subscription definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
                */
            Id: string | undefined;
            /**
                * The source of the subscription. Can be a thing ARN, a Lambda function ARN, a connector ARN, 'cloud' (which represents the AWS IoT cloud), or 'GGShadowService'.
                */
            Source: string | undefined;
            /**
                * The MQTT topic used to route the message.
                */
            Subject: string | undefined;
            /**
                * Where the message is sent to. Can be a thing ARN, a Lambda function ARN, a connector ARN, 'cloud' (which represents the AWS IoT cloud), or 'GGShadowService'.
                */
            Target: string | undefined;
    }
    export namespace Subscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subscription) => any;
    }
    /**
        * Information about a version.
        */
    export interface VersionInformation {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace VersionInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VersionInformation) => any;
    }
    export interface AssociateRoleToGroupRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The ARN of the role you wish to associate with this group. The existence of the role is not validated.
                */
            RoleArn: string | undefined;
    }
    export namespace AssociateRoleToGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateRoleToGroupRequest) => any;
    }
    export interface AssociateRoleToGroupResponse {
            /**
                * The time, in milliseconds since the epoch, when the role ARN was associated with the group.
                */
            AssociatedAt?: string;
    }
    export namespace AssociateRoleToGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateRoleToGroupResponse) => any;
    }
    /**
        * Details about the error.
        */
    export interface ErrorDetail {
            /**
                * A detailed error code.
                */
            DetailedErrorCode?: string;
            /**
                * A detailed error message.
                */
            DetailedErrorMessage?: string;
    }
    export namespace ErrorDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetail) => any;
    }
    /**
        * General error information.
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * Details about the error.
                */
            ErrorDetails?: ErrorDetail[];
            /**
                * A message containing information about the error.
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * General error information.
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            /**
                * Details about the error.
                */
            ErrorDetails?: ErrorDetail[];
            /**
                * A message containing information about the error.
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    export interface AssociateServiceRoleToAccountRequest {
            /**
                * The ARN of the service role you wish to associate with your account.
                */
            RoleArn: string | undefined;
    }
    export namespace AssociateServiceRoleToAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateServiceRoleToAccountRequest) => any;
    }
    export interface AssociateServiceRoleToAccountResponse {
            /**
                * The time when the service role was associated with the account.
                */
            AssociatedAt?: string;
    }
    export namespace AssociateServiceRoleToAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateServiceRoleToAccountResponse) => any;
    }
    /**
        * Information about a bulk deployment. You cannot start a new bulk deployment while another one is still running or in a non-terminal state.
        */
    export interface BulkDeployment {
            /**
                * The ARN of the bulk deployment.
                */
            BulkDeploymentArn?: string;
            /**
                * The ID of the bulk deployment.
                */
            BulkDeploymentId?: string;
            /**
                * The time, in ISO format, when the deployment was created.
                */
            CreatedAt?: string;
    }
    export namespace BulkDeployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BulkDeployment) => any;
    }
    /**
        * Relevant metrics on input records processed during bulk deployment.
        */
    export interface BulkDeploymentMetrics {
            /**
                * The total number of records that returned a non-retryable error. For example, this can occur if a group record from the input file uses an invalid format or specifies a nonexistent group version, or if the execution role doesn't grant permission to deploy a group or group version.
                */
            InvalidInputRecords?: number;
            /**
                * The total number of group records from the input file that have been processed so far, or attempted.
                */
            RecordsProcessed?: number;
            /**
                * The total number of deployment attempts that returned a retryable error. For example, a retry is triggered if the attempt to deploy a group returns a throttling error. ''StartBulkDeployment'' retries a group deployment up to five times.
                */
            RetryAttempts?: number;
    }
    export namespace BulkDeploymentMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BulkDeploymentMetrics) => any;
    }
    export enum DeploymentType {
            ForceResetDeployment = "ForceResetDeployment",
            NewDeployment = "NewDeployment",
            Redeployment = "Redeployment",
            ResetDeployment = "ResetDeployment"
    }
    /**
        * Information about an individual group deployment in a bulk deployment operation.
        */
    export interface BulkDeploymentResult {
            /**
                * The time, in ISO format, when the deployment was created.
                */
            CreatedAt?: string;
            /**
                * The ARN of the group deployment.
                */
            DeploymentArn?: string;
            /**
                * The ID of the group deployment.
                */
            DeploymentId?: string;
            /**
                * The current status of the group deployment: ''InProgress'', ''Building'', ''Success'', or ''Failure''.
                */
            DeploymentStatus?: string;
            /**
                * The type of the deployment.
                */
            DeploymentType?: DeploymentType | string;
            /**
                * Details about the error.
                */
            ErrorDetails?: ErrorDetail[];
            /**
                * The error message for a failed deployment
                */
            ErrorMessage?: string;
            /**
                * The ARN of the Greengrass group.
                */
            GroupArn?: string;
    }
    export namespace BulkDeploymentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BulkDeploymentResult) => any;
    }
    export enum BulkDeploymentStatus {
            Completed = "Completed",
            Failed = "Failed",
            Initializing = "Initializing",
            Running = "Running",
            Stopped = "Stopped",
            Stopping = "Stopping"
    }
    export enum ConfigurationSyncStatus {
            InSync = "InSync",
            OutOfSync = "OutOfSync"
    }
    /**
        * Information about the connector definition version, which is a container for connectors.
        */
    export interface ConnectorDefinitionVersion {
            /**
                * A list of references to connectors in this version, with their corresponding configuration settings.
                */
            Connectors?: Connector[];
    }
    export namespace ConnectorDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectorDefinitionVersion) => any;
    }
    /**
        * Information about a core definition version.
        */
    export interface CoreDefinitionVersion {
            /**
                * A list of cores in the core definition version.
                */
            Cores?: Core[];
    }
    export namespace CoreDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreDefinitionVersion) => any;
    }
    export interface CreateConnectorDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the connector definition.
                */
            InitialVersion?: ConnectorDefinitionVersion;
            /**
                * The name of the connector definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateConnectorDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectorDefinitionRequest) => any;
    }
    export interface CreateConnectorDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateConnectorDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectorDefinitionResponse) => any;
    }
    export interface CreateConnectorDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the connector definition.
                */
            ConnectorDefinitionId: string | undefined;
            /**
                * A list of references to connectors in this version, with their corresponding configuration settings.
                */
            Connectors?: Connector[];
    }
    export namespace CreateConnectorDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectorDefinitionVersionRequest) => any;
    }
    export interface CreateConnectorDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateConnectorDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectorDefinitionVersionResponse) => any;
    }
    /**
        * Information needed to create a core definition.
        */
    export interface CreateCoreDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the core definition.
                */
            InitialVersion?: CoreDefinitionVersion;
            /**
                * The name of the core definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateCoreDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCoreDefinitionRequest) => any;
    }
    export interface CreateCoreDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateCoreDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCoreDefinitionResponse) => any;
    }
    export interface CreateCoreDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the core definition.
                */
            CoreDefinitionId: string | undefined;
            /**
                * A list of cores in the core definition version.
                */
            Cores?: Core[];
    }
    export namespace CreateCoreDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCoreDefinitionVersionRequest) => any;
    }
    export interface CreateCoreDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateCoreDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCoreDefinitionVersionResponse) => any;
    }
    export interface CreateDeploymentRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the deployment if you wish to redeploy a previous deployment.
                */
            DeploymentId?: string;
            /**
                * The type of deployment. When used for ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
                */
            DeploymentType: DeploymentType | string | undefined;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The ID of the group version to be deployed.
                */
            GroupVersionId?: string;
    }
    export namespace CreateDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentRequest) => any;
    }
    export interface CreateDeploymentResponse {
            /**
                * The ARN of the deployment.
                */
            DeploymentArn?: string;
            /**
                * The ID of the deployment.
                */
            DeploymentId?: string;
    }
    export namespace CreateDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentResponse) => any;
    }
    /**
        * Information about a device definition version.
        */
    export interface DeviceDefinitionVersion {
            /**
                * A list of devices in the definition version.
                */
            Devices?: Device[];
    }
    export namespace DeviceDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceDefinitionVersion) => any;
    }
    export interface CreateDeviceDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the device definition.
                */
            InitialVersion?: DeviceDefinitionVersion;
            /**
                * The name of the device definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateDeviceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceDefinitionRequest) => any;
    }
    export interface CreateDeviceDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateDeviceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceDefinitionResponse) => any;
    }
    export interface CreateDeviceDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the device definition.
                */
            DeviceDefinitionId: string | undefined;
            /**
                * A list of devices in the definition version.
                */
            Devices?: Device[];
    }
    export namespace CreateDeviceDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceDefinitionVersionRequest) => any;
    }
    export interface CreateDeviceDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateDeviceDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeviceDefinitionVersionResponse) => any;
    }
    /**
        * Configuration information that specifies how a Lambda function runs.
        */
    export interface FunctionDefaultExecutionConfig {
            /**
                * Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
                */
            IsolationMode?: FunctionIsolationMode | string;
            /**
                * Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
                */
            RunAs?: FunctionRunAsConfig;
    }
    export namespace FunctionDefaultExecutionConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionDefaultExecutionConfig) => any;
    }
    /**
        * The default configuration that applies to all Lambda functions in the group. Individual Lambda functions can override these settings.
        */
    export interface FunctionDefaultConfig {
            /**
                * Configuration information that specifies how a Lambda function runs.
                */
            Execution?: FunctionDefaultExecutionConfig;
    }
    export namespace FunctionDefaultConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionDefaultConfig) => any;
    }
    /**
        * Information about a function definition version.
        */
    export interface FunctionDefinitionVersion {
            /**
                * The default configuration that applies to all Lambda functions in this function definition version. Individual Lambda functions can override these settings.
                */
            DefaultConfig?: FunctionDefaultConfig;
            /**
                * A list of Lambda functions in this function definition version.
                */
            Functions?: Function[];
    }
    export namespace FunctionDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionDefinitionVersion) => any;
    }
    export interface CreateFunctionDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the function definition.
                */
            InitialVersion?: FunctionDefinitionVersion;
            /**
                * The name of the function definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateFunctionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionDefinitionRequest) => any;
    }
    export interface CreateFunctionDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateFunctionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionDefinitionResponse) => any;
    }
    /**
        * Information needed to create a function definition version.
        */
    export interface CreateFunctionDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The default configuration that applies to all Lambda functions in this function definition version. Individual Lambda functions can override these settings.
                */
            DefaultConfig?: FunctionDefaultConfig;
            /**
                * The ID of the Lambda function definition.
                */
            FunctionDefinitionId: string | undefined;
            /**
                * A list of Lambda functions in this function definition version.
                */
            Functions?: Function[];
    }
    export namespace CreateFunctionDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionDefinitionVersionRequest) => any;
    }
    export interface CreateFunctionDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateFunctionDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionDefinitionVersionResponse) => any;
    }
    /**
        * Information about a group version.
        */
    export interface GroupVersion {
            /**
                * The ARN of the connector definition version for this group.
                */
            ConnectorDefinitionVersionArn?: string;
            /**
                * The ARN of the core definition version for this group.
                */
            CoreDefinitionVersionArn?: string;
            /**
                * The ARN of the device definition version for this group.
                */
            DeviceDefinitionVersionArn?: string;
            /**
                * The ARN of the function definition version for this group.
                */
            FunctionDefinitionVersionArn?: string;
            /**
                * The ARN of the logger definition version for this group.
                */
            LoggerDefinitionVersionArn?: string;
            /**
                * The ARN of the resource definition version for this group.
                */
            ResourceDefinitionVersionArn?: string;
            /**
                * The ARN of the subscription definition version for this group.
                */
            SubscriptionDefinitionVersionArn?: string;
    }
    export namespace GroupVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupVersion) => any;
    }
    export interface CreateGroupRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the group.
                */
            InitialVersion?: GroupVersion;
            /**
                * The name of the group.
                */
            Name: string | undefined;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupRequest) => any;
    }
    export interface CreateGroupResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupResponse) => any;
    }
    export interface CreateGroupCertificateAuthorityRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace CreateGroupCertificateAuthorityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupCertificateAuthorityRequest) => any;
    }
    export interface CreateGroupCertificateAuthorityResponse {
            /**
                * The ARN of the group certificate authority.
                */
            GroupCertificateAuthorityArn?: string;
    }
    export namespace CreateGroupCertificateAuthorityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupCertificateAuthorityResponse) => any;
    }
    export interface CreateGroupVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ARN of the connector definition version for this group.
                */
            ConnectorDefinitionVersionArn?: string;
            /**
                * The ARN of the core definition version for this group.
                */
            CoreDefinitionVersionArn?: string;
            /**
                * The ARN of the device definition version for this group.
                */
            DeviceDefinitionVersionArn?: string;
            /**
                * The ARN of the function definition version for this group.
                */
            FunctionDefinitionVersionArn?: string;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The ARN of the logger definition version for this group.
                */
            LoggerDefinitionVersionArn?: string;
            /**
                * The ARN of the resource definition version for this group.
                */
            ResourceDefinitionVersionArn?: string;
            /**
                * The ARN of the subscription definition version for this group.
                */
            SubscriptionDefinitionVersionArn?: string;
    }
    export namespace CreateGroupVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupVersionRequest) => any;
    }
    export interface CreateGroupVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateGroupVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupVersionResponse) => any;
    }
    /**
        * Information about a logger definition version.
        */
    export interface LoggerDefinitionVersion {
            /**
                * A list of loggers.
                */
            Loggers?: Logger[];
    }
    export namespace LoggerDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggerDefinitionVersion) => any;
    }
    export interface CreateLoggerDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the logger definition.
                */
            InitialVersion?: LoggerDefinitionVersion;
            /**
                * The name of the logger definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateLoggerDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoggerDefinitionRequest) => any;
    }
    export interface CreateLoggerDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateLoggerDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoggerDefinitionResponse) => any;
    }
    export interface CreateLoggerDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the logger definition.
                */
            LoggerDefinitionId: string | undefined;
            /**
                * A list of loggers.
                */
            Loggers?: Logger[];
    }
    export namespace CreateLoggerDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoggerDefinitionVersionRequest) => any;
    }
    export interface CreateLoggerDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateLoggerDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoggerDefinitionVersionResponse) => any;
    }
    /**
        * Information about a resource definition version.
        */
    export interface ResourceDefinitionVersion {
            /**
                * A list of resources.
                */
            Resources?: Resource[];
    }
    export namespace ResourceDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDefinitionVersion) => any;
    }
    export interface CreateResourceDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the resource definition.
                */
            InitialVersion?: ResourceDefinitionVersion;
            /**
                * The name of the resource definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateResourceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceDefinitionRequest) => any;
    }
    export interface CreateResourceDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateResourceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceDefinitionResponse) => any;
    }
    export interface CreateResourceDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the resource definition.
                */
            ResourceDefinitionId: string | undefined;
            /**
                * A list of resources.
                */
            Resources?: Resource[];
    }
    export namespace CreateResourceDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceDefinitionVersionRequest) => any;
    }
    export interface CreateResourceDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateResourceDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceDefinitionVersionResponse) => any;
    }
    export enum SoftwareToUpdate {
            core = "core",
            ota_agent = "ota_agent"
    }
    export enum UpdateAgentLogLevel {
            DEBUG = "DEBUG",
            ERROR = "ERROR",
            FATAL = "FATAL",
            INFO = "INFO",
            NONE = "NONE",
            TRACE = "TRACE",
            VERBOSE = "VERBOSE",
            WARN = "WARN"
    }
    export enum UpdateTargetsArchitecture {
            aarch64 = "aarch64",
            armv6l = "armv6l",
            armv7l = "armv7l",
            x86_64 = "x86_64"
    }
    export enum UpdateTargetsOperatingSystem {
            amazon_linux = "amazon_linux",
            openwrt = "openwrt",
            raspbian = "raspbian",
            ubuntu = "ubuntu"
    }
    export interface CreateSoftwareUpdateJobRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact.
                */
            S3UrlSignerRole: string | undefined;
            /**
                * The piece of software on the Greengrass core that will be updated.
                */
            SoftwareToUpdate: SoftwareToUpdate | string | undefined;
            /**
                * The minimum level of log statements that should be logged by the OTA Agent during an update.
                */
            UpdateAgentLogLevel?: UpdateAgentLogLevel | string;
            /**
                * The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to.
                */
            UpdateTargets: string[] | undefined;
            /**
                * The architecture of the cores which are the targets of an update.
                */
            UpdateTargetsArchitecture: UpdateTargetsArchitecture | string | undefined;
            /**
                * The operating system of the cores which are the targets of an update.
                */
            UpdateTargetsOperatingSystem: UpdateTargetsOperatingSystem | string | undefined;
    }
    export namespace CreateSoftwareUpdateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSoftwareUpdateJobRequest) => any;
    }
    export interface CreateSoftwareUpdateJobResponse {
            /**
                * The IoT Job ARN corresponding to this update.
                */
            IotJobArn?: string;
            /**
                * The IoT Job Id corresponding to this update.
                */
            IotJobId?: string;
            /**
                * The software version installed on the device or devices after the update.
                */
            PlatformSoftwareVersion?: string;
    }
    export namespace CreateSoftwareUpdateJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSoftwareUpdateJobResponse) => any;
    }
    /**
        * Information about a subscription definition version.
        */
    export interface SubscriptionDefinitionVersion {
            /**
                * A list of subscriptions.
                */
            Subscriptions?: Subscription[];
    }
    export namespace SubscriptionDefinitionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubscriptionDefinitionVersion) => any;
    }
    export interface CreateSubscriptionDefinitionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * Information about the initial version of the subscription definition.
                */
            InitialVersion?: SubscriptionDefinitionVersion;
            /**
                * The name of the subscription definition.
                */
            Name?: string;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace CreateSubscriptionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSubscriptionDefinitionRequest) => any;
    }
    export interface CreateSubscriptionDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace CreateSubscriptionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSubscriptionDefinitionResponse) => any;
    }
    export interface CreateSubscriptionDefinitionVersionRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ID of the subscription definition.
                */
            SubscriptionDefinitionId: string | undefined;
            /**
                * A list of subscriptions.
                */
            Subscriptions?: Subscription[];
    }
    export namespace CreateSubscriptionDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSubscriptionDefinitionVersionRequest) => any;
    }
    export interface CreateSubscriptionDefinitionVersionResponse {
            /**
                * The ARN of the version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the version was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the parent definition that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the version.
                */
            Version?: string;
    }
    export namespace CreateSubscriptionDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSubscriptionDefinitionVersionResponse) => any;
    }
    export interface DeleteConnectorDefinitionRequest {
            /**
                * The ID of the connector definition.
                */
            ConnectorDefinitionId: string | undefined;
    }
    export namespace DeleteConnectorDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectorDefinitionRequest) => any;
    }
    export interface DeleteConnectorDefinitionResponse {
    }
    export namespace DeleteConnectorDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectorDefinitionResponse) => any;
    }
    export interface DeleteCoreDefinitionRequest {
            /**
                * The ID of the core definition.
                */
            CoreDefinitionId: string | undefined;
    }
    export namespace DeleteCoreDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreDefinitionRequest) => any;
    }
    export interface DeleteCoreDefinitionResponse {
    }
    export namespace DeleteCoreDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreDefinitionResponse) => any;
    }
    export interface DeleteDeviceDefinitionRequest {
            /**
                * The ID of the device definition.
                */
            DeviceDefinitionId: string | undefined;
    }
    export namespace DeleteDeviceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceDefinitionRequest) => any;
    }
    export interface DeleteDeviceDefinitionResponse {
    }
    export namespace DeleteDeviceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceDefinitionResponse) => any;
    }
    export interface DeleteFunctionDefinitionRequest {
            /**
                * The ID of the Lambda function definition.
                */
            FunctionDefinitionId: string | undefined;
    }
    export namespace DeleteFunctionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionDefinitionRequest) => any;
    }
    export interface DeleteFunctionDefinitionResponse {
    }
    export namespace DeleteFunctionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionDefinitionResponse) => any;
    }
    export interface DeleteGroupRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace DeleteGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
    }
    export interface DeleteGroupResponse {
    }
    export namespace DeleteGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupResponse) => any;
    }
    export interface DeleteLoggerDefinitionRequest {
            /**
                * The ID of the logger definition.
                */
            LoggerDefinitionId: string | undefined;
    }
    export namespace DeleteLoggerDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoggerDefinitionRequest) => any;
    }
    export interface DeleteLoggerDefinitionResponse {
    }
    export namespace DeleteLoggerDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoggerDefinitionResponse) => any;
    }
    export interface DeleteResourceDefinitionRequest {
            /**
                * The ID of the resource definition.
                */
            ResourceDefinitionId: string | undefined;
    }
    export namespace DeleteResourceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceDefinitionRequest) => any;
    }
    export interface DeleteResourceDefinitionResponse {
    }
    export namespace DeleteResourceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceDefinitionResponse) => any;
    }
    export interface DeleteSubscriptionDefinitionRequest {
            /**
                * The ID of the subscription definition.
                */
            SubscriptionDefinitionId: string | undefined;
    }
    export namespace DeleteSubscriptionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSubscriptionDefinitionRequest) => any;
    }
    export interface DeleteSubscriptionDefinitionResponse {
    }
    export namespace DeleteSubscriptionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSubscriptionDefinitionResponse) => any;
    }
    /**
        * Information about a deployment.
        */
    export interface Deployment {
            /**
                * The time, in milliseconds since the epoch, when the deployment was created.
                */
            CreatedAt?: string;
            /**
                * The ARN of the deployment.
                */
            DeploymentArn?: string;
            /**
                * The ID of the deployment.
                */
            DeploymentId?: string;
            /**
                * The type of the deployment.
                */
            DeploymentType?: DeploymentType | string;
            /**
                * The ARN of the group for this deployment.
                */
            GroupArn?: string;
    }
    export namespace Deployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployment) => any;
    }
    export interface DisassociateRoleFromGroupRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace DisassociateRoleFromGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateRoleFromGroupRequest) => any;
    }
    export interface DisassociateRoleFromGroupResponse {
            /**
                * The time, in milliseconds since the epoch, when the role was disassociated from the group.
                */
            DisassociatedAt?: string;
    }
    export namespace DisassociateRoleFromGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateRoleFromGroupResponse) => any;
    }
    export interface DisassociateServiceRoleFromAccountRequest {
    }
    export namespace DisassociateServiceRoleFromAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateServiceRoleFromAccountRequest) => any;
    }
    export interface DisassociateServiceRoleFromAccountResponse {
            /**
                * The time when the service role was disassociated from the account.
                */
            DisassociatedAt?: string;
    }
    export namespace DisassociateServiceRoleFromAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateServiceRoleFromAccountResponse) => any;
    }
    export interface GetAssociatedRoleRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace GetAssociatedRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssociatedRoleRequest) => any;
    }
    export interface GetAssociatedRoleResponse {
            /**
                * The time when the role was associated with the group.
                */
            AssociatedAt?: string;
            /**
                * The ARN of the role that is associated with the group.
                */
            RoleArn?: string;
    }
    export namespace GetAssociatedRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssociatedRoleResponse) => any;
    }
    export interface GetBulkDeploymentStatusRequest {
            /**
                * The ID of the bulk deployment.
                */
            BulkDeploymentId: string | undefined;
    }
    export namespace GetBulkDeploymentStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBulkDeploymentStatusRequest) => any;
    }
    export interface GetBulkDeploymentStatusResponse {
            /**
                * Relevant metrics on input records processed during bulk deployment.
                */
            BulkDeploymentMetrics?: BulkDeploymentMetrics;
            /**
                * The status of the bulk deployment.
                */
            BulkDeploymentStatus?: BulkDeploymentStatus | string;
            /**
                * The time, in ISO format, when the deployment was created.
                */
            CreatedAt?: string;
            /**
                * Error details
                */
            ErrorDetails?: ErrorDetail[];
            /**
                * Error message
                */
            ErrorMessage?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetBulkDeploymentStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBulkDeploymentStatusResponse) => any;
    }
    export interface GetConnectivityInfoRequest {
            /**
                * The thing name.
                */
            ThingName: string | undefined;
    }
    export namespace GetConnectivityInfoRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectivityInfoRequest) => any;
    }
    export interface GetConnectivityInfoResponse {
            /**
                * Connectivity info list.
                */
            ConnectivityInfo?: ConnectivityInfo[];
            /**
                * A message about the connectivity info request.
                */
            Message?: string;
    }
    export namespace GetConnectivityInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectivityInfoResponse) => any;
    }
    export interface GetConnectorDefinitionRequest {
            /**
                * The ID of the connector definition.
                */
            ConnectorDefinitionId: string | undefined;
    }
    export namespace GetConnectorDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectorDefinitionRequest) => any;
    }
    export interface GetConnectorDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetConnectorDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectorDefinitionResponse) => any;
    }
    export interface GetConnectorDefinitionVersionRequest {
            /**
                * The ID of the connector definition.
                */
            ConnectorDefinitionId: string | undefined;
            /**
                * The ID of the connector definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListConnectorDefinitionVersions'' requests. If the version is the last one that was associated with a connector definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            ConnectorDefinitionVersionId: string | undefined;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace GetConnectorDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectorDefinitionVersionRequest) => any;
    }
    export interface GetConnectorDefinitionVersionResponse {
            /**
                * The ARN of the connector definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the connector definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the connector definition version.
                */
            Definition?: ConnectorDefinitionVersion;
            /**
                * The ID of the connector definition version.
                */
            Id?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The version of the connector definition version.
                */
            Version?: string;
    }
    export namespace GetConnectorDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectorDefinitionVersionResponse) => any;
    }
    export interface GetCoreDefinitionRequest {
            /**
                * The ID of the core definition.
                */
            CoreDefinitionId: string | undefined;
    }
    export namespace GetCoreDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreDefinitionRequest) => any;
    }
    export interface GetCoreDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetCoreDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreDefinitionResponse) => any;
    }
    export interface GetCoreDefinitionVersionRequest {
            /**
                * The ID of the core definition.
                */
            CoreDefinitionId: string | undefined;
            /**
                * The ID of the core definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListCoreDefinitionVersions'' requests. If the version is the last one that was associated with a core definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            CoreDefinitionVersionId: string | undefined;
    }
    export namespace GetCoreDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreDefinitionVersionRequest) => any;
    }
    export interface GetCoreDefinitionVersionResponse {
            /**
                * The ARN of the core definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the core definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the core definition version.
                */
            Definition?: CoreDefinitionVersion;
            /**
                * The ID of the core definition version.
                */
            Id?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The version of the core definition version.
                */
            Version?: string;
    }
    export namespace GetCoreDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreDefinitionVersionResponse) => any;
    }
    export interface GetDeploymentStatusRequest {
            /**
                * The ID of the deployment.
                */
            DeploymentId: string | undefined;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace GetDeploymentStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentStatusRequest) => any;
    }
    export interface GetDeploymentStatusResponse {
            /**
                * The status of the deployment: ''InProgress'', ''Building'', ''Success'', or ''Failure''.
                */
            DeploymentStatus?: string;
            /**
                * The type of the deployment.
                */
            DeploymentType?: DeploymentType | string;
            /**
                * Error details
                */
            ErrorDetails?: ErrorDetail[];
            /**
                * Error message
                */
            ErrorMessage?: string;
            /**
                * The time, in milliseconds since the epoch, when the deployment status was updated.
                */
            UpdatedAt?: string;
    }
    export namespace GetDeploymentStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentStatusResponse) => any;
    }
    export interface GetDeviceDefinitionRequest {
            /**
                * The ID of the device definition.
                */
            DeviceDefinitionId: string | undefined;
    }
    export namespace GetDeviceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceDefinitionRequest) => any;
    }
    export interface GetDeviceDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetDeviceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceDefinitionResponse) => any;
    }
    export interface GetDeviceDefinitionVersionRequest {
            /**
                * The ID of the device definition.
                */
            DeviceDefinitionId: string | undefined;
            /**
                * The ID of the device definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListDeviceDefinitionVersions'' requests. If the version is the last one that was associated with a device definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            DeviceDefinitionVersionId: string | undefined;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace GetDeviceDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceDefinitionVersionRequest) => any;
    }
    export interface GetDeviceDefinitionVersionResponse {
            /**
                * The ARN of the device definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the device definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the device definition version.
                */
            Definition?: DeviceDefinitionVersion;
            /**
                * The ID of the device definition version.
                */
            Id?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The version of the device definition version.
                */
            Version?: string;
    }
    export namespace GetDeviceDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeviceDefinitionVersionResponse) => any;
    }
    export interface GetFunctionDefinitionRequest {
            /**
                * The ID of the Lambda function definition.
                */
            FunctionDefinitionId: string | undefined;
    }
    export namespace GetFunctionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionDefinitionRequest) => any;
    }
    export interface GetFunctionDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetFunctionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionDefinitionResponse) => any;
    }
    export interface GetFunctionDefinitionVersionRequest {
            /**
                * The ID of the Lambda function definition.
                */
            FunctionDefinitionId: string | undefined;
            /**
                * The ID of the function definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListFunctionDefinitionVersions'' requests. If the version is the last one that was associated with a function definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            FunctionDefinitionVersionId: string | undefined;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace GetFunctionDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionDefinitionVersionRequest) => any;
    }
    export interface GetFunctionDefinitionVersionResponse {
            /**
                * The ARN of the function definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the function definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information on the definition.
                */
            Definition?: FunctionDefinitionVersion;
            /**
                * The ID of the function definition version.
                */
            Id?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The version of the function definition version.
                */
            Version?: string;
    }
    export namespace GetFunctionDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionDefinitionVersionResponse) => any;
    }
    export interface GetGroupRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace GetGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupRequest) => any;
    }
    export interface GetGroupResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupResponse) => any;
    }
    export interface GetGroupCertificateAuthorityRequest {
            /**
                * The ID of the certificate authority.
                */
            CertificateAuthorityId: string | undefined;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace GetGroupCertificateAuthorityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupCertificateAuthorityRequest) => any;
    }
    export interface GetGroupCertificateAuthorityResponse {
            /**
                * The ARN of the certificate authority for the group.
                */
            GroupCertificateAuthorityArn?: string;
            /**
                * The ID of the certificate authority for the group.
                */
            GroupCertificateAuthorityId?: string;
            /**
                * The PEM encoded certificate for the group.
                */
            PemEncodedCertificate?: string;
    }
    export namespace GetGroupCertificateAuthorityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupCertificateAuthorityResponse) => any;
    }
    export interface GetGroupCertificateConfigurationRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace GetGroupCertificateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupCertificateConfigurationRequest) => any;
    }
    export interface GetGroupCertificateConfigurationResponse {
            /**
                * The amount of time remaining before the certificate authority expires, in milliseconds.
                */
            CertificateAuthorityExpiryInMilliseconds?: string;
            /**
                * The amount of time remaining before the certificate expires, in milliseconds.
                */
            CertificateExpiryInMilliseconds?: string;
            /**
                * The ID of the group certificate configuration.
                */
            GroupId?: string;
    }
    export namespace GetGroupCertificateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupCertificateConfigurationResponse) => any;
    }
    export interface GetGroupVersionRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The ID of the group version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListGroupVersions'' requests. If the version is the last one that was associated with a group, the value also maps to the ''LatestVersion'' property of the corresponding ''GroupInformation'' object.
                */
            GroupVersionId: string | undefined;
    }
    export namespace GetGroupVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupVersionRequest) => any;
    }
    export interface GetGroupVersionResponse {
            /**
                * The ARN of the group version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the group version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the group version definition.
                */
            Definition?: GroupVersion;
            /**
                * The ID of the group that the version is associated with.
                */
            Id?: string;
            /**
                * The ID of the group version.
                */
            Version?: string;
    }
    export namespace GetGroupVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupVersionResponse) => any;
    }
    export interface GetLoggerDefinitionRequest {
            /**
                * The ID of the logger definition.
                */
            LoggerDefinitionId: string | undefined;
    }
    export namespace GetLoggerDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoggerDefinitionRequest) => any;
    }
    export interface GetLoggerDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetLoggerDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoggerDefinitionResponse) => any;
    }
    export interface GetLoggerDefinitionVersionRequest {
            /**
                * The ID of the logger definition.
                */
            LoggerDefinitionId: string | undefined;
            /**
                * The ID of the logger definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListLoggerDefinitionVersions'' requests. If the version is the last one that was associated with a logger definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            LoggerDefinitionVersionId: string | undefined;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace GetLoggerDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoggerDefinitionVersionRequest) => any;
    }
    export interface GetLoggerDefinitionVersionResponse {
            /**
                * The ARN of the logger definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the logger definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the logger definition version.
                */
            Definition?: LoggerDefinitionVersion;
            /**
                * The ID of the logger definition version.
                */
            Id?: string;
            /**
                * The version of the logger definition version.
                */
            Version?: string;
    }
    export namespace GetLoggerDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoggerDefinitionVersionResponse) => any;
    }
    export interface GetResourceDefinitionRequest {
            /**
                * The ID of the resource definition.
                */
            ResourceDefinitionId: string | undefined;
    }
    export namespace GetResourceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceDefinitionRequest) => any;
    }
    export interface GetResourceDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetResourceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceDefinitionResponse) => any;
    }
    export interface GetResourceDefinitionVersionRequest {
            /**
                * The ID of the resource definition.
                */
            ResourceDefinitionId: string | undefined;
            /**
                * The ID of the resource definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListResourceDefinitionVersions'' requests. If the version is the last one that was associated with a resource definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            ResourceDefinitionVersionId: string | undefined;
    }
    export namespace GetResourceDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceDefinitionVersionRequest) => any;
    }
    export interface GetResourceDefinitionVersionResponse {
            /**
                * Arn of the resource definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the resource definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the definition.
                */
            Definition?: ResourceDefinitionVersion;
            /**
                * The ID of the resource definition version.
                */
            Id?: string;
            /**
                * The version of the resource definition version.
                */
            Version?: string;
    }
    export namespace GetResourceDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourceDefinitionVersionResponse) => any;
    }
    export interface GetServiceRoleForAccountRequest {
    }
    export namespace GetServiceRoleForAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceRoleForAccountRequest) => any;
    }
    export interface GetServiceRoleForAccountResponse {
            /**
                * The time when the service role was associated with the account.
                */
            AssociatedAt?: string;
            /**
                * The ARN of the role which is associated with the account.
                */
            RoleArn?: string;
    }
    export namespace GetServiceRoleForAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceRoleForAccountResponse) => any;
    }
    export interface GetSubscriptionDefinitionRequest {
            /**
                * The ID of the subscription definition.
                */
            SubscriptionDefinitionId: string | undefined;
    }
    export namespace GetSubscriptionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSubscriptionDefinitionRequest) => any;
    }
    export interface GetSubscriptionDefinitionResponse {
            /**
                * The ARN of the definition.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was created.
                */
            CreationTimestamp?: string;
            /**
                * The ID of the definition.
                */
            Id?: string;
            /**
                * The time, in milliseconds since the epoch, when the definition was last updated.
                */
            LastUpdatedTimestamp?: string;
            /**
                * The ID of the latest version associated with the definition.
                */
            LatestVersion?: string;
            /**
                * The ARN of the latest version associated with the definition.
                */
            LatestVersionArn?: string;
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * Tag(s) attached to the resource arn.
                */
            tags?: Record<string, string>;
    }
    export namespace GetSubscriptionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSubscriptionDefinitionResponse) => any;
    }
    export interface GetSubscriptionDefinitionVersionRequest {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The ID of the subscription definition.
                */
            SubscriptionDefinitionId: string | undefined;
            /**
                * The ID of the subscription definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListSubscriptionDefinitionVersions'' requests. If the version is the last one that was associated with a subscription definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.
                */
            SubscriptionDefinitionVersionId: string | undefined;
    }
    export namespace GetSubscriptionDefinitionVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSubscriptionDefinitionVersionRequest) => any;
    }
    export interface GetSubscriptionDefinitionVersionResponse {
            /**
                * The ARN of the subscription definition version.
                */
            Arn?: string;
            /**
                * The time, in milliseconds since the epoch, when the subscription definition version was created.
                */
            CreationTimestamp?: string;
            /**
                * Information about the subscription definition version.
                */
            Definition?: SubscriptionDefinitionVersion;
            /**
                * The ID of the subscription definition version.
                */
            Id?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The version of the subscription definition version.
                */
            Version?: string;
    }
    export namespace GetSubscriptionDefinitionVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSubscriptionDefinitionVersionResponse) => any;
    }
    export interface GetThingRuntimeConfigurationRequest {
            /**
                * The thing name.
                */
            ThingName: string | undefined;
    }
    export namespace GetThingRuntimeConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetThingRuntimeConfigurationRequest) => any;
    }
    export enum Telemetry {
            Off = "Off",
            On = "On"
    }
    /**
        * Configuration settings for running telemetry.
        */
    export interface TelemetryConfiguration {
            /**
                * Synchronization status of the device reported configuration with the desired configuration.
                */
            ConfigurationSyncStatus?: ConfigurationSyncStatus | string;
            /**
                * Configure telemetry to be on or off.
                */
            Telemetry: Telemetry | string | undefined;
    }
    export namespace TelemetryConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TelemetryConfiguration) => any;
    }
    /**
        * Runtime configuration for a thing.
        */
    export interface RuntimeConfiguration {
            /**
                * Configuration for telemetry service.
                */
            TelemetryConfiguration?: TelemetryConfiguration;
    }
    export namespace RuntimeConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuntimeConfiguration) => any;
    }
    export interface GetThingRuntimeConfigurationResponse {
            /**
                * Runtime configuration for a thing.
                */
            RuntimeConfiguration?: RuntimeConfiguration;
    }
    export namespace GetThingRuntimeConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetThingRuntimeConfigurationResponse) => any;
    }
    export interface ListBulkDeploymentDetailedReportsRequest {
            /**
                * The ID of the bulk deployment.
                */
            BulkDeploymentId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListBulkDeploymentDetailedReportsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBulkDeploymentDetailedReportsRequest) => any;
    }
    export interface ListBulkDeploymentDetailedReportsResponse {
            /**
                * A list of the individual group deployments in the bulk deployment operation.
                */
            Deployments?: BulkDeploymentResult[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListBulkDeploymentDetailedReportsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBulkDeploymentDetailedReportsResponse) => any;
    }
    export interface ListBulkDeploymentsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListBulkDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBulkDeploymentsRequest) => any;
    }
    export interface ListBulkDeploymentsResponse {
            /**
                * A list of bulk deployments.
                */
            BulkDeployments?: BulkDeployment[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListBulkDeploymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBulkDeploymentsResponse) => any;
    }
    export interface ListConnectorDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListConnectorDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectorDefinitionsRequest) => any;
    }
    export interface ListConnectorDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListConnectorDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectorDefinitionsResponse) => any;
    }
    export interface ListConnectorDefinitionVersionsRequest {
            /**
                * The ID of the connector definition.
                */
            ConnectorDefinitionId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListConnectorDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectorDefinitionVersionsRequest) => any;
    }
    export interface ListConnectorDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListConnectorDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConnectorDefinitionVersionsResponse) => any;
    }
    export interface ListCoreDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListCoreDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreDefinitionsRequest) => any;
    }
    export interface ListCoreDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListCoreDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreDefinitionsResponse) => any;
    }
    export interface ListCoreDefinitionVersionsRequest {
            /**
                * The ID of the core definition.
                */
            CoreDefinitionId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListCoreDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreDefinitionVersionsRequest) => any;
    }
    export interface ListCoreDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListCoreDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreDefinitionVersionsResponse) => any;
    }
    export interface ListDeploymentsRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentsRequest) => any;
    }
    export interface ListDeploymentsResponse {
            /**
                * A list of deployments for the requested groups.
                */
            Deployments?: Deployment[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListDeploymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentsResponse) => any;
    }
    export interface ListDeviceDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListDeviceDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceDefinitionsRequest) => any;
    }
    export interface ListDeviceDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListDeviceDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceDefinitionsResponse) => any;
    }
    export interface ListDeviceDefinitionVersionsRequest {
            /**
                * The ID of the device definition.
                */
            DeviceDefinitionId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListDeviceDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceDefinitionVersionsRequest) => any;
    }
    export interface ListDeviceDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListDeviceDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeviceDefinitionVersionsResponse) => any;
    }
    export interface ListFunctionDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListFunctionDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionDefinitionsRequest) => any;
    }
    export interface ListFunctionDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListFunctionDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionDefinitionsResponse) => any;
    }
    export interface ListFunctionDefinitionVersionsRequest {
            /**
                * The ID of the Lambda function definition.
                */
            FunctionDefinitionId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListFunctionDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionDefinitionVersionsRequest) => any;
    }
    export interface ListFunctionDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListFunctionDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionDefinitionVersionsResponse) => any;
    }
    export interface ListGroupCertificateAuthoritiesRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace ListGroupCertificateAuthoritiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupCertificateAuthoritiesRequest) => any;
    }
    export interface ListGroupCertificateAuthoritiesResponse {
            /**
                * A list of certificate authorities associated with the group.
                */
            GroupCertificateAuthorities?: GroupCertificateAuthorityProperties[];
    }
    export namespace ListGroupCertificateAuthoritiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupCertificateAuthoritiesResponse) => any;
    }
    export interface ListGroupsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsRequest) => any;
    }
    export interface ListGroupsResponse {
            /**
                * Information about a group.
                */
            Groups?: GroupInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsResponse) => any;
    }
    export interface ListGroupVersionsRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListGroupVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupVersionsRequest) => any;
    }
    export interface ListGroupVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListGroupVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupVersionsResponse) => any;
    }
    export interface ListLoggerDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListLoggerDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLoggerDefinitionsRequest) => any;
    }
    export interface ListLoggerDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListLoggerDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLoggerDefinitionsResponse) => any;
    }
    export interface ListLoggerDefinitionVersionsRequest {
            /**
                * The ID of the logger definition.
                */
            LoggerDefinitionId: string | undefined;
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListLoggerDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLoggerDefinitionVersionsRequest) => any;
    }
    export interface ListLoggerDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListLoggerDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLoggerDefinitionVersionsResponse) => any;
    }
    export interface ListResourceDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListResourceDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceDefinitionsRequest) => any;
    }
    export interface ListResourceDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListResourceDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceDefinitionsResponse) => any;
    }
    export interface ListResourceDefinitionVersionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The ID of the resource definition.
                */
            ResourceDefinitionId: string | undefined;
    }
    export namespace ListResourceDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceDefinitionVersionsRequest) => any;
    }
    export interface ListResourceDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListResourceDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceDefinitionVersionsResponse) => any;
    }
    export interface ListSubscriptionDefinitionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListSubscriptionDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionDefinitionsRequest) => any;
    }
    export interface ListSubscriptionDefinitionsResponse {
            /**
                * Information about a definition.
                */
            Definitions?: DefinitionInformation[];
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
    }
    export namespace ListSubscriptionDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionDefinitionsResponse) => any;
    }
    export interface ListSubscriptionDefinitionVersionsRequest {
            /**
                * The maximum number of results to be returned per request.
                */
            MaxResults?: string;
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * The ID of the subscription definition.
                */
            SubscriptionDefinitionId: string | undefined;
    }
    export namespace ListSubscriptionDefinitionVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionDefinitionVersionsRequest) => any;
    }
    export interface ListSubscriptionDefinitionVersionsResponse {
            /**
                * The token for the next set of results, or ''null'' if there are no additional results.
                */
            NextToken?: string;
            /**
                * Information about a version.
                */
            Versions?: VersionInformation[];
    }
    export namespace ListSubscriptionDefinitionVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSubscriptionDefinitionVersionsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * The Amazon Resource Name (ARN) of the resource.
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * The key-value pair for the resource tag.
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * Information needed to reset deployments.
        */
    export interface ResetDeploymentsRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * If true, performs a best-effort only core reset.
                */
            Force?: boolean;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace ResetDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDeploymentsRequest) => any;
    }
    export interface ResetDeploymentsResponse {
            /**
                * The ARN of the deployment.
                */
            DeploymentArn?: string;
            /**
                * The ID of the deployment.
                */
            DeploymentId?: string;
    }
    export namespace ResetDeploymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDeploymentsResponse) => any;
    }
    export interface StartBulkDeploymentRequest {
            /**
                * A client token used to correlate requests and responses.
                */
            AmznClientToken?: string;
            /**
                * The ARN of the execution role to associate with the bulk deployment operation. This IAM role must allow the ''greengrass:CreateDeployment'' action for all group versions that are listed in the input file. This IAM role must have access to the S3 bucket containing the input file.
                */
            ExecutionRoleArn: string | undefined;
            /**
                * The URI of the input file contained in the S3 bucket. The execution role must have ''getObject'' permissions on this bucket to access the input file. The input file is a JSON-serialized, line delimited file with UTF-8 encoding that provides a list of group and version IDs and the deployment type. This file must be less than 100 MB. Currently, AWS IoT Greengrass supports only ''NewDeployment'' deployment types.
                */
            InputFileUri: string | undefined;
            /**
                * Tag(s) to add to the new resource.
                */
            tags?: Record<string, string>;
    }
    export namespace StartBulkDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartBulkDeploymentRequest) => any;
    }
    export interface StartBulkDeploymentResponse {
            /**
                * The ARN of the bulk deployment.
                */
            BulkDeploymentArn?: string;
            /**
                * The ID of the bulk deployment.
                */
            BulkDeploymentId?: string;
    }
    export namespace StartBulkDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartBulkDeploymentResponse) => any;
    }
    export interface StopBulkDeploymentRequest {
            /**
                * The ID of the bulk deployment.
                */
            BulkDeploymentId: string | undefined;
    }
    export namespace StopBulkDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopBulkDeploymentRequest) => any;
    }
    export interface StopBulkDeploymentResponse {
    }
    export namespace StopBulkDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopBulkDeploymentResponse) => any;
    }
    /**
        * A map of the key-value pairs for the resource tag.
        */
    export interface TagResourceRequest {
            /**
                * The Amazon Resource Name (ARN) of the resource.
                */
            ResourceArn: string | undefined;
            /**
                * The key-value pair for the resource tag.
                */
            tags?: Record<string, string>;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * The Amazon Resource Name (ARN) of the resource.
                */
            ResourceArn: string | undefined;
            /**
                * An array of tag keys to delete
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    /**
        * Connectivity information.
        */
    export interface UpdateConnectivityInfoRequest {
            /**
                * A list of connectivity info.
                */
            ConnectivityInfo?: ConnectivityInfo[];
            /**
                * The thing name.
                */
            ThingName: string | undefined;
    }
    export namespace UpdateConnectivityInfoRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectivityInfoRequest) => any;
    }
    export interface UpdateConnectivityInfoResponse {
            /**
                * A message about the connectivity info update request.
                */
            Message?: string;
            /**
                * The new version of the connectivity info.
                */
            Version?: string;
    }
    export namespace UpdateConnectivityInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectivityInfoResponse) => any;
    }
    export interface UpdateConnectorDefinitionRequest {
            /**
                * The ID of the connector definition.
                */
            ConnectorDefinitionId: string | undefined;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace UpdateConnectorDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectorDefinitionRequest) => any;
    }
    export interface UpdateConnectorDefinitionResponse {
    }
    export namespace UpdateConnectorDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectorDefinitionResponse) => any;
    }
    export interface UpdateCoreDefinitionRequest {
            /**
                * The ID of the core definition.
                */
            CoreDefinitionId: string | undefined;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace UpdateCoreDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCoreDefinitionRequest) => any;
    }
    export interface UpdateCoreDefinitionResponse {
    }
    export namespace UpdateCoreDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCoreDefinitionResponse) => any;
    }
    export interface UpdateDeviceDefinitionRequest {
            /**
                * The ID of the device definition.
                */
            DeviceDefinitionId: string | undefined;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace UpdateDeviceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceDefinitionRequest) => any;
    }
    export interface UpdateDeviceDefinitionResponse {
    }
    export namespace UpdateDeviceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceDefinitionResponse) => any;
    }
    export interface UpdateFunctionDefinitionRequest {
            /**
                * The ID of the Lambda function definition.
                */
            FunctionDefinitionId: string | undefined;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace UpdateFunctionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionDefinitionRequest) => any;
    }
    export interface UpdateFunctionDefinitionResponse {
    }
    export namespace UpdateFunctionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionDefinitionResponse) => any;
    }
    export interface UpdateGroupRequest {
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace UpdateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupRequest) => any;
    }
    export interface UpdateGroupResponse {
    }
    export namespace UpdateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupResponse) => any;
    }
    export interface UpdateGroupCertificateConfigurationRequest {
            /**
                * The amount of time remaining before the certificate expires, in milliseconds.
                */
            CertificateExpiryInMilliseconds?: string;
            /**
                * The ID of the Greengrass group.
                */
            GroupId: string | undefined;
    }
    export namespace UpdateGroupCertificateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupCertificateConfigurationRequest) => any;
    }
    export interface UpdateGroupCertificateConfigurationResponse {
            /**
                * The amount of time remaining before the certificate authority expires, in milliseconds.
                */
            CertificateAuthorityExpiryInMilliseconds?: string;
            /**
                * The amount of time remaining before the certificate expires, in milliseconds.
                */
            CertificateExpiryInMilliseconds?: string;
            /**
                * The ID of the group certificate configuration.
                */
            GroupId?: string;
    }
    export namespace UpdateGroupCertificateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupCertificateConfigurationResponse) => any;
    }
    export interface UpdateLoggerDefinitionRequest {
            /**
                * The ID of the logger definition.
                */
            LoggerDefinitionId: string | undefined;
            /**
                * The name of the definition.
                */
            Name?: string;
    }
    export namespace UpdateLoggerDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoggerDefinitionRequest) => any;
    }
    export interface UpdateLoggerDefinitionResponse {
    }
    export namespace UpdateLoggerDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoggerDefinitionResponse) => any;
    }
    export interface UpdateResourceDefinitionRequest {
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * The ID of the resource definition.
                */
            ResourceDefinitionId: string | undefined;
    }
    export namespace UpdateResourceDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceDefinitionRequest) => any;
    }
    export interface UpdateResourceDefinitionResponse {
    }
    export namespace UpdateResourceDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceDefinitionResponse) => any;
    }
    export interface UpdateSubscriptionDefinitionRequest {
            /**
                * The name of the definition.
                */
            Name?: string;
            /**
                * The ID of the subscription definition.
                */
            SubscriptionDefinitionId: string | undefined;
    }
    export namespace UpdateSubscriptionDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubscriptionDefinitionRequest) => any;
    }
    export interface UpdateSubscriptionDefinitionResponse {
    }
    export namespace UpdateSubscriptionDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubscriptionDefinitionResponse) => any;
    }
    /**
        * Configuration settings for running telemetry.
        */
    export interface TelemetryConfigurationUpdate {
            /**
                * Configure telemetry to be on or off.
                */
            Telemetry: Telemetry | string | undefined;
    }
    export namespace TelemetryConfigurationUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TelemetryConfigurationUpdate) => any;
    }
    export interface UpdateThingRuntimeConfigurationRequest {
            /**
                * Configuration for telemetry service.
                */
            TelemetryConfiguration?: TelemetryConfigurationUpdate;
            /**
                * The thing name.
                */
            ThingName: string | undefined;
    }
    export namespace UpdateThingRuntimeConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThingRuntimeConfigurationRequest) => any;
    }
    export interface UpdateThingRuntimeConfigurationResponse {
    }
    export namespace UpdateThingRuntimeConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateThingRuntimeConfigurationResponse) => any;
    }
}

declare module '@aws-sdk/client-greengrass/node_modules/@aws-sdk/client-greengrass/dist-types/models/GreengrassServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Greengrass service.
        */
    export class GreengrassServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

