{
  "statements": [
    {
      "stateName": "Try Catch",
      "try": {
        "statements": [
          {
            "stateName": "asl.fail({ error: \" ...",
            "name": {
              "identifier": "result",
              "compilerGenerated": true,
              "_syntaxKind": "identifier",
              "type": "unknown"
            },
            "expression": {
              "cause": "bad luck",
              "error": "InternalFailure",
              "_syntaxKind": "asl-fail-state"
            },
            "_syntaxKind": "variable-assignment"
          },
          {
            "expression": {
              "identifier": "result",
              "compilerGenerated": true,
              "_syntaxKind": "identifier",
              "type": "unknown"
            },
            "stateName": "Return result",
            "_syntaxKind": "return"
          }
        ],
        "_syntaxKind": "function"
      },
      "catch": [
        {
          "errorEquals": [
            "States.ALL"
          ],
          "block": {
            "inputArgumentName": {
              "identifier": "e",
              "_syntaxKind": "identifier"
            },
            "statements": [
              {
                "name": {
                  "identifier": "aslError",
                  "_syntaxKind": "identifier",
                  "type": "object"
                },
                "expression": {
                  "stateName": "Assign aslError",
                  "parameters": {
                    "identifier": "e",
                    "_syntaxKind": "identifier",
                    "type": "unknown"
                  },
                  "source": "aslError = e as asl.AslError",
                  "_syntaxKind": "asl-pass-state"
                },
                "stateName": "Assign aslError",
                "_syntaxKind": "variable-assignment"
              },
              {
                "stateName": "If (\"Error\" in aslError & ...",
                "condition": {
                  "lhs": {
                    "lhs": {
                      "value": "Error",
                      "type": "string",
                      "_syntaxKind": "literal"
                    },
                    "operator": "exists-in",
                    "rhs": {
                      "identifier": "aslError",
                      "_syntaxKind": "identifier",
                      "type": "object"
                    },
                    "_syntaxKind": "binary-expression"
                  },
                  "operator": "and",
                  "rhs": {
                    "lhs": {
                      "value": "Cause",
                      "type": "string",
                      "_syntaxKind": "literal"
                    },
                    "operator": "exists-in",
                    "rhs": {
                      "identifier": "aslError",
                      "_syntaxKind": "identifier",
                      "type": "object"
                    },
                    "_syntaxKind": "binary-expression"
                  },
                  "_syntaxKind": "binary-expression"
                },
                "then": {
                  "statements": [
                    {
                      "stateName": "",
                      "name": {
                        "identifier": "result",
                        "compilerGenerated": true,
                        "_syntaxKind": "identifier",
                        "type": "unknown"
                      },
                      "expression": {
                        "arguments": [
                          {
                            "value": "{} ({})",
                            "type": "string",
                            "_syntaxKind": "literal"
                          },
                          {
                            "identifier": "aslError.Error",
                            "type": "string",
                            "_syntaxKind": "identifier"
                          },
                          {
                            "identifier": "aslError.Cause",
                            "type": "string",
                            "_syntaxKind": "identifier"
                          }
                        ],
                        "function": "asl.states.format",
                        "_syntaxKind": "asl-intrinsic-function"
                      },
                      "_syntaxKind": "variable-assignment"
                    },
                    {
                      "expression": {
                        "identifier": "result",
                        "compilerGenerated": true,
                        "_syntaxKind": "identifier",
                        "type": "unknown"
                      },
                      "stateName": "Return result",
                      "_syntaxKind": "return"
                    }
                  ],
                  "_syntaxKind": "function"
                },
                "source": "if (\"Error\" in aslError && \"Cause\" in aslError) {\n      return `${aslError.Error} (${aslError.Cause})`;\n    }",
                "_syntaxKind": "if"
              }
            ],
            "_syntaxKind": "function"
          }
        }
      ],
      "_syntaxKind": "try"
    },
    {
      "expression": {
        "value": "this should not happen",
        "type": "string",
        "_syntaxKind": "literal"
      },
      "_syntaxKind": "return",
      "stateName": "Return \"this should not h ..."
    }
  ],
  "_syntaxKind": "statemachine"
}