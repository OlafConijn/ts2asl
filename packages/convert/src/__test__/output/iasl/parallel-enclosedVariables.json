{
  "inputArgumentName": {
    "identifier": "input",
    "_syntaxKind": "identifier"
  },
  "statements": [
    {
      "name": {
        "identifier": "enclosedVar1",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "Assign enclosedVar1",
        "parameters": {
          "properties": {
            "something": {
              "value": "left",
              "type": "string",
              "_syntaxKind": "literal"
            }
          },
          "_syntaxKind": "literal-object"
        },
        "source": "enclosedVar1 = { something: \"left\" }",
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "Assign enclosedVar1",
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "enclosedVar2",
        "_syntaxKind": "identifier",
        "type": "object"
      },
      "expression": {
        "stateName": "Assign enclosedVar2",
        "parameters": {
          "properties": {
            "something": {
              "value": "right",
              "type": "string",
              "_syntaxKind": "literal"
            }
          },
          "_syntaxKind": "literal-object"
        },
        "source": "enclosedVar2 = { something: \"right\" }",
        "_syntaxKind": "asl-pass-state"
      },
      "stateName": "Assign enclosedVar2",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "",
      "name": {
        "identifier": "result",
        "compilerGenerated": true,
        "_syntaxKind": "identifier",
        "type": "unknown"
      },
      "expression": {
        "branches": [
          {
            "statements": [
              {
                "stateName": "worker(enclosedVar1)",
                "resource": "[!lambda[worker]arn]",
                "retry": [
                  {
                    "errorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "intervalSeconds": 2,
                    "maxAttempts": 6,
                    "backoffRate": 2
                  }
                ],
                "parameters": {
                  "identifier": "enclosedVar1",
                  "_syntaxKind": "identifier",
                  "type": "object"
                },
                "source": "worker(enclosedVar1)",
                "_syntaxKind": "asl-task-state"
              }
            ],
            "_syntaxKind": "function"
          },
          {
            "statements": [
              {
                "stateName": "worker(enclosedVar2)",
                "resource": "[!lambda[worker]arn]",
                "retry": [
                  {
                    "errorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "intervalSeconds": 2,
                    "maxAttempts": 6,
                    "backoffRate": 2
                  }
                ],
                "parameters": {
                  "identifier": "enclosedVar2",
                  "_syntaxKind": "identifier",
                  "type": "object"
                },
                "source": "worker(enclosedVar2)",
                "_syntaxKind": "asl-task-state"
              }
            ],
            "_syntaxKind": "function"
          }
        ],
        "source": "Promise.all([\n    async () => {\n      await worker(enclosedVar1);\n    },\n    async () => {\n      await worker(enclosedVar2);\n    },\n  ])",
        "_syntaxKind": "asl-parallel-state"
      },
      "_syntaxKind": "variable-assignment"
    },
    {
      "expression": {
        "identifier": "result",
        "compilerGenerated": true,
        "_syntaxKind": "identifier",
        "type": "unknown"
      },
      "stateName": "Return result",
      "_syntaxKind": "return"
    }
  ],
  "_syntaxKind": "statemachine"
}