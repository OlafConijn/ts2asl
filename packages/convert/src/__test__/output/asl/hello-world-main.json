{
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "vars.$": "$$.Execution.Input",
        "_undefined": null
      },
      "Next": "If (typeof input.name !== ..."
    },
    "If (typeof input.name !== ...": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "And": [
              {
                "Variable": "$.vars.name",
                "IsPresent": true
              },
              {
                "Variable": "$.vars.name",
                "IsString": true
              }
            ]
          },
          "Next": "Assign input.name"
        }
      ],
      "Comment": "source: if (typeof input.name !== \"string\") { input.na ...",
      "Default": "random()"
    },
    "Assign input.name": {
      "Type": "Pass",
      "Result": "World",
      "ResultPath": "$.vars.name",
      "Next": "random()"
    },
    "random()": {
      "Type": "Task",
      "ResultPath": "$.tmp.result",
      "Resource": "[!lambda[random]arn]",
      "Comment": "source: random()",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Assign rnd"
    },
    "Assign rnd": {
      "Type": "Pass",
      "InputPath": "$.tmp.result",
      "ResultPath": "$.vars.rnd",
      "Comment": "source: rnd = await random()",
      "Next": "Return { greeting: `H ..."
    },
    "Return { greeting: `H ...": {
      "Type": "Pass",
      "Parameters": {
        "greeting.$": "States.Format('Hello {}', $.vars.name)",
        "luckyNumber.$": "$.vars.rnd"
      },
      "End": true
    }
  }
}