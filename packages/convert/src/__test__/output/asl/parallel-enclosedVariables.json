{
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Pass",
      "ResultPath": "$",
      "Parameters": {
        "vars.$": "$$.Execution.Input",
        "_undefined": null
      },
      "Next": "Assign enclosedVar1"
    },
    "Assign enclosedVar1": {
      "Type": "Pass",
      "Result": {
        "something": "left"
      },
      "ResultPath": "$.vars.enclosedVar1",
      "Comment": "source: enclosedVar1 = { something: \"left\" }",
      "Next": "Assign enclosedVar2"
    },
    "Assign enclosedVar2": {
      "Type": "Pass",
      "Result": {
        "something": "right"
      },
      "ResultPath": "$.vars.enclosedVar2",
      "Comment": "source: enclosedVar2 = { something: \"right\" }",
      "Next": "Parallel"
    },
    "Parallel": {
      "Branches": [
        {
          "StartAt": "worker(enclosedVar1)",
          "States": {
            "worker(enclosedVar1)": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "[!lambda[worker]arn]",
              "InputPath": "$.vars.enclosedVar1",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Comment": "source: worker(enclosedVar1)",
              "End": true
            }
          }
        },
        {
          "StartAt": "worker(enclosedVar2)",
          "States": {
            "worker(enclosedVar2)": {
              "Type": "Task",
              "ResultPath": null,
              "Resource": "[!lambda[worker]arn]",
              "InputPath": "$.vars.enclosedVar2",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Comment": "source: worker(enclosedVar2)",
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.tmp.result",
      "Parameters": {
        "vars": {
          "enclosedVar1.$": "$.vars.enclosedVar1",
          "enclosedVar2.$": "$.vars.enclosedVar2"
        }
      },
      "Comment": "source: Promise.all([ async () => { await worker(enclo ...",
      "Type": "Parallel",
      "Next": "Return"
    },
    "Return": {
      "Type": "Pass",
      "InputPath": "$.tmp.result",
      "End": true
    }
  }
}